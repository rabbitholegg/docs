import { boostRegistryAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName, type Hex } from 'viem';
import { Deployable, type DeployableOptions, type GenericDeployableParams } from './Deployable/Deployable';
import type { DeployableTarget } from './Deployable/DeployableTarget';
import { type GenericLog, type HashAndSimulatedResult, type ReadParams, type RegistryType, type WriteParams } from './utils';
/**
 * The ABI of the BoostRegistry contract, if needed for low level operations
 *
 * @type {typeof boostRegistryAbi}
 */
export { boostRegistryAbi };
/**
 * The address of the deployed `BoostRegistry` instance. In prerelease mode, this will be its sepolia address
 *
 * @type {Address}
 */
export declare const BOOST_REGISTRY_ADDRESS: `0x${string}`;
/**
 * The fixed addresses for the deployed Boost Registry.
 * By default, `new BoostRegistry` will use the address deployed to the currently connected chain, or `BOOST_REGISTRY_ADDRESS` if not provided.
 *
 * @type {Record<number, Address>}
 */
export declare const BOOST_REGISTRY_ADDRESSES: Record<number, Address>;
/**
 * A record of `BoostRegistry` event names to `AbiEvent` objects for use with `getLogs`
 *
 * @export
 * @typedef {BoostRegistryLog}
 * @template {ContractEventName<typeof boostRegistryAbi>} [event=ContractEventName<
 *     typeof boostRegistryAbi
 *   >]
 */
export type BoostRegistryLog<event extends ContractEventName<typeof boostRegistryAbi> = ContractEventName<typeof boostRegistryAbi>> = GenericLog<typeof boostRegistryAbi, event>;
/**
 * Instantiation options for a previously deployed Boost Registry
 *
 * @export
 * @interface BoostRegistryDeployedOptions
 * @typedef {BoostRegistryDeployedOptions}
 * @extends {DeployableOptions}
 */
export interface BoostRegistryDeployedOptions extends DeployableOptions {
    /**
     * The address for a Boost Registry, if different than `BOOST_REGISTRY_ADDRESS`
     *
     * @type {?Address}
     */
    address?: Address;
}
/**
 * The Boost Registry does not take any construction arguments, so if you'd like to deploy a new Boost Registry, pass an explicit null to the `address` field.
 *
 * @export
 * @interface BoostRegistryOptionsWithPayload
 * @typedef {BoostRegistryOptionsWithPayload}
 * @extends {DeployableOptions}
 */
export interface BoostRegistryOptionsWithPayload extends DeployableOptions {
    /**
     *
     * @type {null}
     */
    address: null;
}
/**
 * Instantiation options for a Boost Registry.
 *
 * @example
 * To target Boost's Registry, omit the address field.
 * Otherwise, supply a custom address to a previously deployed custom Boost Registry.
 * You can also pass `{ address: null }` if you are intending to deploy a new Boost Registry.
 * ```ts
 * let registry = new BoostRegistry({ config, account })
 * // or
 * registry = new BoostRegistry({ config, account, address: CUSTOM_ADDRESS })
 * // or
 * registry = new BoostRegistry({ config, account, address: null })
 * await registry.deploy()
 * ```
 *
 * @export
 * @typedef {BoostRegistryConfig}
 */
export type BoostRegistryConfig = BoostRegistryDeployedOptions | BoostRegistryOptionsWithPayload;
/**
 * Constructs a new Boost Registry. A registry for base implementations and cloned instances.
 * This contract is used to register base implementations and deploy new instances of those implementations for use within the Boost protocol.
 *
 * @see {@link BoostRegistryConfig}
 * @export
 * @class BoostRegistry
 * @typedef {BoostRegistry}
 * @extends {Deployable<never[]>}
 */
export declare class BoostRegistry extends Deployable<never[], typeof boostRegistryAbi> {
    /**
     * A static property representing a map of stringified chain ID's to the address of the deployed implementation on chain
     *
     * @static
     * @readonly
     * @type {Record<string, Address>}
     */
    static readonly addresses: Record<number, Address>;
    /**
     * A getter that will return Boost registry's static addresses by numerical chain ID
     *
     * @public
     * @readonly
     * @type {Record<number, Address>}
     */
    get addresses(): Record<number, Address>;
    /**
     * Creates an instance of BoostRegistry.
     *
     * @see {@link BoostRegistryConfig}
     * @constructor
     * @param {BoostRegistryConfig} param0
     * @param {Config} param0.config - [Wagmi Configuration](https://wagmi.sh/core/api/createConfig)
     * @param {?Account} [param0.account] - [Viem Local Account](https://viem.sh/docs/accounts/local)
     * @param {({ address?: Address; } | {})} param0....options
     */
    constructor({ config, account, ...options }: BoostRegistryConfig);
    /**
     *  Register a new base implementation of a given type
     *
     * @public
     * @async
     * @param {RegistryType} registryType - The base type for the implementation
     * @param {string} name - A name for the implementation (must be unique within the given type)
     * @param {Address} implementation - The address of the implementation contract
     * @param {?WriteParams} [params] - Optional params to provide the underlying Viem contract call
     * @returns {Promise<void>}
     * @example
     * ```ts
     * await registry.register(ContractAction.registryType, 'ContractAction', ContractAction.base)
     * ```
     */
    register(registryType: RegistryType, name: string, implementation: Address, params?: WriteParams<typeof boostRegistryAbi, 'register'>): Promise<void>;
    /**
     * @see {@link register}
     * @public
     * @async
     * @param {RegistryType} registryType
     * @param {string} name
     * @param {Address} implementation
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    registerRaw(registryType: RegistryType, name: string, implementation: Address, params?: WriteParams<typeof boostRegistryAbi, 'register'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Initialize a new instance of a registered base implementation, returning the provided target with a new address set on it.
     * This method is the same as `clone`, but serves to make its function more obvious as to why you'd need to use it.
     *
     * @public
     * @async
     * @template {DeployableTarget} Target
     * @param {string} displayName - The display name for the clone
     * @param {Target} target - An instance of a target contract to clone and initialize
     * @param {?WriteParams} [params]
     * @returns {Promise<Target>} - The provided instance, but with a new address attached.
     * biome-ignore lint/suspicious/noExplicitAny: any deployable target will suffice
     */
    initialize<Target extends DeployableTarget<any, any>>(displayName: string, target: Target, params?: WriteParams<typeof boostRegistryAbi, 'deployClone'>): Promise<Target>;
    /**
     * Deploy a new instance of a registered base implementation, returning the provided target with a new address set on it.
     *
     * @public
     * @async
     * @template {DeployableTarget} Target
     * @param {string} displayName - The display name for the clone
     * @param {Target} target - An instance of a target contract to clone and initialize
     * @param {?WriteParams} [params]
     * @returns {Promise<Target>} - The provided instance, but with a new address attached.
     * biome-ignore lint/suspicious/noExplicitAny: any deployable target will suffice
     */
    clone<Target extends DeployableTarget<any, any>>(displayName: string, target: Target, params?: WriteParams<typeof boostRegistryAbi, 'deployClone'>): Promise<Target>;
    /**
     *
     * @see {@link clone}
     * @public
     * @async
     * @template {DeployableTarget} Target
     * @param {string} displayName
     * @param {Target} target
     * @param {?WriteParams} [params]
     * @returns {Promise<Address>}
     * biome-ignore lint/suspicious/noExplicitAny: any deployable target will suffice
     */
    deployClone<Target extends DeployableTarget<any, any>>(displayName: string, target: Target, params?: WriteParams<typeof boostRegistryAbi, 'deployClone'>): Promise<Address>;
    /**
     * @see {@link clone}
     * @public
     * @async
     * @param {string} displayName
     * @param {DeployableTarget} target
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: Hex, result: Address }>} - The transaction hash
     * biome-ignore lint/suspicious/noExplicitAny: any deployable target will suffice
     */
    deployCloneRaw<Target extends DeployableTarget<any, any>>(displayName: string, target: Target, params?: WriteParams<typeof boostRegistryAbi, 'deployClone'>): Promise<HashAndSimulatedResult<Address>>;
    /**
     * Get the address of a registered base implementation.
     * This function will revert if the implementation is not registered
     *
     * @public
     * @async
     * @param {Hex} identifier - The unique identifier for the implementation (see {getIdentifier})
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>} - The address of the implementation
     */
    getBaseImplementation(identifier: Hex, params?: ReadParams<typeof boostRegistryAbi, 'getBaseImplementation'>): Promise<`0x${string}`>;
    /**
     * Get the address of a deployed clone by its identifier
     *
     * @public
     * @async
     * @param {Hex} identifier - The unique identifier for the deployed clone (see {getCloneIdentifier})
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>} - The address of the deployed clone
     */
    getClone(identifier: Hex, params?: ReadParams<typeof boostRegistryAbi, 'getClone'>): Promise<`0x${string}`>;
    /**
     * Get the list of identifiers of deployed clones for a given deployer
     *
     * @public
     * @async
     * @param {Address} deployer - The address of the deployer
     * @param {?ReadParams} [params]
     * @returns {Promise<Hex[]>} - The list of deployed clones for the given deployer
     */
    getClones(deployer: Address, params?: ReadParams<typeof boostRegistryAbi, 'getClones'>): Promise<readonly `0x${string}`[]>;
    /**
     * Build the identifier for a clone of a base implementation
     *
     * @public
     * @async
     * @param {RegistryType} registryType - The base type for the implementation
     * @param {Address} base - The address of the base implementation
     * @param {Address} deployer - The address of the deployer
     * @param {string} displayName - The display name of the clone
     * @param {?ReadParams} [params]
     * @returns {Promise<Hex>} - The unique identifier for the clone
     */
    getCloneIdentifier(registryType: RegistryType, base: Address, deployer: Address, displayName: string, params?: ReadParams<typeof boostRegistryAbi, 'getCloneIdentifier'>): Promise<`0x${string}`>;
    /**
     * Build the identifier for a base implementation
     *
     * @public
     * @async
     * @param {RegistryType} registryType - The base type for the implementation
     * @param {string} displayName - The name of the implementation
     * @param {?ReadParams} [params]
     * @returns {Promise<Hex>} - The unique identifier for the implementation
     */
    getIdentifier(registryType: RegistryType, displayName: string, params?: ReadParams<typeof boostRegistryAbi, 'getIdentifier'>): Promise<`0x${string}`>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?never[]} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: never[], _options?: DeployableOptions): GenericDeployableParams;
}
//# sourceMappingURL=BoostRegistry.d.ts.map