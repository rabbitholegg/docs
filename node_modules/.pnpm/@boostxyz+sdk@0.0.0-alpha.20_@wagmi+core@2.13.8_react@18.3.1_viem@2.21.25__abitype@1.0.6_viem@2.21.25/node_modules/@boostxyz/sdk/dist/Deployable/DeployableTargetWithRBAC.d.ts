import { rbacAbi } from '@boostxyz/evm';
import type { Abi, Address, ContractEventName } from 'viem';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import type { GenericLog, ReadParams, WriteParams } from '../utils';
export { rbacAbi };
/**
 *  Enum representing available roles for use with the `RBAC` authorization scheme.
 * `MANAGER` has lowest level of write permissions, for specific implementations, see Budgets and ALlowLists
 * `ADMIN` can additionally manage authorized users on the contract.
 *
 * @export
 * @type {{ readonly MANAGER: 1n; readonly ADMIN_ROLE: 2n; }}
 * @enum {bigint}
 */
export declare enum Roles {
    MANAGER,
    ADMIN
}
/**
 * A generic `viem.Log` event with support for `Rbac` event types.
 *
 * @export
 * @typedef {RBACLog}
 * @template {ContractEventName<typeof rbacAbi>} [event=ContractEventName<
 *     typeof rbacAbi
 *   >]
 */
export type RBACLog<event extends ContractEventName<typeof rbacAbi> = ContractEventName<typeof rbacAbi>> = GenericLog<typeof rbacAbi, event>;
/**
 * A minimal RBAC implementation that offers MANAGER and ADMIN roles, and
 * Budgets and allowlists support this auth scheme
 *
 * @export
 * @class DeployableTargetWithRBAC
 * @typedef {DeployableTargetWithRBAC}
 * @extends {DeployableTarget<RbacPayload>}
 */
export declare class DeployableTargetWithRBAC<Payload, ABI extends Abi> extends DeployableTarget<Payload, ABI> {
    /**
     * Set the authorized status of the given accounts
     * The mechanism for managing authorization is left to the implementing contract
     *
     * @public
     * @async
     * @param {Address[]} addresses - The accounts to authorize or deauthorize
     * @param {boolean[]} allowed - The authorization status for the given accounts
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    setAuthorized(addresses: Address[], allowed: boolean[], params?: WriteParams<typeof rbacAbi, 'setAuthorized'>): Promise<void>;
    /**
     * Set the authorized status of the given accounts
     * The mechanism for managing authorization is left to the implementing contract
     *
     * @public
     * @async
     * @param {Address[]} addresses - The accounts to authorize or deauthorize
     * @param {boolean[]} allowed - The authorization status for the given accounts
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    setAuthorizedRaw(addresses: Address[], allowed: boolean[], params?: WriteParams<typeof rbacAbi, 'setAuthorized'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Grant many accounts permissions on the rbac.
     *
     * @example
     * ```ts
     * await rbac.grantRoles(['0xfoo', '0xbar], [RbacRoles.MANAGER, RbacRoles.ADMIN])
     * ```
     * @public
     * @async
     * @param {Address[]} addresses
     * @param {RbacRoles[]} roles
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    grantRoles(addresses: Address[], roles: Roles[], params?: WriteParams<typeof rbacAbi, 'grantRoles'>): Promise<never>;
    /**
     * Grant many accounts permissions on the rbac.
     *
     * @example
     * ```ts
     * await rbac.grantRoles(['0xfoo', '0xbar], [Roles.MANAGER, Roles.ADMIN])
     *
     * @public
     * @async
     * @param {Address[]} addresses
     * @param {RbacRoles[]} roles
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    grantRolesRaw(addresses: Address[], roles: Roles[], params?: WriteParams<typeof rbacAbi, 'grantRoles'>): Promise<{
        hash: `0x${string}`;
        result: never;
    }>;
    /**
     * Revoke many accounts' permissions on the rbac.
     *
     * @example
     * ```ts
     * await rbac.revokeRoles(['0xfoo', '0xbar], [RbacRoles.MANAGER, RbacRoles.ADMIN])
     *
     * @public
     * @async
     * @param {Address[]} addresses
     * @param {RbacRoles[]} roles
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    revokeRoles(addresses: Address[], roles: Roles[], params?: WriteParams<typeof rbacAbi, 'revokeRoles'>): Promise<never>;
    /**
     * Revoke many accounts' permissions on the rbac.
     *
     * @example
     * ```ts
     * await rbac.revokeRoles(['0xfoo', '0xbar], [RbacRoles.MANAGER, RbacRoles.ADMIN])
     * @public
     * @async
     * @param {Address[]} addresses
     * @param {RbacRoles[]} roles
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    revokeRolesRaw(addresses: Address[], roles: Roles[], params?: WriteParams<typeof rbacAbi, 'revokeRoles'>): Promise<{
        hash: `0x${string}`;
        result: never;
    }>;
    /**
     * Return an array of the roles assigned to the given account.
     * @example
     * ```ts
     * (await rbac.rolesOf(0xfoo)).includes(RbacRoles.ADMIN)
     * @public
     * @param {Address} account
     * @param {?ReadParams} [params]
     * @returns {Promise<Array<RbacRoles>>}
     */
    rolesOf(account: Address, params?: ReadParams<typeof rbacAbi, 'rolesOf'>): Promise<Roles[]>;
    /**
     * Returns whether given account has any of the provided roles bitmap.
     *
     * @example
     * ```ts
     * await rbac.hasAnyRole(0xfoo, RbacRoles.ADMIN | RbacRoles.MANAGER)
     * @public
     * @param {Address} account
     * @param {RbacRoles} roles
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    hasAnyRole(account: Address, roles: Roles, params?: ReadParams<typeof rbacAbi, 'hasAnyRole'>): Promise<boolean>;
    /**
     * Returns whether given account has all of the provided roles bitmap.
     *
     * @example
     * ```ts
     * await rbac.hasAllRoles(0xfoo, RbacRoles.ADMIN & RbacRoles.MANAGER)
     *
     * @public
     * @param {Address} account
     * @param {RbacRoles} roles
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    hasAllRoles(account: Address, roles: Roles, params?: ReadParams<typeof rbacAbi, 'hasAllRoles'>): Promise<boolean>;
    /**
     * Check if the given account is authorized to use the rbac
     *
     * @public
     * @param {Address} account
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>} - True if the account is authorized
     */
    isAuthorized(account: Address, params?: ReadParams<typeof rbacAbi, 'isAuthorized'>): Promise<boolean>;
}
//# sourceMappingURL=DeployableTargetWithRBAC.d.ts.map