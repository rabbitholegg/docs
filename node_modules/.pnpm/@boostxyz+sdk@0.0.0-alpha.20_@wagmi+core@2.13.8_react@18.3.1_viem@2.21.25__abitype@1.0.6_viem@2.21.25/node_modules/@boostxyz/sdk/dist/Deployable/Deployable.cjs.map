{"version":3,"file":"Deployable.cjs","sources":["../../src/Deployable/Deployable.ts"],"sourcesContent":["import { type Config, deployContract } from '@wagmi/core';\nimport type {\n  Abi,\n  Account,\n  Address,\n  ContractEventName,\n  Hash,\n  Hex,\n  WaitForTransactionReceiptParameters,\n} from 'viem';\nimport {\n  DeployableAlreadyDeployedError,\n  DeployableBuildParametersUnspecifiedError,\n  DeployableMissingPayloadError,\n  DeployableWagmiConfigurationRequiredError,\n} from '../errors';\nimport { getDeployedContractAddress } from '../utils';\nimport { Contract } from './Contract';\n\n/**\n * A base class representing a deployable contract, contains base implementations for deployment and initialization payload construction.\n *\n * @export\n * @typedef {GenericDeployableParams}\n */\nexport type GenericDeployableParams = Omit<\n  Parameters<typeof deployContract>[1],\n  'args' | 'account'\n> & {\n  args: [Hex, ...Array<Hex>];\n  account?: Account;\n};\n\n/**\n * A generic type that encapsulates either an initialization payload for a contract, or a valid address for a previously deployed contract.\n *\n * @export\n * @typedef {DeployablePayloadOrAddress}\n * @template [Payload=unknown]\n */\nexport type DeployablePayloadOrAddress<Payload = unknown> = Payload | Address;\n\n/**\n * Instantion options for the base deployable.\n *\n * @export\n * @interface DeployableOptions\n * @typedef {DeployableOptions}\n */\nexport interface DeployableOptions {\n  /**\n   * [Wagmi Configuration](https://wagmi.sh/core/api/createConfig)\n   *\n   * @see {@link Config}\n   * @type {Config}\n   */\n  config: Config;\n  /**\n   * [Viem Local Account](https://viem.sh/docs/accounts/local), required if in a Node environment\n   *\n   * @see {@link Account}\n   * @type {?Account}\n   */\n  account?: Account;\n}\n\n/**\n * A generic deployable contract that encapsulates common operations related to contract deployment\n *\n * @export\n * @class Deployable\n * @typedef {Deployable}\n * @template [Payload=unknown]\n * @template {Abi} [ContractAbi=[]]\n * @template {ContractEventName<ContractAbi>} [ContractEvent=ContractEventName<ContractAbi>]\n * @extends {Contract<ContractAbi, ContractEvent>}\n */\nexport class Deployable<\n  Payload,\n  ContractAbi extends Abi,\n> extends Contract<ContractAbi> {\n  /**\n   * The deployable payload used either for contract construction or initialization\n   *\n   * @protected\n   * @type {(Payload | undefined)}\n   */\n  protected _payload: Payload | undefined;\n  /**\n   * If it exists, [Viem Local Account](https://viem.sh/docs/accounts/local), if in a Node environment\n   *\n   * @protected\n   * @type {?Account}\n   */\n  protected _account?: Account;\n\n  /**\n   * Creates an instance of Deployable.\n   *\n   * @constructor\n   * @param {DeployableOptions} param0\n   * @param {?Account} [param0.account]\n   * @param {Config} param0.config\n   * @param {DeployablePayloadOrAddress<Payload>} payload\n   */\n  constructor(\n    { account, config }: DeployableOptions,\n    payload?: DeployablePayloadOrAddress<Payload>,\n  ) {\n    if (typeof payload === 'string') {\n      super(config, payload as Address);\n    } else {\n      super(config, undefined);\n      this._payload = payload as Payload;\n    }\n    if (account) this._account = account;\n  }\n\n  /**\n   * Returns the attached deployable payload, if it exists\n   *\n   * @readonly\n   * @type {Payload}\n   */\n  get payload() {\n    return this._payload;\n  }\n\n  /**\n   * Attaches a new payload for use with this deployable's initialization\n   *\n   * @public\n   * @param {Payload} payload\n   * @returns {this}\n   */\n  public withPayload(payload: Payload) {\n    this._payload = payload;\n    return this;\n  }\n\n  /**\n   * High level deployment function to deploy and await the contract address.\n   * This is mainly a convenience method to easily deploy a contract, but will not initialize a `Cloneable`,\n   * which makes it useless for Boost components.\n   * Obviously you can ignore the TS warnings and use this, but you shouldn't in most all cases.\n   *\n   * @public\n   * @async\n   * @param {?Payload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @param {?Omit<WaitForTransactionReceiptParameters, 'hash'>} [waitParams] - See [viem.WaitForTransactionReceipt](https://v1.viem.sh/docs/actions/public/waitForTransactionReceipt.html#waitfortransactionreceipt)\n   * @returns {Promise<this>}\n   */\n  protected async deploy(\n    _payload?: Payload,\n    _options?: DeployableOptions,\n    waitParams?: Omit<WaitForTransactionReceiptParameters, 'hash'>,\n  ) {\n    const config = _options?.config || this._config;\n    const address = await getDeployedContractAddress(\n      config,\n      this.deployRaw(_payload, _options),\n      waitParams,\n    );\n    this._address = address;\n    return this;\n  }\n\n  /**\n   * The lower level contract deployment function that does not await for the transaction receipt.\n   * This is mainly a convenience method to easily deploy a contract, but will not initialize a `Cloneable`,\n   * which makes it useless for Boost components.\n   * Obviously you can ignore the TS warnings and use this, but you shouldn't in most all cases.\n   *\n   * @public\n   * @async\n   * @param {?Payload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {Promise<Hash>}\n   * @throws {@link DeployableAlreadyDeployedError}\n   * @throws {@link DeployableWagmiConfigurationRequiredError}\n   * @throws {@link DeployableMissingPayloadError}\n   */\n  protected async deployRaw(\n    _payload?: Payload,\n    _options?: DeployableOptions,\n  ): Promise<Hash> {\n    if (this.address) throw new DeployableAlreadyDeployedError(this.address);\n    const [payload, options] = this.validateDeploymentConfig(\n      _payload,\n      _options,\n    );\n    return await deployContract(options.config, {\n      ...this.buildParameters(payload),\n      ...this.optionallyAttachAccount(options.account),\n    });\n  }\n\n  /**\n   * Internal function to attach the connected account to write methods to avoid manually passing in an account each call.\n   *\n   * @protected\n   * @param {?Account} [account]\n   * @returns {({ account: Account; } | { account?: undefined; })}\n   */\n  protected optionallyAttachAccount(account?: Account) {\n    if (account) return { account };\n    return this._account ? { account: this._account } : {};\n  }\n\n  /**\n   * Base parameter constructor, should return a partial `viem.deployContract` parameters shape including abi, bytecode, and arguments, if any.\n   * Expected to be overridden by protocol contracts.\n   *\n   * @public\n   * @param {?Payload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {GenericDeployableParams}\n   */\n  public buildParameters(\n    _payload?: Payload,\n    _options?: DeployableOptions,\n  ): GenericDeployableParams {\n    throw new DeployableBuildParametersUnspecifiedError();\n  }\n\n  /**\n   * Internal method used to ensure that a Wagmi configuration and payload are always present when deploying.\n   *\n   * @protected\n   * @template [P=Payload]\n   * @param {?P} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {[P, DeployableOptions]}\n   * @throws {@link DeployableWagmiConfigurationRequiredError}\n   * @throws {@link DeployableMissingPayloadError}\n   */\n  protected validateDeploymentConfig<P = Payload>(\n    _payload?: P,\n    _options?: DeployableOptions,\n  ) {\n    const options = _options || {\n      config: this._config,\n      account: this._account,\n    };\n    if (!options) throw new DeployableWagmiConfigurationRequiredError();\n    const payload = _payload || this._payload;\n    return [payload, options] as [P, DeployableOptions];\n  }\n}\n"],"names":["Deployable","Contract","account","config","payload","_payload","_options","waitParams","address","getDeployedContractAddress","DeployableAlreadyDeployedError","options","deployContract","DeployableBuildParametersUnspecifiedError","DeployableWagmiConfigurationRequiredError"],"mappings":"gMA6EO,MAAMA,UAGHC,EAAAA,QAAsB,CAyB9B,YACE,CAAE,QAAAC,EAAS,OAAAC,CAAA,EACXC,EACA,CACI,OAAOA,GAAY,SACrB,MAAMD,EAAQC,CAAkB,GAEhC,MAAMD,EAAQ,MAAS,EACvB,KAAK,SAAWC,GAEdF,SAAc,SAAWA,EAC/B,CAQA,IAAI,SAAU,CACZ,OAAO,KAAK,QACd,CASO,YAAYE,EAAkB,CACnC,YAAK,SAAWA,EACT,IACT,CAeA,MAAgB,OACdC,EACAC,EACAC,EACA,CACM,MAAAJ,GAASG,GAAA,YAAAA,EAAU,SAAU,KAAK,QAClCE,EAAU,MAAMC,EAAA,2BACpBN,EACA,KAAK,UAAUE,EAAUC,CAAQ,EACjCC,CAAA,EAEF,YAAK,SAAWC,EACT,IACT,CAiBA,MAAgB,UACdH,EACAC,EACe,CACf,GAAI,KAAK,QAAS,MAAM,IAAII,EAAAA,+BAA+B,KAAK,OAAO,EACvE,KAAM,CAACN,EAASO,CAAO,EAAI,KAAK,yBAC9BN,EACAC,CAAA,EAEK,OAAA,MAAMM,EAAAA,eAAeD,EAAQ,OAAQ,CAC1C,GAAG,KAAK,gBAAgBP,CAAO,EAC/B,GAAG,KAAK,wBAAwBO,EAAQ,OAAO,CAAA,CAChD,CACH,CASU,wBAAwBT,EAAmB,CAC/C,OAAAA,EAAgB,CAAE,QAAAA,GACf,KAAK,SAAW,CAAE,QAAS,KAAK,UAAa,EACtD,CAWO,gBACLG,EACAC,EACyB,CACzB,MAAM,IAAIO,EAA0C,yCACtD,CAaU,yBACRR,EACAC,EACA,CACA,MAAMK,EAAUL,GAAY,CAC1B,OAAQ,KAAK,QACb,QAAS,KAAK,QAAA,EAEhB,GAAI,CAACK,EAAe,MAAA,IAAIG,EAAAA,0CAEjB,MAAA,CADST,GAAY,KAAK,SAChBM,CAAO,CAC1B,CACF"}