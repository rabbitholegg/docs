import { erc1155IncentiveAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName, type Hex } from 'viem';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import { type ClaimPayload, type StrategyType } from '../claiming';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
export { erc1155IncentiveAbi };
/**
 * Enum representing inventive disbursement strategies for {@link ERC1155Incentive}
 *
 * @export
 * @enum {number}
 */
export declare enum ERC1155StrategyType {
    POOL = 0,
    MINT = 1
}
/**
 * The object representation of a `ERC1155Incentive.InitPayload`
 *
 * @export
 * @interface ERC1155IncentivePayload
 * @typedef {ERC1155IncentivePayload}
 */
export interface ERC1155IncentivePayload {
    /**
     * The address of the `ERC1155` asset
     *
     * @type {Address}
     */
    asset: Address;
    /**
     * Should be `Strategy.POOL`
     *
     * @type {ERC1155StrategyType}
     */
    strategy: ERC1155StrategyType;
    /**
     * The token ID to target
     *
     * @type {bigint}
     */
    tokenId: bigint;
    /**
     *  The maximum number of claims that can be made (one per address)
     *
     * @type {bigint}
     */
    limit: bigint;
    /**
     *  Any extra data to accompany the claim, if applicable.
     *
     * @type {Hex}
     */
    extraData: Hex;
}
/**
 * A generic `viem.Log` event with support for `ERC1155Incentive` event types.
 *
 * @export
 * @typedef {ERC1155IncentiveLog}
 * @template {ContractEventName<
 *     typeof erc1155IncentiveAbi
 *   >} [event=ContractEventName<typeof erc1155IncentiveAbi>]
 */
export type ERC1155IncentiveLog<event extends ContractEventName<typeof erc1155IncentiveAbi> = ContractEventName<typeof erc1155IncentiveAbi>> = GenericLog<typeof erc1155IncentiveAbi, event>;
/**
 * This is currently not exported due to a mysterious abi encoding issue
 *
 * @experimental
 * @export
 * @class ERC1155Incentive
 * @typedef {ERC1155Incentive}
 * @extends {DeployableTarget<ERC1155IncentivePayload>}
 */
export declare class ERC1155Incentive extends DeployableTarget<ERC1155IncentivePayload, typeof erc1155IncentiveAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "asset";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotClaimable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "Claimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "asset";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IERC1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "claim";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "claimed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "claims";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "clawback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "currentReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "extraData";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isClaimable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "limit";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preflight";
        readonly outputs: readonly [{
            readonly name: "budgetData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "reward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "strategy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "enum AERC1155Incentive.Strategy";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "tokenId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    claims(params?: ReadParams<typeof erc1155IncentiveAbi, 'claims'>): Promise<bigint>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    reward(params?: ReadParams<typeof erc1155IncentiveAbi, 'reward'>): Promise<bigint>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    claimed(address: Address, params?: ReadParams<typeof erc1155IncentiveAbi, 'claimed'>): Promise<boolean>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    asset(params?: ReadParams<typeof erc1155IncentiveAbi, 'asset'>): Promise<`0x${string}`>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<StrategyType>}
     */
    strategy(params?: ReadParams<typeof erc1155IncentiveAbi, 'strategy'>): Promise<StrategyType>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {unknown}
     */
    limit(params?: ReadParams<typeof erc1155IncentiveAbi, 'limit'>): Promise<bigint>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    tokenId(params?: ReadParams<typeof erc1155IncentiveAbi, 'tokenId'>): Promise<bigint>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Hex>}
     */
    extraData(params?: ReadParams<typeof erc1155IncentiveAbi, 'extraData'>): Promise<`0x${string}`>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>}
     */
    protected claim(payload: ClaimPayload, params?: WriteParams<typeof erc1155IncentiveAbi, 'claim'>): Promise<boolean>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: boolean; }>}
     */
    protected claimRaw(payload: ClaimPayload, params?: WriteParams<typeof erc1155IncentiveAbi, 'claim'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>}
     */
    clawback(payload: ClaimPayload, params?: WriteParams<typeof erc1155IncentiveAbi, 'clawback'>): Promise<boolean>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: boolean; }>}
     */
    clawbackRaw(payload: ClaimPayload, params?: WriteParams<typeof erc1155IncentiveAbi, 'clawback'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    isClaimable(payload: ClaimPayload, params?: ReadParams<typeof erc1155IncentiveAbi, 'isClaimable'>): Promise<boolean>;
    /**
     * Description placeholder
     *
     * @public
     * @async
     * @param {ERC1155IncentivePayload} data
     * @param {?ReadParams} [params]
     * @returns {Promise<Hex>}
     */
    preflight(data: ERC1155IncentivePayload, params?: ReadParams<typeof erc1155IncentiveAbi, 'preflight'>): Promise<`0x${string}`>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?ERC1155IncentivePayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: ERC1155IncentivePayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Given a {@link ERC1155IncentivePayload}, properly encode a `ERC1155Incentive.InitPayload` for use with {@link ERC1155Incentive} initialization.
 *
 * @param {ERC1155IncentivePayload} param0
 * @param {Address} param0.asset - The address of the `ERC1155` asset
 * @param {ERC1155StrategyType} param0.strategy - Should be `Strategy.POOL`
 * @param {bigint} param0.tokenId - The token ID to target
 * @param {bigint} param0.limit -  The maximum number of claims that can be made (one per address)
 * @param {Hex} param0.extraData - Any extra data to accompany the claim, if applicable.
 * @returns {Hex}
 */
export declare const prepareERC1155IncentivePayload: ({ asset, strategy, tokenId, limit, extraData, }: ERC1155IncentivePayload) => `0x${string}`;
//# sourceMappingURL=ERC1155Incentive.d.ts.map