import { boostCoreAbi, type iAuthAbi } from '@boostxyz/evm';
import { type GetTransactionReceiptParameters } from '@wagmi/core';
import { type Address, type ContractEventName, type Hex } from 'viem';
import { type Action } from './Actions/Action';
import { EventAction, type EventActionPayload } from './Actions/EventAction';
import { type AllowList } from './AllowLists/AllowList';
import { OpenAllowList } from './AllowLists/OpenAllowList';
import { SimpleAllowList, type SimpleAllowListPayload } from './AllowLists/SimpleAllowList';
import { SimpleDenyList, type SimpleDenyListPayload } from './AllowLists/SimpleDenyList';
import { type Auth, PassthroughAuth } from './Auth/Auth';
import { Boost } from './Boost';
import { type Budget } from './Budgets/Budget';
import { ManagedBudget, type ManagedBudgetPayload } from './Budgets/ManagedBudget';
import { Deployable, type DeployableOptions, type DeployablePayloadOrAddress, type GenericDeployableParams } from './Deployable/Deployable';
import { AllowListIncentive, type AllowListIncentivePayload } from './Incentives/AllowListIncentive';
import { CGDAIncentive, type CGDAIncentivePayload } from './Incentives/CGDAIncentive';
import { ERC20Incentive, type ERC20IncentivePayload } from './Incentives/ERC20Incentive';
import { ERC20VariableCriteriaIncentive, type ERC20VariableCriteriaIncentivePayload } from './Incentives/ERC20VariableCriteriaIncentive';
import type { ERC20VariableIncentivePayload } from './Incentives/ERC20VariableIncentive';
import { ERC20VariableIncentive, type Incentive } from './Incentives/Incentive';
import { PointsIncentive, type PointsIncentivePayload } from './Incentives/PointsIncentive';
import { SignerValidator, type SignerValidatorPayload } from './Validators/SignerValidator';
import { type Validator } from './Validators/Validator';
import { type GenericLog, type ReadParams, type WriteParams } from './utils';
/**
 * The ABI of the BoostCore contract, if needed for low level operations
 *
 * @type {typeof boostCoreAbi}
 */
export { boostCoreAbi };
/**
 * The fee (in wei) required to claim each incentive, must be provided for the `claimIncentive` transaction
 *
 * @type {bigint}
 */
export declare const BOOST_CORE_CLAIM_FEE: bigint;
/**
 * The address of the deployed BoostCore instance. In prerelease mode, this will be its sepolia address
 *
 * @type {Address}
 */
export declare const BOOST_CORE_ADDRESS: `0x${string}`;
/**
 * The fixed addresses for the deployed Boost Core.
 * By default, `new BoostCore` will use the address deployed to the currently connected chain, or `BOOST_CORE_ADDRESS` if not provided.
 *
 * @type {Record<number, Address>}
 */
export declare const BOOST_CORE_ADDRESSES: Record<number, Address>;
/**
 * A generic `viem.Log` event with support for `BoostCore` event types.
 *
 * @export
 * @typedef {BoostCoreLog}
 * @template {ContractEventName<typeof boostCoreAbi>} [event=ContractEventName<
 *     typeof boostCoreAbi
 *   >]
 */
export type BoostCoreLog<event extends ContractEventName<typeof boostCoreAbi> = ContractEventName<typeof boostCoreAbi>> = GenericLog<typeof boostCoreAbi, event>;
/**
 * Boost Core instantiation options for a custom deployed instance.
 *
 * @export
 * @interface BoostCoreDeployedOptions
 * @typedef {BoostCoreDeployedOptions}
 * @extends {DeployableOptions}
 */
export interface BoostCoreDeployedOptions extends DeployableOptions {
    /**
     * The address of a deployed, custom Boost Core contract.
     *
     * @type {?Address}
     */
    address?: Address;
}
/**
 * Boost Core instantiation options when a user intends to deploy a new instance of Boost Core, setting their own registry address and protocol fee receiver.
 *
 * @export
 * @interface BoostCoreOptionsWithPayload
 * @typedef {BoostCoreOptionsWithPayload}
 * @extends {DeployableOptions}
 */
export interface BoostCoreOptionsWithPayload extends DeployableOptions {
    /**
     * The address of a deployed Boost Registry contract.
     *
     * @type {Address}
     */
    registryAddress: Address;
    /**
     * The address to send fees.
     *
     * @type {Address}
     */
    protocolFeeReceiver: Address;
}
/**
 * A union representing both of the valid Boost Core instantiation parameters.
 *
 * @export
 * @typedef {BoostCoreConfig}
 */
export type BoostCoreConfig = BoostCoreDeployedOptions | BoostCoreOptionsWithPayload;
/**
 * The interface required to create a new Boost.
 *
 * @export
 * @typedef {CreateBoostPayload}
 */
export type CreateBoostPayload = {
    budget: Budget;
    action: Action;
    validator?: Validator;
    allowList: AllowList;
    incentives: Array<Incentive>;
    protocolFee?: bigint;
    referralFee?: bigint;
    maxParticipants?: bigint;
    owner?: Address;
};
/**
 * The core contract for the Boost protocol. Used to create and retrieve deployed Boosts.
 *
 * @export
 * @class BoostCore
 * @typedef {BoostCore}
 * @extends {Deployable<[Address, Address]>}
 */
export declare class BoostCore extends Deployable<[
    Address,
    Address
], typeof boostCoreAbi> {
    /**
     * A static property representing a map of stringified chain ID's to the address of the deployed implementation on chain
     *
     * @static
     * @readonly
     * @type {Record<string, Address>}
     */
    static readonly addresses: Record<number, Address>;
    /**
     * A getter that will return Boost core's static addresses by numerical chain ID
     *
     * @public
     * @readonly
     * @type {Record<number, Address>}
     */
    get addresses(): Record<number, Address>;
    /**
     * Creates an instance of BoostCore.
     *
     * @constructor
     * @param {BoostCoreConfig} param0
     * @param {Config} param0.config
     * @param {?Account} [param0.account]
     * @param {({ address?: Address; } | { registryAddress: Address; protocolFeeReceiver: Address; })} param0....options
     */
    constructor({ config, account, ...options }: BoostCoreConfig);
    /**
     * Create a new Boost.
     *
     * @public
     * @async
     * @param {CreateBoostPayload} _boostPayload
     * @param {?DeployableOptions} [_options]
     * @returns {Promise<Boost>}
     */
    createBoost(_boostPayload: CreateBoostPayload, _params?: DeployableOptions & WriteParams<typeof boostCoreAbi, 'createBoost'>): Promise<Boost>;
    /**
     * Claims one incentive from a given `Boost` by `boostId` and `incentiveId`
     *
     * @public
     * @async
     * @param {bigint} boostId
     * @param {bigint} incentiveId
     * @param {Address} address
     * @param {Hex} data
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    claimIncentive(boostId: bigint, incentiveId: bigint, address: Address, data: Hex, params?: WriteParams<typeof boostCoreAbi, 'claimIncentive'>): Promise<void>;
    /**
     * Claim an incentive for a Boost
     *
     * @public
     * @async
     * @param {bigint} boostId - The ID of the Boost
     * @param {bigint} incentiveId - The ID of the Incentive
     * @param {Address} referrer - The address of the referrer (if any)
     * @param {Hex} data- The data for the claim
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    claimIncentiveRaw(boostId: bigint, incentiveId: bigint, referrer: Address, data: Hex, params?: WriteParams<typeof boostCoreAbi, 'claimIncentive'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Claims one incentive for a given `Boost` on behalf of another user by `boostId` and `incentiveId`
     *
     * @public
     * @async
     * @param {bigint} boostId
     * @param {bigint} incentiveId
     * @param {Address} referrer
     * @param {Hex} data
     * @param {Address} claimant
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    claimIncentiveFor(boostId: bigint, incentiveId: bigint, referrer: Address, data: Hex, claimant: Address, params?: WriteParams<typeof boostCoreAbi, 'claimIncentiveFor'>): Promise<void>;
    /**
     * Claim an incentive for a Boost on behalf of another user
     *
     * @public
     * @async
     * @param {bigint} boostId - The ID of the Boost
     * @param {bigint} incentiveId - The ID of the Incentive
     * @param {Address} referrer - The address of the referrer (if any)
     * @param {Hex} data - The data for the claim
     * @param {Address} claimant - The address of the user eligible for the incentive payout
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: Hex; result: void; }>}
     */
    claimIncentiveForRaw(boostId: bigint, incentiveId: bigint, referrer: Address, data: Hex, claimant: Address, params?: WriteParams<typeof boostCoreAbi, 'claimIncentiveFor'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Get a Boost by index, will return the raw on chain representation of a Boost.
     *
     * @public
     * @async
     * @param {bigint} id
     * @param {?ReadParams} [params]
     * @returns {Promise<RawBoost>}
     */
    readBoost(id: bigint, params?: ReadParams<typeof boostCoreAbi, 'getBoost'>): Promise<{
        action: `0x${string}`;
        validator: `0x${string}`;
        allowList: `0x${string}`;
        budget: `0x${string}`;
        incentives: readonly `0x${string}`[];
        protocolFee: bigint;
        referralFee: bigint;
        maxParticipants: bigint;
        owner: `0x${string}`;
    }>;
    /**
     * Get a Boost by index, will return a new {@link Boost} with correct target implementations instantiated, ie `(await core.getBoost(0n)).allowList instanceof SimpleAllowList` vs `SimpleDenyList`
     *
     * @public
     * @async
     * @param {(string | bigint)} _id
     * @param {?ReadParams} [params]
     * @returns {Promise<Boost>}
     */
    getBoost(_id: string | bigint, params?: ReadParams<typeof boostCoreAbi, 'getBoost'>): Promise<Boost>;
    /**
     * Retrieve the total number of deployed Boosts
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    getBoostCount(params?: ReadParams<typeof boostCoreAbi, 'getBoostCount'>): Promise<bigint>;
    /**
     * Checks if an address is authorized
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?ReadParams &
     *       ReadParams<typeof iAuthAbi, 'isAuthorized'>} [params]
     * @returns {Promise<boolean>}
     */
    isAuthorized(address: Address, params?: ReadParams<typeof boostCoreAbi, 'createBoostAuth'> & ReadParams<typeof iAuthAbi, 'isAuthorized'>): Promise<boolean>;
    /**
     * Retrieve the address of the current creation auth provider.
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    createBoostAuth(params?: ReadParams<typeof boostCoreAbi, 'createBoostAuth'>): Promise<`0x${string}`>;
    /**
     *  Replace the current auth scheme.
     *
     * @public
     * @async
     * @param {Auth} auth
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    setCreateBoostAuth(auth: Auth, params?: WriteParams<typeof boostCoreAbi, 'setCreateBoostAuth'>): Promise<void>;
    /**
     * Set the createBoostAuth address
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    setCreateBoostAuthRaw(address: Address, params?: WriteParams<typeof boostCoreAbi, 'setCreateBoostAuth'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Get the protocol fee.
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {unknown}
     */
    protocolFee(params?: ReadParams<typeof boostCoreAbi, 'protocolFee'>): Promise<bigint>;
    /**
     * Get the protocol fee receiver.
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    protocolFeeReceiver(params?: ReadParams<typeof boostCoreAbi, 'protocolFeeReceiver'>): Promise<`0x${string}`>;
    /**
     * Set the protocol fee receiver address. This function is only callable by the owner.
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    setProcolFeeReceiver(address: Address, params?: WriteParams<typeof boostCoreAbi, 'setProtocolFeeReceiver'>): Promise<void>;
    /**
     * Set the protocol fee receiver address. This function is only callable by the owner.
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    setProcolFeeReceiverRaw(address: Address, params?: WriteParams<typeof boostCoreAbi, 'setProtocolFeeReceiver'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Get the claim fee.
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    claimFee(params?: ReadParams<typeof boostCoreAbi, 'claimFee'>): Promise<bigint>;
    /**
     * Sets the claim fee.
     *
     * @public
     * @async
     * @param {bigint} claimFee
     * @param {?WriteParams} [params]
     * @returns {Promise<void>}
     */
    setClaimFee(claimFee: bigint, params?: WriteParams<typeof boostCoreAbi, 'setClaimFee'>): Promise<void>;
    /**
     * Sets the claim fee.
     *
     * @public
     * @async
     * @param {bigint} claimFee
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    setClaimFeeRaw(claimFee: bigint, params?: WriteParams<typeof boostCoreAbi, 'setClaimFee'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * Retrieves the claim information from a transaction receipt.
     *
     * @param {GetTransactionReceiptParameters} params - The parameters required to get the transaction receipt.
     * @returns {Promise<{ boostId: bigint, incentiveId: bigint, claimer: Address, amount: bigint } | undefined>} The claim information if found, undefined otherwise.
     *
     * @description
     * This method retrieves the transaction receipt using the provided parameters,
     * then parses the logs to find the 'BoostClaimed' event.
     * If found, it returns the arguments of the event, which include the boost ID,
     * incentive ID, claimer address, and claimed amount.
     *
     * @example
     * ```ts
     * const claimInfo = await boostCore.getClaimFromTransaction({
     *   hash: '0x...',
     *   chainId: 1
     * });
     * if (claimInfo) {
     *   console.log(`Boost ${claimInfo.boostId} claimed by ${claimInfo.claimer}`);
     * }
     * ```
     */
    getClaimFromTransaction(params: GetTransactionReceiptParameters): Promise<{
        boostId: bigint;
        incentiveId: bigint;
        claimant: `0x${string}`;
        referrer: `0x${string}`;
        data: `0x${string}`;
    } | undefined>;
    /**
     * Bound {@link PassthroughAuth} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const auth = core.PassthroughAuth('0x') // is roughly equivalent to
     * const auth = new PassthroughAuth({ config: core._config, account: core._account }, '0x')
     * ```
     * @param {Address} address
     * @returns {PassthroughAuth}
     */
    PassthroughAuth(address?: Address): PassthroughAuth;
    /**
     * Bound {@link EventAction} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const action = core.EventAction('0x') // is roughly equivalent to
     * const action = new EventAction({ config: core._config, account: core._account }, '0x')
     */
    EventAction(options: DeployablePayloadOrAddress<EventActionPayload>, isBase?: boolean): EventAction;
    /**
     * Bound {@link OpenAllowList} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const list = core.OpenAllowList('0x') // is roughly equivalent to
     * const list = new OpenAllowList({ config: core._config, account: core._account }, '0x')
     * ```
     * @param {?boolean} [isBase]
     * @returns {OpenAllowList}
     */
    OpenAllowList(isBase?: boolean): OpenAllowList;
    /**
     * Bound {@link SimpleAllowList} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const list = core.SimpleAllowList('0x') // is roughly equivalent to
     * const list = new SimpleAllowList({ config: core._config, account: core._account }, '0x')
     * ```
     * @param {DeployablePayloadOrAddress<SimpleAllowListPayload>} options
     * @param {?boolean} [isBase]
     * @returns {SimpleAllowList}
     */
    SimpleAllowList(options: DeployablePayloadOrAddress<SimpleAllowListPayload>, isBase?: boolean): SimpleAllowList;
    /**
     * Bound {@link SimpleDenyList} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const list = core.SimpleDenyList('0x') // is roughly equivalent to
     * const list = new SimpleDenyList({ config: core._config, account: core._account }, '0x')
     * ```
     * @param {DeployablePayloadOrAddress<SimpleDenyListPayload>} options
     * @param {?boolean} [isBase]
     * @returns {SimpleDenyList}
     */
    SimpleDenyList(options: DeployablePayloadOrAddress<SimpleDenyListPayload>, isBase?: boolean): SimpleDenyList<SimpleDenyListPayload>;
    /**
     * Bound {@link ManagedBudget} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const budget = core.ManagedBudget('0x') // is roughly equivalent to
     * const budget = new ManagedBudget({ config: core._config, account: core._account }, '0x')
     * ```
     * @param {DeployablePayloadOrAddress<ManagedBudgetPayload>} options
     * @returns {ManagedBudget}
     */
    ManagedBudget(options: DeployablePayloadOrAddress<ManagedBudgetPayload>): ManagedBudget;
    /**
     * Bound {@link AllowListIncentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const incentive = core.AllowListIncentive({ ... }) // is roughly equivalent to
     * const incentive = new AllowListIncentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {DeployablePayloadOrAddress<VestingBudgetPayload>} options
     * @returns {VestingBudget}
     */
    AllowListIncentive(options: AllowListIncentivePayload): AllowListIncentive;
    /**
     * Bound {@link CGDAIncentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const incentive = core.CGDAIncentive({ ... }) // is roughly equivalent to
     * const incentive = new CGDAIncentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {CGDAIncentivePayload} options
     * @returns {CGDAIncentive}
     */
    CGDAIncentive(options: CGDAIncentivePayload): CGDAIncentive;
    /**
     * Bound {@link ERC20Incentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const incentive = core.ERC20Incentive({ ... }) // is roughly equivalent to
     * const incentive = new ERC20Incentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {ERC20IncentivePayload} options
     * @returns {ERC20Incentive}
     */
    ERC20Incentive(options: ERC20IncentivePayload): ERC20Incentive;
    /**
     * Bound {@link PointsIncentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const incentive = core.PointsIncentive({ ... }) // is roughly equivalent to
     * const incentive = new PointsIncentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {PointsIncentivePayload} options
     * @returns {PointsIncentive}
     */
    PointsIncentive(options: PointsIncentivePayload): PointsIncentive;
    /**
     * Bound {@link SignerValidator} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const validator = core.SignerValidator({ ... }) // is roughly equivalent to
     * const validator = new SignerValidator({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {DeployablePayloadOrAddress<SignerValidatorPayload>} options
     * @param {?boolean} [isBase]
     * @returns {SignerValidator}
     */
    SignerValidator(options: DeployablePayloadOrAddress<SignerValidatorPayload>, isBase?: boolean): SignerValidator;
    /**
     * Bound {@link ERC20VariableCriteriaIncentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const validator = core.ERC20VariableCrtieriaIncentive({ ... }) // is roughly equivalent to
     * const validator = new ERC20VariableCrtieriaIncentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {DeployablePayloadOrAddress<ERC20VariableCrtieriaIncentivePayload>} options
     * @param {?boolean} [isBase]
     * @returns {ERC20VariableCrtieriaIncentive}
     * */
    ERC20VariableCriteriaIncentive(options: DeployablePayloadOrAddress<ERC20VariableCriteriaIncentivePayload>, isBase?: boolean): ERC20VariableCriteriaIncentive;
    /**
     * Bound {@link ERC20VariableIncentive} constructor that reuses the same configuration as the Boost Core instance.
     *
     * @example
     * ```ts
     * const validator = core.ERC20VariableIncentive({ ... }) // is roughly equivalent to
     * const validator = new ERC20VariableIncentive({ config: core._config, account: core._account }, { ... })
     * ```
     * @param {DeployablePayloadOrAddress<ERC20VariableIncentivePayload>} options
     * @param {?boolean} [isBase]
     * @returns {ERC20VariableIncentive}
     */
    ERC20VariableIncentive(options: DeployablePayloadOrAddress<ERC20VariableIncentivePayload>, isBase?: boolean): ERC20VariableIncentive;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?[Address, Address]} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: [Address, Address], _options?: DeployableOptions): GenericDeployableParams;
}
//# sourceMappingURL=BoostCore.d.ts.map