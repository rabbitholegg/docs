{"version":3,"file":"transfers.js","sources":["../src/transfers.ts"],"sourcesContent":["import {\n  type Address,\n  type Hex,\n  encodeAbiParameters,\n  parseAbiParameters,\n  zeroAddress,\n} from 'viem';\n\n/**\n * The various types of assets supported in Budgets and Incentives.\n *\n * @export\n * @enum {number}\n */\nexport enum AssetType {\n  ETH,\n  ERC20,\n  ERC1155,\n}\n\n/**\n * Object representation of a generic `Transfer` struct.\n *\n * @export\n * @interface TransferPayload\n * @typedef {TransferPayload}\n */\nexport interface TransferPayload {\n  /**\n   * The type of the asset being transferred.\n   *\n   * @type {AssetType}\n   */\n  assetType: AssetType;\n  /**\n   * The address of the asset to transfer, zero address for ETH.\n   *\n   * @type {Address}\n   */\n  address: Address;\n  /**\n   * The account from which to transfer the assets.\n   *\n   * @type {Address}\n   */\n  target: Address;\n  /**\n   * An encoded {@link FungiblePayload}, use {@link prepareFungiblePayload} to construct.\n   *\n   * @type {Hex}\n   */\n  data: Hex;\n}\n\n/**\n * Encodes parameters for transferring the transfer of Fungible and ERC1155 assets, used for {@link Budget} operations.\n * Typically you'd use {@link prepareFungibleTransfer} or {@link prepareERC1155Transfer}\n *\n * @param {TransferPayload} param0\n * @param {AssetType} param0.assetType - The asset type being transferred.\n * @param {Address} param0.address - The address of the asset, use zero address for ETH transfers.\n * @param {Address} param0.target - The address of the account being transferred from\n * @param {Hex} param0.data - Use {@link prepareFungiblePayload} to properly encode an amount to transfer\n * @returns {Hex}\n */\nexport const prepareTransferPayload = ({\n  assetType,\n  address,\n  target,\n  data,\n}: TransferPayload) => {\n  return encodeAbiParameters(\n    [\n      { type: 'uint8', name: 'assetType' },\n      { type: 'address', name: 'asset' },\n      { type: 'address', name: 'target' },\n      { type: 'bytes', name: 'data' },\n    ],\n    [assetType, address, target, data],\n  );\n};\n\n/**\n * Object representation of\n *\n * @export\n * @interface ERC1155Payload\n * @typedef {ERC1155Payload}\n */\nexport interface ERC1155Payload {\n  /**\n   * The ERC1155 token ID for the incentive\n   *\n   * @type {bigint}\n   */\n  tokenId: bigint;\n  /**\n   * The amount to transfer\n   *\n   * @type {bigint}\n   */\n  amount: bigint;\n}\n\n/**\n * Given a token ID and amount, properly encode a `ERC1155Incentive.ERC1155Payload` for use with {@link ERC1155Incentive} initialization.\n *\n * @export\n * @param {ERC1155Payload} param0\n * @param {bigint} param0.tokenId - The ERC1155 token ID for the incentive\n * @param {bigint} param0.amount - The amount to transfer\n * @returns {Hex}\n */\nexport function prepareERC1155Payload({ tokenId, amount }: ERC1155Payload) {\n  return encodeAbiParameters(\n    parseAbiParameters([\n      'ERC1155Payload payload',\n      'struct ERC1155Payload { uint256 tokenId; uint256 amount; bytes data; }',\n    ]),\n    [{ tokenId, amount, data: '0x' }],\n  );\n}\n\n/**\n * An object representation of the `Budget.Transfer` contract struct for transfers of ERC1155 assets.\n *\n * @export\n * @interface ERC1155TransferPayload\n * @typedef {ERC1155TransferPayload}\n */\nexport interface ERC1155TransferPayload {\n  /**\n   * The token ID to transfer\n   *\n   * @type {bigint}\n   */\n  tokenId: bigint;\n  /**\n   * The amount to transfer\n   *\n   * @type {bigint}\n   */\n  amount: bigint;\n  /**\n   * The address of the asset to target\n   *\n   * @type {Address}\n   */\n  asset: Address;\n  /**\n   * The account to transfer from\n   *\n   * @type {Address}\n   */\n  target: Address;\n}\n\n/**\n * Encodes parameters for transferring the transfer of ERC1155 assets, used for {@link Budget} operations.\n * The caller must have already approved the contract to transfer the asset.\n *\n * @export\n * @param {ERC1155TransferPayload} param0\n * @param {bigint} param0.tokenId - The token ID to transfer\n * @param {bigint} param0.amount - The amount to transfer\n * @param {Address} param0.asset - The address of the asset to target\n * @param {Address} param0.target - The account to transfer from\n * @returns {Hex}\n */\nexport function prepareERC1155Transfer({\n  tokenId,\n  amount,\n  asset,\n  target,\n}: ERC1155TransferPayload) {\n  return encodeAbiParameters(\n    parseAbiParameters([\n      'Transfer request',\n      'struct Transfer { uint8 assetType; address asset; address target; bytes data; }',\n    ]),\n    [\n      {\n        assetType: AssetType.ERC1155,\n        asset,\n        data: prepareERC1155Payload({ tokenId, amount }),\n        target,\n      },\n    ],\n  );\n}\n\n/**\n * An object representation of the `FungiblePayload` struct\n *\n * @export\n * @interface FungiblePayload\n * @typedef {FungiblePayload}\n */\nexport interface FungiblePayload {\n  /**\n   * The amount being transferred\n   *\n   * @type {bigint}\n   */\n  amount: bigint;\n}\n\n/**\n * Encodes an amount for the `FungiblePayload` struct\n *\n * @export\n * @param {FungiblePayload} param0\n * @param {bigint} param0.amount - The amount being transferred\n * @returns {Hex}\n */\nexport function prepareFungiblePayload({ amount }: FungiblePayload) {\n  return encodeAbiParameters(\n    parseAbiParameters([\n      'FungiblePayload payload',\n      'struct FungiblePayload { uint256 amount; }',\n    ]),\n    [{ amount }],\n  );\n}\n\n/**\n * An object representation of the `Budget.Transfer` contract struct for transfers of fungible assets.\n *\n * @export\n * @interface FungibleTransferPayload\n * @typedef {FungibleTransferPayload}\n */\nexport interface FungibleTransferPayload {\n  /**\n   * The amount to transfer\n   *\n   * @type {bigint}\n   */\n  amount: bigint;\n  /**\n   * The address of the asset. Use zero address for ETH transfers.\n   *\n   * @type {Address}\n   */\n  asset: Address;\n  /**\n   * The account to transfer from\n   *\n   * @type {Address}\n   */\n  target: Address;\n}\n\n/**\n * Encodes parameters for a Fungible transfer, used for Budget allocations.\n * The caller must have already approved the contract to transfer the asset.\n *\n * @export\n * @param {FungibleTransferPayload} param0\n * @param {bigint} param0.amount - The amount to transfer\n * @param {Address} param0.asset - The address of the asset. Use zero address for ETH transfers.\n * @param {Address} param0.target - The account to transfer from\n * @returns {Hex}\n */\nexport function prepareFungibleTransfer({\n  amount,\n  asset,\n  target,\n}: FungibleTransferPayload) {\n  return encodeAbiParameters(\n    parseAbiParameters([\n      'Transfer request',\n      'struct Transfer { uint8 assetType; address asset; address target; bytes data; }',\n    ]),\n    [\n      {\n        assetType: asset == zeroAddress ? AssetType.ETH : AssetType.ERC20,\n        asset,\n        data: prepareFungiblePayload({ amount }),\n        target,\n      },\n    ],\n  );\n}\n"],"names":["AssetType","AssetType2","prepareTransferPayload","assetType","address","target","data","encodeAbiParameters","prepareERC1155Payload","tokenId","amount","parseAbiParameters","prepareERC1155Transfer","asset","prepareFungiblePayload","prepareFungibleTransfer","zeroAddress"],"mappings":";AAcY,IAAAA,sBAAAA,OACVA,EAAAC,EAAA,MAAA,CAAA,IAAA,OACAD,EAAAC,EAAA,QAAA,CAAA,IAAA,SACAD,EAAAC,EAAA,UAAA,CAAA,IAAA,WAHUD,IAAAA,KAAA,CAAA,CAAA;AAmDL,MAAME,IAAyB,CAAC;AAAA,EACrC,WAAAC;AAAA,EACA,SAAAC;AAAA,EACA,QAAAC;AAAA,EACA,MAAAC;AACF,MACSC;AAAA,EACL;AAAA,IACE,EAAE,MAAM,SAAS,MAAM,YAAY;AAAA,IACnC,EAAE,MAAM,WAAW,MAAM,QAAQ;AAAA,IACjC,EAAE,MAAM,WAAW,MAAM,SAAS;AAAA,IAClC,EAAE,MAAM,SAAS,MAAM,OAAO;AAAA,EAChC;AAAA,EACA,CAACJ,GAAWC,GAASC,GAAQC,CAAI;AAAA;AAmC9B,SAASE,EAAsB,EAAE,SAAAC,GAAS,QAAAC,KAA0B;AAClE,SAAAH;AAAA,IACLI,EAAmB;AAAA,MACjB;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACD,CAAC,EAAE,SAAAF,GAAS,QAAAC,GAAQ,MAAM,MAAM;AAAA,EAAA;AAEpC;AAgDO,SAASE,EAAuB;AAAA,EACrC,SAAAH;AAAA,EACA,QAAAC;AAAA,EACA,OAAAG;AAAA,EACA,QAAAR;AACF,GAA2B;AAClB,SAAAE;AAAA,IACLI,EAAmB;AAAA,MACjB;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACD;AAAA,MACE;AAAA,QACE,WAAW;AAAA,QACX,OAAAE;AAAA,QACA,MAAML,EAAsB,EAAE,SAAAC,GAAS,QAAAC,GAAQ;AAAA,QAC/C,QAAAL;AAAA,MACF;AAAA,IACF;AAAA,EAAA;AAEJ;AA0BgB,SAAAS,EAAuB,EAAE,QAAAJ,KAA2B;AAC3D,SAAAH;AAAA,IACLI,EAAmB;AAAA,MACjB;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACD,CAAC,EAAE,QAAAD,EAAA,CAAQ;AAAA,EAAA;AAEf;AAyCO,SAASK,EAAwB;AAAA,EACtC,QAAAL;AAAA,EACA,OAAAG;AAAA,EACA,QAAAR;AACF,GAA4B;AACnB,SAAAE;AAAA,IACLI,EAAmB;AAAA,MACjB;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACD;AAAA,MACE;AAAA,QACE,WAAWE,KAASG,IAAc,IAAgB;AAAA,QAClD,OAAAH;AAAA,QACA,MAAMC,EAAuB,EAAE,QAAAJ,GAAQ;AAAA,QACvC,QAAAL;AAAA,MACF;AAAA,IACF;AAAA,EAAA;AAEJ;"}