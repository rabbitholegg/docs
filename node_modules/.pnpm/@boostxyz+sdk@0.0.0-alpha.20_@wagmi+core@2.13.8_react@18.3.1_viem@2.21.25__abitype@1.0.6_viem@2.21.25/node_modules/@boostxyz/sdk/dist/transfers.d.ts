import { type Address, type Hex } from 'viem';
/**
 * The various types of assets supported in Budgets and Incentives.
 *
 * @export
 * @enum {number}
 */
export declare enum AssetType {
    ETH = 0,
    ERC20 = 1,
    ERC1155 = 2
}
/**
 * Object representation of a generic `Transfer` struct.
 *
 * @export
 * @interface TransferPayload
 * @typedef {TransferPayload}
 */
export interface TransferPayload {
    /**
     * The type of the asset being transferred.
     *
     * @type {AssetType}
     */
    assetType: AssetType;
    /**
     * The address of the asset to transfer, zero address for ETH.
     *
     * @type {Address}
     */
    address: Address;
    /**
     * The account from which to transfer the assets.
     *
     * @type {Address}
     */
    target: Address;
    /**
     * An encoded {@link FungiblePayload}, use {@link prepareFungiblePayload} to construct.
     *
     * @type {Hex}
     */
    data: Hex;
}
/**
 * Encodes parameters for transferring the transfer of Fungible and ERC1155 assets, used for {@link Budget} operations.
 * Typically you'd use {@link prepareFungibleTransfer} or {@link prepareERC1155Transfer}
 *
 * @param {TransferPayload} param0
 * @param {AssetType} param0.assetType - The asset type being transferred.
 * @param {Address} param0.address - The address of the asset, use zero address for ETH transfers.
 * @param {Address} param0.target - The address of the account being transferred from
 * @param {Hex} param0.data - Use {@link prepareFungiblePayload} to properly encode an amount to transfer
 * @returns {Hex}
 */
export declare const prepareTransferPayload: ({ assetType, address, target, data, }: TransferPayload) => `0x${string}`;
/**
 * Object representation of
 *
 * @export
 * @interface ERC1155Payload
 * @typedef {ERC1155Payload}
 */
export interface ERC1155Payload {
    /**
     * The ERC1155 token ID for the incentive
     *
     * @type {bigint}
     */
    tokenId: bigint;
    /**
     * The amount to transfer
     *
     * @type {bigint}
     */
    amount: bigint;
}
/**
 * Given a token ID and amount, properly encode a `ERC1155Incentive.ERC1155Payload` for use with {@link ERC1155Incentive} initialization.
 *
 * @export
 * @param {ERC1155Payload} param0
 * @param {bigint} param0.tokenId - The ERC1155 token ID for the incentive
 * @param {bigint} param0.amount - The amount to transfer
 * @returns {Hex}
 */
export declare function prepareERC1155Payload({ tokenId, amount }: ERC1155Payload): `0x${string}`;
/**
 * An object representation of the `Budget.Transfer` contract struct for transfers of ERC1155 assets.
 *
 * @export
 * @interface ERC1155TransferPayload
 * @typedef {ERC1155TransferPayload}
 */
export interface ERC1155TransferPayload {
    /**
     * The token ID to transfer
     *
     * @type {bigint}
     */
    tokenId: bigint;
    /**
     * The amount to transfer
     *
     * @type {bigint}
     */
    amount: bigint;
    /**
     * The address of the asset to target
     *
     * @type {Address}
     */
    asset: Address;
    /**
     * The account to transfer from
     *
     * @type {Address}
     */
    target: Address;
}
/**
 * Encodes parameters for transferring the transfer of ERC1155 assets, used for {@link Budget} operations.
 * The caller must have already approved the contract to transfer the asset.
 *
 * @export
 * @param {ERC1155TransferPayload} param0
 * @param {bigint} param0.tokenId - The token ID to transfer
 * @param {bigint} param0.amount - The amount to transfer
 * @param {Address} param0.asset - The address of the asset to target
 * @param {Address} param0.target - The account to transfer from
 * @returns {Hex}
 */
export declare function prepareERC1155Transfer({ tokenId, amount, asset, target, }: ERC1155TransferPayload): `0x${string}`;
/**
 * An object representation of the `FungiblePayload` struct
 *
 * @export
 * @interface FungiblePayload
 * @typedef {FungiblePayload}
 */
export interface FungiblePayload {
    /**
     * The amount being transferred
     *
     * @type {bigint}
     */
    amount: bigint;
}
/**
 * Encodes an amount for the `FungiblePayload` struct
 *
 * @export
 * @param {FungiblePayload} param0
 * @param {bigint} param0.amount - The amount being transferred
 * @returns {Hex}
 */
export declare function prepareFungiblePayload({ amount }: FungiblePayload): `0x${string}`;
/**
 * An object representation of the `Budget.Transfer` contract struct for transfers of fungible assets.
 *
 * @export
 * @interface FungibleTransferPayload
 * @typedef {FungibleTransferPayload}
 */
export interface FungibleTransferPayload {
    /**
     * The amount to transfer
     *
     * @type {bigint}
     */
    amount: bigint;
    /**
     * The address of the asset. Use zero address for ETH transfers.
     *
     * @type {Address}
     */
    asset: Address;
    /**
     * The account to transfer from
     *
     * @type {Address}
     */
    target: Address;
}
/**
 * Encodes parameters for a Fungible transfer, used for Budget allocations.
 * The caller must have already approved the contract to transfer the asset.
 *
 * @export
 * @param {FungibleTransferPayload} param0
 * @param {bigint} param0.amount - The amount to transfer
 * @param {Address} param0.asset - The address of the asset. Use zero address for ETH transfers.
 * @param {Address} param0.target - The account to transfer from
 * @returns {Hex}
 */
export declare function prepareFungibleTransfer({ amount, asset, target, }: FungibleTransferPayload): `0x${string}`;
//# sourceMappingURL=transfers.d.ts.map