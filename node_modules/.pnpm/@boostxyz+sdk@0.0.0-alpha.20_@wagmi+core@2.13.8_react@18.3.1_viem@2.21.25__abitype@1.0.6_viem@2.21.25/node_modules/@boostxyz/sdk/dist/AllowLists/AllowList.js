import { I as s, F as l } from "../generated-B7VaSah4.js";
import { c as m, d as p } from "../componentInterfaces-RXBMI5yH.js";
import { readContract as c } from "@wagmi/core";
import { InvalidComponentInterfaceError as f } from "../errors.js";
import { S as i, b as d, p as A } from "../SimpleDenyList-Cn5WpNn0.js";
import { zeroAddress as w } from "viem";
import { SimpleAllowList as y } from "./SimpleAllowList.js";
const L = s;
class D extends i {
  /**
   * @inheritdoc
   *
   * @public
   * @param {?SimpleDenyListPayload} [_payload]
   * @param {?DeployableOptions} [_options]
   * @returns {GenericDeployableParams}
   */
  buildParameters(e, o) {
    const [n, a] = this.validateDeploymentConfig({}, o);
    return {
      abi: L,
      bytecode: d,
      args: [A({ owner: w, denied: [] })],
      ...this.optionallyAttachAccount(a.account)
    };
  }
}
const r = {
  [m]: y,
  [p]: i
};
async function v(t, e) {
  const o = await c(t.config, {
    abi: l,
    functionName: "getComponentInterface",
    address: e
  }), n = r[o];
  if (!n)
    throw new f(
      Object.keys(r),
      o
    );
  return new n(t, e);
}
export {
  r as AllowListByComponentInterface,
  D as OpenAllowList,
  y as SimpleAllowList,
  i as SimpleDenyList,
  v as allowListFromAddress
};
//# sourceMappingURL=AllowList.js.map
