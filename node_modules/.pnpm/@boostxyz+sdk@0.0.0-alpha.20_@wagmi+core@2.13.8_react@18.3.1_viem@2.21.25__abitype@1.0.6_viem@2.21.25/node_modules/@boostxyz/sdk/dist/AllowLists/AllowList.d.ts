import type { Address } from 'viem';
import type { DeployableOptions } from '../Deployable/Deployable';
import { OpenAllowList } from './OpenAllowList';
import { SimpleAllowList } from './SimpleAllowList';
import { SimpleDenyList } from './SimpleDenyList';
export { OpenAllowList, SimpleAllowList, SimpleDenyList };
/**
 * A union type representing all valid protocol AllowList implementations
 *
 * @export
 * @typedef {AllowList}
 */
export type AllowList = OpenAllowList | SimpleAllowList | SimpleDenyList;
/**
 * A map of AllowList component interfaces to their constructors.
 *
 * @type {{ "0x2bc9016b": SimpleAllowList; "0x9d585f63": SimpleDenyList; }}
 */
export declare const AllowListByComponentInterface: {
    [x: string]: typeof SimpleDenyList | typeof SimpleAllowList;
};
/**
 * A function that will read a contract's component interface using `getComponentInterface` and return the correct instantiated instance.
 * This function will never return an instance of {@link OpenAllowList} because it has the same component interface as {@link SimpleDenyList}
 *
 * @export
 * @async
 * @param {DeployableOptions} options
 * @param {Address} address
 * @returns {Promise<SimpleAllowList | SimpleDenyList>}
 * @throws {@link InvalidComponentInterfaceError}
 */
export declare function allowListFromAddress(options: DeployableOptions, address: Address): Promise<SimpleAllowList | SimpleDenyList<import("./SimpleDenyList").SimpleDenyListPayload>>;
//# sourceMappingURL=AllowList.d.ts.map