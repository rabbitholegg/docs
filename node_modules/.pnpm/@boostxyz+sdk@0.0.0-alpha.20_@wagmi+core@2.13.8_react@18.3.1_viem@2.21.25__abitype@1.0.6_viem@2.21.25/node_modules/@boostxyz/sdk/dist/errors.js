import { zeroHash as a } from "viem";
class c extends Error {
  /**
   * Creates an instance of BoostCoreNoIdentifierEmitted.
   *
   * @constructor
   */
  constructor() {
    super('No "BoostCreated" log was emitted from which to extract boostId');
  }
}
class d extends Error {
  /**
   * Creates an instance of ContractAddressRequiredError.
   *
   * @constructor
   */
  constructor() {
    super("Attempted to call contract method without providing an address");
  }
}
class l extends Error {
  /**
   * Creates an instance of DeployableAlreadyDeployedError.
   *
   * @constructor
   * @param {string} address
   */
  constructor(r) {
    super(
      "Attempted to deploy a contract that already has an address configured"
    ), this.address = r;
  }
}
class u extends Error {
  /**
   * Creates an instance of DeployableBuildParametersUnspecifiedError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Implementing class did not properly override the `buildParameters` method"
    );
  }
}
class p extends Error {
  /**
   * Creates an instance of DeployableUnknownOwnerProvidedError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Expected an an owner to be provided in configuration or an account to exist on Wagmi config."
    );
  }
}
class E extends Error {
  /**
   * Creates an instance of DeployableWagmiConfigurationRequiredError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Expected a valid Wagmi configuration to be available either on Deployable, or as argument to deploy."
    );
  }
}
class h extends Error {
  /**
   * Creates an instance of DeployableMissingPayloadError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Expected a valid payload to be available either on Deployable or as argument to deploy."
    );
  }
}
class m extends Error {
  /**
   * Creates an instance of NoContractAddressUponReceiptError.
   *
   * @constructor
   * @param {WaitForTransactionReceiptReturnType} receipt
   */
  constructor(r) {
    super("Expected a contract address to exist on receipt.", {
      cause: r
    }), this.receipt = r;
  }
}
class g extends Error {
  /**
   * Creates an instance of InvalidComponentInterfaceError.
   *
   * @constructor
   * @param {Hex[]} expected
   * @param {Hex} received
   */
  constructor(r, o) {
    super("Address provided does not match any expected protocol interface", {
      cause: { expected: r, received: o }
    }), this.expected = [], this.received = a, this.expected = r, this.received = o;
  }
}
class x extends Error {
  /**
   * Creates an instance of UnknownTransferPayloadSupplied.
   *
   * @constructor
   * @param {number} input_param_idx
   * @param {AbiEvent} event
   */
  constructor(r, o) {
    super(
      `Parameter is not transparently stored onchain. Parameter ${r} in event ${o.name} cannot be used in an action`,
      { cause: o }
    ), this.event = o, this.input_param_idx = r;
  }
}
class v extends Error {
  /**
   * Creates an instance of UnknownTransferPayloadSupplied.
   *
   * @constructor
   * @param {unknown} received
   */
  constructor(r) {
    super(
      "Did not provide a valid FungibleTransferPayload or ERC1155 transfer payload.",
      { cause: r }
    ), this.received = r;
  }
}
class y extends Error {
  /**
   * Creates an instance of BudgetMustAuthorizeBoostCore.
   *
   * @constructor
   * @param {string} boostCoreAddress
   */
  constructor(r) {
    super(
      `Budget needs to explicitly authorize ${r}. You can retrieve this value from BoostCore.address`
    );
  }
}
class b extends Error {
  /**
   * Creates an instance of MustInitializeBudgetError.
   */
  constructor() {
    super("Budgets must be preinitialized before being used with a new Boost");
  }
}
class f extends Error {
  /**
   * Creates an instance of IncentiveNotCloneableError.
   *
   * @constructor
   * @param {Incentive} incentive
   */
  constructor(r) {
    super(`Incentive not cloneable: ${r.constructor.name}`);
  }
}
class I extends Error {
  /**
   * Creates an instance of NoEventActionStepsProvidedError.
   *
   * @constructor
   */
  constructor() {
    super("Must supply at least one action step");
  }
}
class C extends Error {
  /**
   * Creates an instance of TooManyEventActionStepsProvidedError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Cannot supply more than 4 action steps with current protocol version"
    );
  }
}
class A extends Error {
  /**
   * Creates an instance of ValidationAbiMissingError.
   *
   * @constructor
   * @param {Hex} signature
   */
  constructor(r) {
    super(`No known ABI for given signature: ${r}`);
  }
}
class t extends Error {
  /**
   * Creates an instance of FieldActionValidationError.
   *
   * @constructor
   * @param {string} message
   * @param {EventActionValidationMeta} param0
   * @param {*} param0.fieldValue
   * @param {Criteria} param0.criteria
   * @param {Log} param0.log
   */
  constructor(r, {
    fieldValue: o,
    criteria: n,
    ...s
  }) {
    switch (super(r), this.fieldValue = o, this.criteria = n, !0) {
      case "log" in s:
        this.log = s.log;
        break;
      case "decodedArgs" in s:
        this.decodedArgs = s.decodedArgs;
    }
  }
}
class w extends t {
  /**
   * Creates an instance of DecodedArgsUndefinedError.
   *
   * @constructor
   * @param {DecodedArgsMalformedError} metadata
   */
  constructor(r) {
    super(
      "Decoded Args are malformed; Check which params are indexed",
      r
    );
  }
}
class D extends t {
  /**
   * Creates an instance of FieldValueUndefinedError.
   *
   * @constructor
   * @param {EventActionValidationMeta} metadata
   */
  constructor(r) {
    super("Field value is undefined", r);
  }
}
class N extends t {
  /**
   * Creates an instance of InvalidNumericalCriteria.
   *
   * @constructor
   * @param {EventActionValidationMeta} metadata
   */
  constructor(r) {
    super(
      "Numerical comparisons cannot be used with non-numerical criteria",
      r
    );
  }
}
class P extends Error {
  /**
   * Creates an instance of FunctionDataDecodeError.
   *
   * @constructor
   * @param {AbiFunction[]} abi - The ABI of the function.
   * @param {Error} originalError - The original error that was thrown.
   */
  constructor(r, o) {
    super(`Failed to decode function data: ${o.message}`), this.name = "FunctionDataDecodeError", this.abi = r, this.originalError = o;
  }
}
class F extends t {
  /**
   * Creates an instance of FieldValueNotComparableError.
   *
   * @constructor
   * @param {EventActionValidationMeta} metadata
   */
  constructor(r) {
    super("Filter can only be used with bytes or string field type", r);
  }
}
class B extends t {
  /**
   * Creates an instance of UnrecognizedFilterTypeError.
   *
   * @constructor
   * @param {EventActionValidationMeta} metadata
   */
  constructor(r) {
    super("Invalid FilterType provided", r);
  }
}
class $ extends Error {
  /**
   * Creates an instance of NoConnectedChainIdError.
   *
   * @constructor
   */
  constructor() {
    super(
      "Provided Wagmi configuration does not define `chainId` property with which to target protocol contracts"
    ), this.name = "NoConnectedChainIdError";
  }
}
class M extends Error {
  /**
   * Creates an instance of InvalidProtocolChainIdError.
   *
   * @constructor
   * @param {number} chainId - The chain ID provided in the configuration.
   * @param {number[]} validChainIds - A list of valid chain IDs where the protocol is deployed.
   */
  constructor(r, o) {
    super(
      `Provided Wagmi configuration supplied a "chainId" where protocol is not deployed, provided: ${r}, but valid chains are: ${o}`
    ), this.name = "InvalidProtocolChainIdError";
  }
}
class U extends Error {
  /**
   * Creates an instance of IncentiveCriteriaNotFoundError.
   *
   * @constructor
   * @param {Error} [e] - Optional error object for further context.
   * @param {string} [message='Unable to fetch Incentive Criteria from contract'] - Custom error message.
   */
  constructor(r, o = "Unable to fetch Incentive Criteria from contract") {
    super(o + (r ? `: ${r.message}` : "")), this.name = "IncentiveCriteriaNotFoundError";
  }
}
class T extends Error {
  /**
   * Creates an instance of NoMatchingLogsError.
   *
   * @constructor
   * @param {string} signature - The event signature for which logs are being searched.
   * @param {string} [message] - Optional custom error message.
   */
  constructor(r, o = `No logs found for event signature ${r}`) {
    super(o), this.name = "NoMatchingLogsError";
  }
}
class k extends Error {
  /**
   * Creates an instance of InvalidCriteriaTypeError.
   *
   * @constructor
   * @param {string} [criteriaType='unknown'] - The invalid criteria type that was provided.
   * @param {string} [message] - Optional custom error message.
   */
  constructor(r = "unknown", o = `Invalid criteria type ${r}`) {
    super(o), this.name = "InvalidCriteriaTypeError";
  }
}
class z extends Error {
  /**
   * Creates an instance of DecodedArgsError.
   *
   * @constructor
   * @param {string} [message='Issue decoding args'] - Custom error message.
   */
  constructor(r = "Issue decoding args") {
    super(r), this.name = "DecodedArgsError";
  }
}
export {
  c as BoostCoreNoIdentifierEmitted,
  y as BudgetMustAuthorizeBoostCore,
  d as ContractAddressRequiredError,
  z as DecodedArgsError,
  w as DecodedArgsMalformedError,
  l as DeployableAlreadyDeployedError,
  u as DeployableBuildParametersUnspecifiedError,
  h as DeployableMissingPayloadError,
  p as DeployableUnknownOwnerProvidedError,
  E as DeployableWagmiConfigurationRequiredError,
  t as FieldActionValidationError,
  F as FieldValueNotComparableError,
  D as FieldValueUndefinedError,
  P as FunctionDataDecodeError,
  U as IncentiveCriteriaNotFoundError,
  f as IncentiveNotCloneableError,
  g as InvalidComponentInterfaceError,
  k as InvalidCriteriaTypeError,
  N as InvalidNumericalCriteriaError,
  M as InvalidProtocolChainIdError,
  b as MustInitializeBudgetError,
  $ as NoConnectedChainIdError,
  m as NoContractAddressUponReceiptError,
  I as NoEventActionStepsProvidedError,
  T as NoMatchingLogsError,
  C as TooManyEventActionStepsProvidedError,
  v as UnknownTransferPayloadSupplied,
  x as UnparseableAbiParamError,
  B as UnrecognizedFilterTypeError,
  A as ValidationAbiMissingError
};
//# sourceMappingURL=errors.js.map
