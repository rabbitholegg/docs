import { erc721MintActionAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName, type Hex } from 'viem';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
import { ContractAction, type ContractActionPayload } from './ContractAction';
export { erc721MintActionAbi };
/**
 * `ERC721MintActionPayload` is a re-exported `ContractActionPayload`
 *
 * @export
 * @typedef {ERC721MintActionPayload}
 */
export type ERC721MintActionPayload = ContractActionPayload;
/**
 * A generic `viem.Log` event with support for `ERC721MintAction` event types.
 *
 * @export
 * @typedef {ERC721MintActionLog}
 * @template {ContractEventName<
 *     typeof erc721MintActionAbi
 *   >} [event=ContractEventName<typeof erc721MintActionAbi>]
 */
export type ERC721MintActionLog<event extends ContractEventName<typeof erc721MintActionAbi> = ContractEventName<typeof erc721MintActionAbi>> = GenericLog<typeof erc721MintActionAbi, event>;
/**
 * A primitive action to mint and/or validate that an ERC721 token has been minted
 * The action is expected to be prepared with the data payload for the minting of the token
 * This a minimal generic implementation that should be extended if additional functionality or customizations are required
 * It is expected that the target contract has an externally accessible mint function whose selector
 *
 * @export
 * @class ERC721MintAction
 * @typedef {ERC721MintAction}
 * @extends {ContractAction}
 */
export declare class ERC721MintAction extends ContractAction<typeof erc721MintActionAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetChainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TargetChainUnsupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "executor";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ActionExecuted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "isValidated";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ActionValidated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VALIDATOR";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract AValidator";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "chainId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "prepare";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "selector";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "target";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "validate";
        readonly outputs: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "validated";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "value";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * The set of validated tokens
     * This is intended to prevent multiple validations against the same token ID
     *
     * @public
     * @async
     * @param {bigint} token
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    validated(token: bigint, params?: ReadParams<typeof erc721MintActionAbi, 'validated'>): Promise<boolean>;
    /**
     * @inheritdoc
     *
     * @public
     * @async
     * @param {Hex} data
     * @param {?WriteParams} [params]
     * @returns {Promise<readonly [boolean, `0x${string}`]>}
     */
    execute(data: Hex, params?: WriteParams<typeof erc721MintActionAbi, 'execute'>): Promise<readonly [boolean, `0x${string}`]>;
    /**
     * @inheritdoc
     *
     * @public
     * @async
     * @param {Hex} data
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: readonly [boolean, `0x${string}`]; }>}
     */
    executeRaw(data: Hex, params?: WriteParams<typeof erc721MintActionAbi, 'execute'>): Promise<{
        hash: `0x${string}`;
        result: readonly [boolean, `0x${string}`];
    }>;
    /**
     * @inheritdoc
     *
     * @public
     * @async
     * @param {Hex} data
     * @param {?ReadParams} [params]
     * @returns {Promise<`0x${string}`>}
     */
    prepare(data: Hex, params?: ReadParams<typeof erc721MintActionAbi, 'prepare'>): Promise<`0x${string}`>;
    /**
     * Validate that the action has been completed successfully. This API is protected to prevent accidental signature burning.
     *
     * @protected
     * @async
     * @param {Address} holder - The holder
     * @param {BigInt} tokenId - The token ID
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>} - True if the action has been validated for the user
     */
    protected validate(holder: Address, tokenId: bigint, params?: WriteParams<typeof erc721MintActionAbi, 'validate'>): Promise<boolean>;
    /**
     * Validate that the action has been completed successfully
     *
     * @protected
     * @async
     * @param {Address} holder - The holder
     * @param {BigInt} tokenId - The token ID
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: boolean; }>} - True if the action has been validated for the user
     */
    protected validateRaw(holder: Address, tokenId: bigint, params?: WriteParams<typeof erc721MintActionAbi, 'validate'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?ERC721MintActionPayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: ERC721MintActionPayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Encodes a payload to validate that an action has been completed successfully.
 *
 *
 * @export
 * @param {Address} holder - The holder address
 * @param {bigint} payload - The token ID
 * @returns {Hex} - The first 20 bytes of the payload will be the holder address and the remaining bytes must be an encoded token ID (uint256)
 */
export declare function prepareERC721MintActionValidate(holder: Address, payload: bigint): `0x${string}`;
/**
 * Given a {@link ContractActionPayload}, properly encode a `ContractAction.InitPayload` for use with {@link ERC721MintAction} initialization.
 *
 * @param {ContractActionPayload} param0
 * @param {bigint} param0.chainId - The chain ID on which the target exists
 * @param {Address} param0.target - The target contract address
 * @param {Hex} param0.selector - The selector for the function to be called
 * @param {bigint} param0.value - The native token value to send with the function call
 * @returns {Hex}
 */
export declare function prepareERC721MintActionPayload({ chainId, target, selector, value, }: ContractActionPayload): `0x${string}`;
//# sourceMappingURL=ERC721MintAction.d.ts.map