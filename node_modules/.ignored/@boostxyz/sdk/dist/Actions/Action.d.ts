import type { Address } from 'viem';
import type { DeployableOptions } from '../Deployable/Deployable';
import { EventAction } from './EventAction';
export { EventAction, };
/**
 * A union type representing all valid protocol Action implementations
 *
 * @export
 * @typedef {Action}
 */
export type Action = EventAction;
/**
 * A map of Action component interfaces to their constructors.
 *
 * @type {{ "0x7687b0ed": EventAction; }}
 */
export declare const ActionByComponentInterface: {
    [x: string]: typeof EventAction;
};
/**
 * A function that will read a contract's component interface using `getComponentInterface` and return the correct instantiated instance.
 *
 * @export
 * @async
 * @param {DeployableOptions} options
 * @param {Address} address
 * @returns {Promise<EventAction>}
 * @throws {@link InvalidComponentInterfaceError}
 */
export declare function actionFromAddress(options: DeployableOptions, address: Address): Promise<EventAction>;
//# sourceMappingURL=Action.d.ts.map