import { contractActionAbi } from '@boostxyz/evm';
import { type Abi, type Address, type ContractEventName, type Hex } from 'viem';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
export { contractActionAbi };
/**
 * The object representation of a `ContractAction.InitPayload`
 *
 * @export
 * @interface ContractActionPayload
 * @typedef {ContractActionPayload}
 */
export interface ContractActionPayload {
    /**
     * The chain ID on which the target exists
     *
     * @type {bigint}
     */
    chainId: bigint;
    /**
     * The target contract address
     *
     * @type {Address}
     */
    target: Address;
    /**
     * The selector for the function to be called
     *
     * @type {Hex}
     */
    selector: Hex;
    /**
     * The native token value to send with the function call
     *
     * @type {bigint}
     */
    value: bigint;
}
/**
 * A generic `viem.Log` event with support for `ContractAction` event types.
 *
 * @export
 * @typedef {ContractActionLog}
 * @template {ContractEventName<typeof contractActionAbi>} [event=ContractEventName<
 *     typeof contractActionAbi
 *   >]
 */
export type ContractActionLog<event extends ContractEventName<typeof contractActionAbi> = ContractEventName<typeof contractActionAbi>> = GenericLog<typeof contractActionAbi, event>;
/**
 * A generic contract action
 *
 * @export
 * @class ContractAction
 * @typedef {ContractAction}
 * @extends {DeployableTarget<ContractActionPayload>}
 */
export declare class ContractAction<ContractActionAbi extends Abi = typeof contractActionAbi> extends DeployableTarget<ContractActionPayload, ContractActionAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetChainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TargetChainUnsupported";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "executor";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ActionExecuted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "isValidated";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ActionValidated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VALIDATOR";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract AValidator";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "chainId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "prepare";
        readonly outputs: readonly [{
            readonly name: "bytes_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "selector";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "target";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "value";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * The target chain ID
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    chainId(params?: ReadParams<typeof contractActionAbi, 'chainId'>): Promise<bigint>;
    /**
     * The target contract
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<`0x${string}`>}
     */
    target(params?: ReadParams<typeof contractActionAbi, 'target'>): Promise<`0x${string}`>;
    /**
     * The selector for the function to be called
     *
     * @example `function mint(address to, uint256 amount)`
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<`0x${string}`>}
     */
    selector(params?: ReadParams<typeof contractActionAbi, 'selector'>): Promise<`0x${string}`>;
    /**
     * The native token value to send with the function call
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    value(params?: ReadParams<typeof contractActionAbi, 'value'>): Promise<bigint>;
    /**
     * Executes a prepared contract action
     *
     * @public
     * @async
     * @param {Hex} data
     * @param {?WriteParams} [params]
     * @returns {Promise<readonly [boolean, `0x${string}`]>}
     */
    execute(data: Hex, params?: WriteParams<typeof contractActionAbi, 'execute'>): Promise<readonly [boolean, `0x${string}`]>;
    /**
     * Executes a prepared contract action
     *
     * @public
     * @async
     * @param {Hex} data
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: readonly [boolean, `0x${string}`]; }>}
     */
    executeRaw(data: Hex, params?: WriteParams<typeof contractActionAbi, 'execute'>): Promise<{
        hash: `0x${string}`;
        result: readonly [boolean, `0x${string}`];
    }>;
    /**
     * The encoded execution payload
     *
     * @public
     * @async
     * @param {Hex} calldata
     * @param {?ReadParams} [params]
     * @returns {Promise<`0x${string}`>}
     */
    prepare(calldata: Hex, params?: ReadParams<typeof contractActionAbi, 'prepare'>): Promise<`0x${string}`>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?ContractActionPayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: ContractActionPayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Given a {@link ContractActionPayload}, properly encode a `ContractAction.InitPayload` for use with {@link ContractAction} initialization.
 *
 * @param {ContractActionPayload} param0
 * @param {bigint} param0.chainId - The chain ID on which the target exists
 * @param {Address} param0.target - The target contract address
 * @param {Hex} param0.selector - The selector for the function to be called
 * @param {bigint} param0.value - The native token value to send with the function call
 * @returns {Hex}
 */
export declare function prepareContractActionPayload({ chainId, target, selector, value, }: ContractActionPayload): `0x${string}`;
//# sourceMappingURL=ContractAction.d.ts.map