import { bd as q, be as cf, b as I, bf as df, bg as nf, bh as sf, bi as of, bj as rf, bk as uf, bl as lf, bm as hf, bn as gf, bo as wf, bp as yf, bq as mf, br as vf, bs as Cf, bt as If, bu as Af, bv as pf } from "./generated-B7VaSah4.js";
import { getTransaction as _f, getTransactionReceipt as J, getAccount as Pf, waitForTransactionReceipt as Ef } from "@wagmi/core";
import { createClient as Bf, custom as Rf, parseEventLogs as S, decodeFunctionData as Ff, encodeAbiParameters as Df, parseEther as $f, zeroAddress as m, zeroHash as u } from "viem";
import { e as xf, f as Q } from "./deployments-BM42vImE.js";
import { actionFromAddress as Nf } from "./Actions/Action.js";
import { S as z, e as Sf, f as Of, E as Tf } from "./EventAction-D5tnm00s.js";
import { allowListFromAddress as Lf, OpenAllowList as jf } from "./AllowLists/AllowList.js";
import { SimpleAllowList as Mf } from "./AllowLists/SimpleAllowList.js";
import { S as Vf } from "./SimpleDenyList-Cn5WpNn0.js";
import { PassthroughAuth as qf } from "./Auth/PassthroughAuth.js";
import { prepareBoostPayload as zf, Boost as U } from "./Boost.js";
import { budgetFromAddress as Uf } from "./Budgets/Budget.js";
import { ManagedBudget as Gf } from "./Budgets/ManagedBudget.js";
import { Deployable as kf } from "./Deployable/Deployable.js";
import { AllowListIncentive as Wf } from "./Incentives/AllowListIncentive.js";
import { CGDAIncentive as Hf } from "./Incentives/CGDAIncentive.js";
import { ERC20Incentive as Jf } from "./Incentives/ERC20Incentive.js";
import { DeployableTarget as Qf } from "./Deployable/DeployableTarget.js";
import { IncentiveCriteriaNotFoundError as Kf, NoMatchingLogsError as G, DecodedArgsError as B, InvalidCriteriaTypeError as Xf, DeployableUnknownOwnerProvidedError as Yf, BudgetMustAuthorizeBoostCore as Zf, MustInitializeBudgetError as f0, IncentiveNotCloneableError as b0, BoostCoreNoIdentifierEmitted as e0 } from "./errors.js";
import { i as a0, E as t0 } from "./Incentive-Bp8Sez7M.js";
import { PointsIncentive as c0 } from "./Incentives/PointsIncentive.js";
import { SignerValidator as d0 } from "./Validators/SignerValidator.js";
import { validatorFromAddress as n0 } from "./Validators/Validator.js";
import { assertValidAddressByChainId as l } from "./utils.js";
import { simulateContract as i0, writeContract as s0 } from "viem/actions";
import { parseAccount as o0, getAddress as r0 } from "viem/utils";
const u0 = "0x60806040526544364c5bb0006004556103e860055f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506103e8600560086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555034801561006e575f80fd5b506040516137463803806137468339818101604052810190610090919061029f565b61009f3361012660201b60201c565b8160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506102dd565b61013461020260201b60201c565b156101ac577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392780541561016e57630dc149f05f526004601cfd5b8160601b60601c9150811560ff1b82178155815f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3506101ff565b8060601b60601c9050807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392755805f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a35b50565b5f90565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102338261020a565b9050919050565b5f61024482610229565b9050919050565b6102548161023a565b811461025e575f80fd5b50565b5f8151905061026f8161024b565b92915050565b61027e81610229565b8114610288575f80fd5b50565b5f8151905061029981610275565b92915050565b5f80604083850312156102b5576102b4610206565b5b5f6102c285828601610261565b92505060206102d38582860161028b565b9150509250929050565b61345c806102ea5f395ff3fe60806040526004361061014a575f3560e01c8063892b97f8116100b5578063d73792a91161006e578063d73792a9146103d0578063e21ff731146103fa578063eccc19a614610436578063f04e283e1461045e578063f2fde38b1461047a578063fee81cf4146104965761014a565b8063892b97f8146102e45780638da5cb5b1461030c5780638fe4f5231461033657806399d32fc414610352578063a92647dc1461037c578063b0e21e8a146103a65761014a565b806354d1f13d1161010757806354d1f13d146102365780635edb9eb014610240578063715018a61461026a578063730f9c57146102745780637b1039991461029057806384ae2bc6146102ba5761014a565b806313c8e2de1461014e578063256929621461018a5780632e75ab501461019457806339a51be5146101bc57806343bc42d3146101e657806346877b1a1461020e575b5f80fd5b348015610159575f80fd5b50610174600480360381019061016f91906124b0565b6104d2565b60405161018191906127a1565b60405180910390f35b6101926107ac565b005b34801561019f575f80fd5b506101ba60048036038101906101b591906124b0565b6107fd565b005b3480156101c7575f80fd5b506101d061080f565b6040516101dd91906127d0565b60405180910390f35b3480156101f1575f80fd5b5061020c60048036038101906102079190612813565b610834565b005b348015610219575f80fd5b50610234600480360381019061022f9190612868565b610867565b005b61023e6108b2565b005b34801561024b575f80fd5b506102546108eb565b60405161026191906128a2565b60405180910390f35b6102726108f6565b005b61028e6004803603810190610289919061291c565b610909565b005b34801561029b575f80fd5b506102a4610cc3565b6040516102b191906129d2565b60405180910390f35b3480156102c5575f80fd5b506102ce610ce8565b6040516102db91906129fa565b60405180910390f35b3480156102ef575f80fd5b5061030a60048036038101906103059190612813565b610d02565b005b348015610317575f80fd5b50610320610d36565b60405161032d91906127d0565b60405180910390f35b610350600480360381019061034b9190612a13565b610d5e565b005b34801561035d575f80fd5b50610366610d73565b60405161037391906128a2565b60405180910390f35b348015610387575f80fd5b50610390610d79565b60405161039d9190612ab7565b60405180910390f35b3480156103b1575f80fd5b506103ba610d9e565b6040516103c791906129fa565b60405180910390f35b3480156103db575f80fd5b506103e4610db7565b6040516103f191906129fa565b60405180910390f35b348015610405575f80fd5b50610420600480360381019061041b9190612ad0565b610dbd565b60405161042d91906127a1565b60405180910390f35b348015610441575f80fd5b5061045c60048036038101906104579190612868565b61182d565b005b61047860048036038101906104739190612868565b611878565b005b610494600480360381019061048f9190612868565b6118b6565b005b3480156104a1575f80fd5b506104bc60048036038101906104b79190612868565b6118df565b6040516104c991906128a2565b60405180910390f35b6104da612304565b5f82815481106104ed576104ec612b1b565b5b905f5260205f209060080201604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054806020026020016040519081016040528092919081815260200182805480156106da57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b50505050508152602001600582015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160068201548152602001600782015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b5f6107b56118f8565b67ffffffffffffffff164201905063389a75e1600c52335f52806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a250565b610805611902565b8060048190555050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61083c611902565b8060055f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b61086f611902565b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b63389a75e1600c52335f525f6020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c925f80a2565b5f8080549050905090565b6108fe611902565b6109075f611939565b565b3068929eee149b4bd2126854036109275763ab143c065f526004601cfd5b3068929eee149b4bd21268555f80878154811061094757610946612b1b565b5b905f5260205f20906008020190506004543410156109a2575f346004546040517f5c54305e00000000000000000000000000000000000000000000000000000000815260040161099993929190612b48565b60405180910390fd5b6109ac81866119ff565b806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3f756de8386866040518463ffffffff1660e01b8152600401610a0c93929190612bd7565b602060405180830381865afa158015610a27573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a4b9190612c3c565b610a81576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663703b690088888588886040518663ffffffff1660e01b8152600401610ae5959493929190612c67565b6020604051808303815f875af1158015610b01573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b259190612c3c565b610b5b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004018681548110610b7157610b70612b1b565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb1757cf8386866040518463ffffffff1660e01b8152600401610bd593929190612bd7565b6020604051808303815f875af1158015610bf1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c159190612c3c565b610c5a578184846040517f4139d81d000000000000000000000000000000000000000000000000000000008152600401610c5193929190612bd7565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1686887f0f29bbf4ce25d2346bbeb8a898e24e5d6d7d1d19bb895e71faecac833b259547888888604051610ca693929190612bd7565b60405180910390a4503868929eee149b4bd2126855505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560089054906101000a900467ffffffffffffffff1681565b610d0a611902565b80600560086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392754905090565b610d6c858585858533610909565b5050505050565b60045481565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055f9054906101000a900467ffffffffffffffff1681565b61271081565b610dc5612304565b335f73ffffffffffffffffffffffffffffffffffffffff1660025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610eb9575060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80826040518263ffffffff1660e01b8152600401610e7891906127d0565b602060405180830381865afa158015610e93573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb79190612c3c565b155b15610ef0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3068929eee149b4bd212685403610f0e5763ab143c065f526004601cfd5b3068929eee149b4bd21268555f610f6785858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050611b6d565b806020019051810190610f7a9190613113565b9050610f88815f0151611c06565b5f8060018160018154018082558091505003905f5260205f2090600802019050816101000151816007015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550815f0151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160a0015160055f9054906101000a900467ffffffffffffffff166110599190613187565b816005015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508160c00151600560089054906101000a900467ffffffffffffffff166110a89190613187565b8160050160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508160e00151816006018190555061110f7fe67157950000000000000000000000000000000000000000000000000000000083602001516001611ce1565b815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061117f7fe2089f790000000000000000000000000000000000000000000000000000000083606001516001611ce1565b816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111d18260800151835f0151611d03565b8160040190805190602001906111e89291906123ca565b505f73ffffffffffffffffffffffffffffffffffffffff1682604001516020015173ffffffffffffffffffffffffffffffffffffffff1614611259576112547f5912b89c0000000000000000000000000000000000000000000000000000000083604001516001611ce1565b611342565b805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f5912b89c000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016112d491906131fc565b602060405180830381865afa1580156112ef573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113139190612c3c565b61131d575f611341565b805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b5b816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f73ffffffffffffffffffffffffffffffffffffffff16816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611438577f5912b89c000000000000000000000000000000000000000000000000000000005f6040517fe1c4444800000000000000000000000000000000000000000000000000000000815260040161142f929190613215565b60405180910390fd5b805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16816007015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660015f805490506114bc919061323c565b7f116812d3ad4507d72f2c428b63246d594ca055a1dc119394285504c23d1f34cd8460040180549050856001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611561949392919061326f565b60405180910390a480604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820180548060200260200160405190810160405280929190818152602001828054801561174b57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611702575b50505050508152602001600582015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160068201548152602001600782015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050935050503868929eee149b4bd21268555092915050565b611835611902565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611880611902565b63389a75e1600c52805f526020600c2080544211156118a657636f5e88185f526004601cfd5b5f8155506118b381611939565b50565b6118be611902565b8060601b6118d357637448fbae5f526004601cfd5b6118dc81611939565b50565b5f63389a75e1600c52815f526020600c20549050919050565b5f6202a300905090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927543314611937576382b429005f526004601cfd5b565b6119416120cd565b156119a6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3811560ff1b82178155506119fc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3818155505b50565b5f6004540315611b69575f60045490505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611ac5575f61271067ffffffffffffffff168460050160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16600454611a8091906132b2565b611a8a9190613320565b90508082611a98919061323c565b9150611ac3818473ffffffffffffffffffffffffffffffffffffffff166120d190919063ffffffff16565b505b611b1d600282611ad59190613320565b846007015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120d190919063ffffffff16565b611b674760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120d190919063ffffffff16565b505b5050565b6060815115611c015760405190506020810160048301805184518501811983525b80861015611be7576001860195508551601f1a80611bd7576001870196508651601f1a5f198652607f8111611bc557600181013887395b6001607f821601860195505050611be2565b808553600185019450505b611b8e565b81835260208501840385525f845260208401604052505050505b919050565b611c307f579cba4400000000000000000000000000000000000000000000000000000000826120ee565b8073ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b8152600401611c6991906127d0565b602060405180830381865afa158015611c84573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ca89190612c3c565b611cde576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f611cf08484602001516120ee565b611cfa83836121e5565b90509392505050565b6060825167ffffffffffffffff811115611d2057611d1f612cb7565b5b604051908082528060200260200182016040528015611d4e5781602001602082028036833780820191505090505b5090505f5b83518110156120c657611da47f91f4490a00000000000000000000000000000000000000000000000000000000858381518110611d9357611d92612b1b565b5b6020026020010151602001516120ee565b838181518110611db757611db6612b1b565b5b60200260200101515f0151611e43577f91f4490a00000000000000000000000000000000000000000000000000000000848281518110611dfa57611df9612b1b565b5b6020026020010151602001516040517fe1c44448000000000000000000000000000000000000000000000000000000008152600401611e3a929190613215565b60405180910390fd5b611e887f91f4490a00000000000000000000000000000000000000000000000000000000858381518110611e7a57611e79612b1b565b5b60200260200101515f611ce1565b828281518110611e9b57611e9a612b1b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f828281518110611ee957611ee8612b1b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634e7165a2868481518110611f1f57611f1e612b1b565b5b6020026020010151604001516040518263ffffffff1660e01b8152600401611f479190613392565b5f60405180830381865afa158015611f61573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611f8991906133b2565b90505f81511461201a578373ffffffffffffffffffffffffffffffffffffffff1663fa4ca9b1826040518263ffffffff1660e01b8152600401611fcc9190613392565b6020604051808303815f875af1158015611fe8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061200c9190612c3c565b612019576120186133f9565b5b5b82828151811061202d5761202c612b1b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663439fab9186848151811061206357612062612b1b565b5b6020026020010151604001516040518263ffffffff1660e01b815260040161208b9190613392565b5f604051808303815f87803b1580156120a2575f80fd5b505af11580156120b4573d5f803e3d5ffd5b50505050508080600101915050611d53565b5092915050565b5f90565b5f385f3884865af16120ea5763b12d13eb5f526004601cfd5b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061219d57508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161215c91906131fc565b602060405180830381865afa158015612177573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061219b9190612c3c565b155b156121e15781816040517fe1c444480000000000000000000000000000000000000000000000000000000081526004016121d8929190613215565b60405180910390fd5b5050565b5f825f01516121f857826020015161221c565b61221b836020015173ffffffffffffffffffffffffffffffffffffffff166122a1565b5b9050825f0151801561222b5750815b1561229b578073ffffffffffffffffffffffffffffffffffffffff1663439fab9184604001516040518263ffffffff1660e01b815260040161226d9190613392565b5f604051808303815f87803b158015612284575f80fd5b505af1158015612296573d5f803e3d5ffd5b505050505b92915050565b5f6122ac5f836122b3565b9050919050565b5f6c5af43d3d93803e602a57fd5bf36021528160145273602c3d8160093d39f33d3d3d3d363d3d37363d735f526035600c84f09050806122fa5763301164255f526004601cfd5b5f60215292915050565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b828054828255905f5260205f20908101928215612440579160200282015b8281111561243f578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906123e8565b5b50905061244d9190612451565b5090565b5b80821115612468575f815f905550600101612452565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61248f8161247d565b8114612499575f80fd5b50565b5f813590506124aa81612486565b92915050565b5f602082840312156124c5576124c4612475565b5b5f6124d28482850161249c565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61251d612518612513846124db565b6124fa565b6124db565b9050919050565b5f61252e82612503565b9050919050565b5f61253f82612524565b9050919050565b61254f81612535565b82525050565b5f61255f82612524565b9050919050565b61256f81612555565b82525050565b5f61257f82612524565b9050919050565b61258f81612575565b82525050565b5f61259f82612503565b9050919050565b5f6125b082612595565b9050919050565b6125c0816125a6565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6125f982612524565b9050919050565b612609816125ef565b82525050565b5f61261a8383612600565b60208301905092915050565b5f602082019050919050565b5f61263c826125c6565b61264681856125d0565b9350612651836125e0565b805f5b83811015612681578151612668888261260f565b975061267383612626565b925050600181019050612654565b5085935050505092915050565b5f67ffffffffffffffff82169050919050565b6126aa8161268e565b82525050565b6126b98161247d565b82525050565b5f6126c9826124db565b9050919050565b6126d9816126bf565b82525050565b5f61012083015f8301516126f55f860182612546565b5060208301516127086020860182612566565b50604083015161271b6040860182612586565b50606083015161272e60608601826125b7565b50608083015184820360808601526127468282612632565b91505060a083015161275b60a08601826126a1565b5060c083015161276e60c08601826126a1565b5060e083015161278160e08601826126b0565b506101008301516127966101008601826126d0565b508091505092915050565b5f6020820190508181035f8301526127b981846126df565b905092915050565b6127ca816126bf565b82525050565b5f6020820190506127e35f8301846127c1565b92915050565b6127f28161268e565b81146127fc575f80fd5b50565b5f8135905061280d816127e9565b92915050565b5f6020828403121561282857612827612475565b5b5f612835848285016127ff565b91505092915050565b612847816126bf565b8114612851575f80fd5b50565b5f813590506128628161283e565b92915050565b5f6020828403121561287d5761287c612475565b5b5f61288a84828501612854565b91505092915050565b61289c8161247d565b82525050565b5f6020820190506128b55f830184612893565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126128dc576128db6128bb565b5b8235905067ffffffffffffffff8111156128f9576128f86128bf565b5b602083019150836001820283011115612915576129146128c3565b5b9250929050565b5f805f805f8060a0878903121561293657612935612475565b5b5f61294389828a0161249c565b965050602061295489828a0161249c565b955050604061296589828a01612854565b945050606087013567ffffffffffffffff81111561298657612985612479565b5b61299289828a016128c7565b935093505060806129a589828a01612854565b9150509295509295509295565b5f6129bc82612524565b9050919050565b6129cc816129b2565b82525050565b5f6020820190506129e55f8301846129c3565b92915050565b6129f48161268e565b82525050565b5f602082019050612a0d5f8301846129eb565b92915050565b5f805f805f60808688031215612a2c57612a2b612475565b5b5f612a398882890161249c565b9550506020612a4a8882890161249c565b9450506040612a5b88828901612854565b935050606086013567ffffffffffffffff811115612a7c57612a7b612479565b5b612a88888289016128c7565b92509250509295509295909350565b5f612aa182612524565b9050919050565b612ab181612a97565b82525050565b5f602082019050612aca5f830184612aa8565b92915050565b5f8060208385031215612ae657612ae5612475565b5b5f83013567ffffffffffffffff811115612b0357612b02612479565b5b612b0f858286016128c7565b92509250509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f606082019050612b5b5f8301866127c1565b612b686020830185612893565b612b756040830184612893565b949350505050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f612bb68385612b7d565b9350612bc3838584612b8d565b612bcc83612b9b565b840190509392505050565b5f604082019050612bea5f8301866127c1565b8181036020830152612bfd818486612bab565b9050949350505050565b5f8115159050919050565b612c1b81612c07565b8114612c25575f80fd5b50565b5f81519050612c3681612c12565b92915050565b5f60208284031215612c5157612c50612475565b5b5f612c5e84828501612c28565b91505092915050565b5f608082019050612c7a5f830188612893565b612c876020830187612893565b612c9460408301866127c1565b8181036060830152612ca7818486612bab565b90509695505050505050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612ced82612b9b565b810181811067ffffffffffffffff82111715612d0c57612d0b612cb7565b5b80604052505050565b5f612d1e61246c565b9050612d2a8282612ce4565b919050565b5f80fd5b5f612d3d826124db565b9050919050565b5f612d4e82612d33565b9050919050565b612d5e81612d44565b8114612d68575f80fd5b50565b5f81519050612d7981612d55565b92915050565b5f81519050612d8d8161283e565b92915050565b5f80fd5b5f67ffffffffffffffff821115612db157612db0612cb7565b5b612dba82612b9b565b9050602081019050919050565b8281835e5f83830152505050565b5f612de7612de284612d97565b612d15565b905082815260208101848484011115612e0357612e02612d93565b5b612e0e848285612dc7565b509392505050565b5f82601f830112612e2a57612e296128bb565b5b8151612e3a848260208601612dd5565b91505092915050565b5f60608284031215612e5857612e57612cb3565b5b612e626060612d15565b90505f612e7184828501612c28565b5f830152506020612e8484828501612d7f565b602083015250604082015167ffffffffffffffff811115612ea857612ea7612d2f565b5b612eb484828501612e16565b60408301525092915050565b5f67ffffffffffffffff821115612eda57612ed9612cb7565b5b602082029050602081019050919050565b5f612efd612ef884612ec0565b612d15565b90508083825260208201905060208402830185811115612f2057612f1f6128c3565b5b835b81811015612f6757805167ffffffffffffffff811115612f4557612f446128bb565b5b808601612f528982612e43565b85526020850194505050602081019050612f22565b5050509392505050565b5f82601f830112612f8557612f846128bb565b5b8151612f95848260208601612eeb565b91505092915050565b5f81519050612fac816127e9565b92915050565b5f81519050612fc081612486565b92915050565b5f6101208284031215612fdc57612fdb612cb3565b5b612fe7610120612d15565b90505f612ff684828501612d6b565b5f83015250602082015167ffffffffffffffff81111561301957613018612d2f565b5b61302584828501612e43565b602083015250604082015167ffffffffffffffff81111561304957613048612d2f565b5b61305584828501612e43565b604083015250606082015167ffffffffffffffff81111561307957613078612d2f565b5b61308584828501612e43565b606083015250608082015167ffffffffffffffff8111156130a9576130a8612d2f565b5b6130b584828501612f71565b60808301525060a06130c984828501612f9e565b60a08301525060c06130dd84828501612f9e565b60c08301525060e06130f184828501612fb2565b60e08301525061010061310684828501612d7f565b6101008301525092915050565b5f6020828403121561312857613127612475565b5b5f82015167ffffffffffffffff81111561314557613144612479565b5b61315184828501612fc6565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6131918261268e565b915061319c8361268e565b9250828201905067ffffffffffffffff8111156131bc576131bb61315a565b5b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131f6816131c2565b82525050565b5f60208201905061320f5f8301846131ed565b92915050565b5f6040820190506132285f8301856131ed565b61323560208301846127c1565b9392505050565b5f6132468261247d565b91506132518361247d565b92508282039050818111156132695761326861315a565b5b92915050565b5f6080820190506132825f830187612893565b61328f60208301866127c1565b61329c60408301856127c1565b6132a960608301846127c1565b95945050505050565b5f6132bc8261247d565b91506132c78361247d565b92508282026132d58161247d565b915082820484148315176132ec576132eb61315a565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61332a8261247d565b91506133358361247d565b925082613345576133446132f3565b5b828204905092915050565b5f81519050919050565b5f61336482613350565b61336e8185612b7d565b935061337e818560208601612dc7565b61338781612b9b565b840191505092915050565b5f6020820190508181035f8301526133aa818461335a565b905092915050565b5f602082840312156133c7576133c6612475565b5b5f82015167ffffffffffffffff8111156133e4576133e3612479565b5b6133f084828501612e16565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea26469706673582212204eaf66ccca943bbd41336b4d6a869ce92b2897eab45b2c64f5ada1cf3f319bca64736f6c634300081a0033";
function K(t) {
  const b = t.state.current, f = t.state.connections.get(b), e = f == null ? void 0 : f.accounts, a = e == null ? void 0 : e[0], c = t.chains.find((i) => i.id === (f == null ? void 0 : f.chainId)), d = t.state.status;
  switch (d) {
    case "connected":
      return {
        address: a,
        addresses: e,
        chain: c,
        chainId: f == null ? void 0 : f.chainId,
        connector: f == null ? void 0 : f.connector,
        isConnected: !0,
        isConnecting: !1,
        isDisconnected: !1,
        isReconnecting: !1,
        status: d
      };
    case "reconnecting":
      return {
        address: a,
        addresses: e,
        chain: c,
        chainId: f == null ? void 0 : f.chainId,
        connector: f == null ? void 0 : f.connector,
        isConnected: !!a,
        isConnecting: !1,
        isDisconnected: !1,
        isReconnecting: !0,
        status: d
      };
    case "connecting":
      return {
        address: a,
        addresses: e,
        chain: c,
        chainId: f == null ? void 0 : f.chainId,
        connector: f == null ? void 0 : f.connector,
        isConnected: !1,
        isConnecting: !0,
        isDisconnected: !1,
        isReconnecting: !1,
        status: d
      };
    case "disconnected":
      return {
        address: void 0,
        addresses: void 0,
        chain: void 0,
        chainId: void 0,
        connector: void 0,
        isConnected: !1,
        isConnecting: !1,
        isDisconnected: !0,
        isReconnecting: !1,
        status: d
      };
  }
}
function l0(t) {
  return t.state.chainId;
}
function X(t, b, f) {
  const e = t[b.name];
  if (typeof e == "function")
    return e;
  const a = t[f];
  return typeof a == "function" ? a : (c) => b(t, c);
}
const h0 = "2.13.8", g0 = () => `@wagmi/core@${h0}`;
var Y = function(t, b, f, e) {
  if (f === "a" && !e) throw new TypeError("Private accessor was defined without a getter");
  if (typeof b == "function" ? t !== b || !e : !b.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return f === "m" ? e : f === "a" ? e.call(t) : e ? e.value : b.get(t);
}, R, Z;
class v extends Error {
  get docsBaseUrl() {
    return "https://wagmi.sh/core";
  }
  get version() {
    return g0();
  }
  constructor(b, f = {}) {
    var c;
    super(), R.add(this), Object.defineProperty(this, "details", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "metaMessages", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "WagmiCoreError"
    });
    const e = f.cause instanceof v ? f.cause.details : (c = f.cause) != null && c.message ? f.cause.message : f.details, a = f.cause instanceof v && f.cause.docsPath || f.docsPath;
    this.message = [
      b || "An error occurred.",
      "",
      ...f.metaMessages ? [...f.metaMessages, ""] : [],
      ...a ? [
        `Docs: ${this.docsBaseUrl}${a}.html${f.docsSlug ? `#${f.docsSlug}` : ""}`
      ] : [],
      ...e ? [`Details: ${e}`] : [],
      `Version: ${this.version}`
    ].join(`
`), f.cause && (this.cause = f.cause), this.details = e, this.docsPath = a, this.metaMessages = f.metaMessages, this.shortMessage = b;
  }
  walk(b) {
    return Y(this, R, "m", Z).call(this, this, b);
  }
}
R = /* @__PURE__ */ new WeakSet(), Z = function t(b, f) {
  return f != null && f(b) ? b : b.cause ? Y(this, R, "m", t).call(this, b.cause, f) : b;
};
class w0 extends v {
  constructor() {
    super("Connector not connected."), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "ConnectorNotConnectedError"
    });
  }
}
class y0 extends v {
  constructor({ address: b, connector: f }) {
    super(`Account "${b}" not found for connector "${f.name}".`), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "ConnectorAccountNotFoundError"
    });
  }
}
class m0 extends v {
  constructor({ connectionChainId: b, connectorChainId: f }) {
    super(`The current chain of the connector (id: ${f}) does not match the connection's chain (id: ${b}).`, {
      metaMessages: [
        `Current Chain ID:  ${f}`,
        `Expected Chain ID: ${b}`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "ConnectorChainMismatchError"
    });
  }
}
class v0 extends v {
  constructor({ connector: b }) {
    super(`Connector "${b.name}" unavailable while reconnecting.`, {
      details: [
        "During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uuid`.",
        "All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored.",
        "This error commonly occurs for connectors that asynchronously inject after reconnection has already started."
      ].join(" ")
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "ConnectorUnavailableReconnectingError"
    });
  }
}
async function ff(t, b = {}) {
  let f;
  if (b.connector) {
    const { connector: n } = b;
    if (t.state.status === "reconnecting" && !n.getAccounts && !n.getChainId)
      throw new v0({ connector: n });
    const [o, h] = await Promise.all([
      n.getAccounts(),
      n.getChainId()
    ]);
    f = {
      accounts: o,
      chainId: h,
      connector: n
    };
  } else
    f = t.state.connections.get(t.state.current);
  if (!f)
    throw new w0();
  const e = b.chainId ?? f.chainId, a = await f.connector.getChainId();
  if (a !== f.chainId)
    throw new m0({
      connectionChainId: f.chainId,
      connectorChainId: a
    });
  const c = f.connector;
  if (c.getClient)
    return c.getClient({ chainId: e });
  const d = o0(b.account ?? f.accounts[0]);
  if (d.address = r0(d.address), b.account && !f.accounts.some((n) => n.toLowerCase() === d.address.toLowerCase()))
    throw new y0({
      address: d.address,
      connector: c
    });
  const i = t.chains.find((n) => n.id === e), s = await f.connector.getProvider({ chainId: e });
  return Bf({
    account: d,
    chain: i,
    name: "Connector Client",
    transport: (n) => Rf(s)({ ...n, retryCount: 0 })
  });
}
async function C0(t, b) {
  const { abi: f, chainId: e, connector: a, ...c } = b;
  let d;
  b.account ? d = b.account : d = (await ff(t, {
    chainId: e,
    connector: a
  })).account;
  const i = t.getClient({ chainId: e }), s = X(i, i0, "simulateContract"), { result: n, request: o } = await s({ ...c, abi: f, account: d });
  return {
    chainId: i.chain.id,
    result: n,
    request: { __mode: "prepared", ...o, chainId: e }
  };
}
async function k(t, b) {
  const { account: f, chainId: e, connector: a, __mode: c, ...d } = b;
  let i;
  typeof f == "object" && f.type === "local" ? i = t.getClient({ chainId: e }) : i = await ff(t, { account: f, chainId: e, connector: a });
  const { connector: s } = K(t);
  let n;
  if (c === "prepared" || s != null && s.supportsSimulation)
    n = d;
  else {
    const { request: y } = await C0(t, {
      ...d,
      account: f,
      chainId: e
    });
    n = y;
  }
  return await X(i, s0, "writeContract")({
    ...n,
    ...f ? { account: f } : {},
    chain: e ? { id: e } : null
  });
}
function I0(t) {
  return t.address !== void 0 && typeof t.address == "object" ? (b, f) => {
    var d;
    const e = l0(b), a = K(b);
    let c;
    return f.chainId ? c = f.chainId : f.account && f.account === a.address || f.account === void 0 ? c = a.chainId : c = e, k(b, {
      ...f,
      ...t.functionName ? { functionName: t.functionName } : {},
      address: c ? (d = t.address) == null ? void 0 : d[c] : void 0,
      abi: t.abi
    });
  } : (b, f) => k(b, {
    ...f,
    ...t.address ? { address: t.address } : {},
    ...t.functionName ? { functionName: t.functionName } : {},
    abi: t.abi
  });
}
const A0 = "0x6080604052348015600e575f80fd5b50601b601f60201b60201c565b60b0565b5f602c608760201b60201c565b90508054600181161560455763f92ee8a95f526004601cfd5b8160c01c808260011c146082578060011b8355806020527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602080a15b505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf6011325f1b905090565b6120ec806100bd5f395ff3fe60806040526004361061013f575f3560e01c806377548687116100b5578063d54ad2a11161006e578063d54ad2a114610408578063db09da1214610432578063dcc59b6f1461046e578063f04e283e14610498578063f2fde38b146104b4578063fee81cf4146104d05761013f565b806377548687146102e55780638da5cb5b14610312578063a4d66daf1461033c578063a871ced214610366578063bb1757cf14610390578063c884ef83146103cc5761013f565b806338d52e0f1161010757806338d52e0f14610207578063439fab9114610231578063474f5a44146102595780634e7165a21461029557806354d1f13d146102d1578063715018a6146102db5761013f565b806301ffc9a71461014357806307621eca1461017f578063228cb733146101a957806325692962146101d357806328d6183b146101dd575b5f80fd5b34801561014e575f80fd5b50610169600480360381019061016491906113a5565b61050c565b60405161017691906113ea565b60405180910390f35b34801561018a575f80fd5b50610193610585565b6040516101a0919061141b565b60405180910390f35b3480156101b4575f80fd5b506101bd61058e565b6040516101ca919061141b565b60405180910390f35b6101db610594565b005b3480156101e8575f80fd5b506101f16105e5565b6040516101fe9190611443565b60405180910390f35b348015610212575f80fd5b5061021b61060c565b604051610228919061149b565b60405180910390f35b34801561023c575f80fd5b5061025760048036038101906102529190611515565b610631565b005b348015610264575f80fd5b5061027f600480360381019061027a9190611515565b61089a565b60405161028c91906113ea565b60405180910390f35b3480156102a0575f80fd5b506102bb60048036038101906102b69190611515565b6109db565b6040516102c891906115d0565b60405180910390f35b6102d9610aac565b005b6102e3610ae5565b005b3480156102f0575f80fd5b506102f9610af8565b6040516103099493929190611696565b60405180910390f35b34801561031d575f80fd5b50610326610b4d565b604051610333919061149b565b60405180910390f35b348015610347575f80fd5b50610350610b75565b60405161035d919061141b565b60405180910390f35b348015610371575f80fd5b5061037a610b7b565b6040516103879190611768565b60405180910390f35b34801561039b575f80fd5b506103b660048036038101906103b191906117ab565b610c4a565b6040516103c391906113ea565b60405180910390f35b3480156103d7575f80fd5b506103f260048036038101906103ed9190611808565b610e42565b6040516103ff91906113ea565b60405180910390f35b348015610413575f80fd5b5061041c610e5f565b604051610429919061141b565b60405180910390f35b34801561043d575f80fd5b50610458600480360381019061045391906117ab565b610e65565b60405161046591906113ea565b60405180910390f35b348015610479575f80fd5b50610482610e78565b60405161048f919061141b565b60405180910390f35b6104b260048036038101906104ad9190611808565b610e7d565b005b6104ce60048036038101906104c99190611808565b610ebb565b005b3480156104db575f80fd5b506104f660048036038101906104f19190611808565b610ee4565b604051610503919061141b565b60405180910390f35b5f7fa8e4af1e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057e575061057d82610efd565b5b9050919050565b5f600154905090565b60015481565b5f61059d610f76565b67ffffffffffffffff164201905063389a75e1600c52335f52806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a250565b5f7fa8e4af1e00000000000000000000000000000000000000000000000000000000905090565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f61063a610f80565b9050805460038255801561066c5760018160011c14303b106106635763f92ee8a95f526004601cfd5b818160ff1b1b91505b5061067633610fa9565b5f83838101906106869190611a3e565b90505f815f015190505f826020015190505f836040015190505f846060015190505f82036106e0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61070a308673ffffffffffffffffffffffffffffffffffffffff1661107f90919063ffffffff16565b90508281101561075857855f015181846040517f5c54305e00000000000000000000000000000000000000000000000000000000815260040161074f93929190611a69565b60405180910390fd5b8460035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600181905550826004819055505f6005819055508160065f820151815f015f6101000a81548160ff021916908360018111156107d8576107d76115f0565b5b0217905550602082015181600101556040820151816002015f6101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505061085a33610fa9565b5050505050508015610895576002815560016020527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602080a15b505050565b5f6108a36110b2565b5f83838101906108b39190611bb7565b90505f81602001518060200190518101906108ce9190611c12565b90508060045f8282546108e19190611c6a565b92505081905550610937825f01518260035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110e99092919063ffffffff16565b815f015173ffffffffffffffffffffffffffffffffffffffff167f9ad2e7a4af16dceda9cce4274b2f59c328d8c012eb0e15eb5e1e73b7d8f264d360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16845f0151846040516020016109ab93929190611d02565b6040516020818303038152906040526040516109c791906115d0565b60405180910390a260019250505092915050565b60605f805f85858101906109ef9190611d79565b925092509250604051806080016040528060016002811115610a1457610a136115f0565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001604051806020016040528084815250604051602001610a709190611df2565b604051602081830303815290604052815250604051602001610a929190611ef9565b604051602081830303815290604052935050505092915050565b63389a75e1600c52335f525f6020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c925f80a2565b610aed6110b2565b610af65f611132565b565b6006805f015f9054906101000a900460ff1690806001015490806002015f9054906101000a900460ff16908060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392754905090565b60045481565b610b836112ed565b60066040518060800160405290815f82015f9054906101000a900460ff166001811115610bb357610bb26115f0565b5b6001811115610bc557610bc46115f0565b5b815260200160018201548152602001600282015f9054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905090565b5f610c536110b2565b5f8383810190610c639190611f9e565b90505f8160200151806020019051810190610c7e9190611c12565b90505f610c8a876111f8565b610cc0576040517f6247a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015403610cd157819050610cf5565b670de0b6b3a764000082600154610ce89190611fe5565b610cf29190612053565b90505b60045481600554610d069190612083565b1115610d3e576040517f360e42e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060055f828254610d4f9190612083565b92505081905550610da2878260035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110e99092919063ffffffff16565b8673ffffffffffffffffffffffffffffffffffffffff167f9ad2e7a4af16dceda9cce4274b2f59c328d8c012eb0e15eb5e1e73b7d8f264d360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168984604051602001610e1093929190611d02565b604051602081830303815290604052604051610e2c91906115d0565b60405180910390a2600193505050509392505050565b6002602052805f5260405f205f915054906101000a900460ff1681565b60055481565b5f610e6f846111f8565b90509392505050565b5f5481565b610e856110b2565b63389a75e1600c52805f526020600c208054421115610eab57636f5e88185f526004601cfd5b5f815550610eb881611132565b50565b610ec36110b2565b8060601b610ed857637448fbae5f526004601cfd5b610ee181611132565b50565b5f63389a75e1600c52815f526020600c20549050919050565b5f7f91f4490a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610f6f5750610f6e82611207565b5b9050919050565b5f6202a300905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf6011325f1b905090565b610fb1611280565b15611029577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927805415610feb57630dc149f05f526004601cfd5b8160601b60601c9150811560ff1b82178155815f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a35061107c565b8060601b60601c9050807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392755805f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a35b50565b5f816014526f70a082310000000000000000000000005f5260208060246010865afa601f3d111660205102905092915050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275433146110e7576382b429005f526004601cfd5b565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716611129576390b8ec185f526004601cfd5b5f603452505050565b61113a611280565b1561119f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3811560ff1b82178155506111f5565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3818155505b50565b5f600454600554109050919050565b5f7f6ab67a0d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611279575061127882611284565b5b9050919050565b5f90565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60405180608001604052805f600181111561130b5761130a6115f0565b5b81526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61138481611350565b811461138e575f80fd5b50565b5f8135905061139f8161137b565b92915050565b5f602082840312156113ba576113b9611348565b5b5f6113c784828501611391565b91505092915050565b5f8115159050919050565b6113e4816113d0565b82525050565b5f6020820190506113fd5f8301846113db565b92915050565b5f819050919050565b61141581611403565b82525050565b5f60208201905061142e5f83018461140c565b92915050565b61143d81611350565b82525050565b5f6020820190506114565f830184611434565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6114858261145c565b9050919050565b6114958161147b565b82525050565b5f6020820190506114ae5f83018461148c565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126114d5576114d46114b4565b5b8235905067ffffffffffffffff8111156114f2576114f16114b8565b5b60208301915083600182028301111561150e5761150d6114bc565b5b9250929050565b5f806020838503121561152b5761152a611348565b5b5f83013567ffffffffffffffff8111156115485761154761134c565b5b611554858286016114c0565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6115a282611560565b6115ac818561156a565b93506115bc81856020860161157a565b6115c581611588565b840191505092915050565b5f6020820190508181035f8301526115e88184611598565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6002811061162e5761162d6115f0565b5b50565b5f81905061163e8261161d565b919050565b5f61164d82611631565b9050919050565b61165d81611643565b82525050565b5f819050919050565b61167581611663565b82525050565b5f60ff82169050919050565b6116908161167b565b82525050565b5f6080820190506116a95f830187611654565b6116b6602083018661166c565b6116c36040830185611687565b6116d0606083018461148c565b95945050505050565b6116e281611643565b82525050565b6116f181611663565b82525050565b6117008161167b565b82525050565b61170f8161147b565b82525050565b608082015f8201516117295f8501826116d9565b50602082015161173c60208501826116e8565b50604082015161174f60408501826116f7565b5060608201516117626060850182611706565b50505050565b5f60808201905061177b5f830184611715565b92915050565b61178a8161147b565b8114611794575f80fd5b50565b5f813590506117a581611781565b92915050565b5f805f604084860312156117c2576117c1611348565b5b5f6117cf86828701611797565b935050602084013567ffffffffffffffff8111156117f0576117ef61134c565b5b6117fc868287016114c0565b92509250509250925092565b5f6020828403121561181d5761181c611348565b5b5f61182a84828501611797565b91505092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61186d82611588565b810181811067ffffffffffffffff8211171561188c5761188b611837565b5b80604052505050565b5f61189e61133f565b90506118aa8282611864565b919050565b5f80fd5b6118bc81611403565b81146118c6575f80fd5b50565b5f813590506118d7816118b3565b92915050565b600281106118e9575f80fd5b50565b5f813590506118fa816118dd565b92915050565b61190981611663565b8114611913575f80fd5b50565b5f8135905061192481611900565b92915050565b6119338161167b565b811461193d575f80fd5b50565b5f8135905061194e8161192a565b92915050565b5f6080828403121561196957611968611833565b5b6119736080611895565b90505f611982848285016118ec565b5f83015250602061199584828501611916565b60208301525060406119a984828501611940565b60408301525060606119bd84828501611797565b60608301525092915050565b5f60e082840312156119de576119dd611833565b5b6119e86080611895565b90505f6119f784828501611797565b5f830152506020611a0a848285016118c9565b6020830152506040611a1e848285016118c9565b6040830152506060611a3284828501611954565b60608301525092915050565b5f60e08284031215611a5357611a52611348565b5b5f611a60848285016119c9565b91505092915050565b5f606082019050611a7c5f83018661148c565b611a89602083018561140c565b611a96604083018461140c565b949350505050565b5f80fd5b5f67ffffffffffffffff821115611abc57611abb611837565b5b611ac582611588565b9050602081019050919050565b828183375f83830152505050565b5f611af2611aed84611aa2565b611895565b905082815260208101848484011115611b0e57611b0d611a9e565b5b611b19848285611ad2565b509392505050565b5f82601f830112611b3557611b346114b4565b5b8135611b45848260208601611ae0565b91505092915050565b5f60408284031215611b6357611b62611833565b5b611b6d6040611895565b90505f611b7c84828501611797565b5f83015250602082013567ffffffffffffffff811115611b9f57611b9e6118af565b5b611bab84828501611b21565b60208301525092915050565b5f60208284031215611bcc57611bcb611348565b5b5f82013567ffffffffffffffff811115611be957611be861134c565b5b611bf584828501611b4e565b91505092915050565b5f81519050611c0c816118b3565b92915050565b5f60208284031215611c2757611c26611348565b5b5f611c3484828501611bfe565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611c7482611403565b9150611c7f83611403565b9250828203905081811115611c9757611c96611c3d565b5b92915050565b5f8160601b9050919050565b5f611cb382611c9d565b9050919050565b5f611cc482611ca9565b9050919050565b611cdc611cd78261147b565b611cba565b82525050565b5f819050919050565b611cfc611cf782611403565b611ce2565b82525050565b5f611d0d8286611ccb565b601482019150611d1d8285611ccb565b601482019150611d2d8284611ceb565b602082019150819050949350505050565b5f611d488261145c565b9050919050565b611d5881611d3e565b8114611d62575f80fd5b50565b5f81359050611d7381611d4f565b92915050565b5f805f60608486031215611d9057611d8f611348565b5b5f611d9d86828701611d65565b9350506020611dae868287016118c9565b9250506040611dbf868287016118c9565b9150509250925092565b611dd281611403565b82525050565b602082015f820151611dec5f850182611dc9565b50505050565b5f602082019050611e055f830184611dd8565b92915050565b60038110611e1c57611e1b6115f0565b5b50565b5f819050611e2c82611e0b565b919050565b5f611e3b82611e1f565b9050919050565b611e4b81611e31565b82525050565b5f82825260208201905092915050565b5f611e6b82611560565b611e758185611e51565b9350611e8581856020860161157a565b611e8e81611588565b840191505092915050565b5f608083015f830151611eae5f860182611e42565b506020830151611ec16020860182611706565b506040830151611ed46040860182611706565b5060608301518482036060860152611eec8282611e61565b9150508091505092915050565b5f6020820190508181035f830152611f118184611e99565b905092915050565b5f60408284031215611f2e57611f2d611833565b5b611f386040611895565b90505f82013567ffffffffffffffff811115611f5757611f566118af565b5b611f6384828501611b21565b5f83015250602082013567ffffffffffffffff811115611f8657611f856118af565b5b611f9284828501611b21565b60208301525092915050565b5f60208284031215611fb357611fb2611348565b5b5f82013567ffffffffffffffff811115611fd057611fcf61134c565b5b611fdc84828501611f19565b91505092915050565b5f611fef82611403565b9150611ffa83611403565b925082820261200881611403565b9150828204841483151761201f5761201e611c3d565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61205d82611403565b915061206883611403565b92508261207857612077612026565b5b828204905092915050565b5f61208d82611403565b915061209883611403565b92508282019050808211156120b0576120af611c3d565b5b9291505056fea26469706673582212201017df038f8aa27029890c981ccc56a5992ab2ef1c76a4865d226eb03eec71bd64736f6c634300081a0033", T = class T extends Qf {
  constructor() {
    super(...arguments), this.abi = q;
  }
  /**
   *Functions from the ERC20VariableIncentive contract
   */
  /**
   * Fetches the IncentiveCriteria struct from the contract
   *
   * @returns {Promise<IncentiveCriteria>} Incentive criteria structure
   * @throws {IncentiveCriteriaNotFoundError}
   */
  async getIncentiveCriteria() {
    try {
      return await cf(
        this._config,
        {
          address: this.assertValidAddress()
        }
      );
    } catch (b) {
      throw new Kf(b);
    }
  }
  /**
   * Fetches the incentive scalar from a transaction hash
   *
   * @param {GetIncentiveScalarParams} params
   * @returns {Promise<bigint>}
   * @throws {InvalidCriteriaTypeError | NoMatchingLogsError | DecodedArgsError}
   */
  async getIncentiveScalar({
    hash: b
  }) {
    var a;
    const f = await this.getIncentiveCriteria(), e = await _f(this._config, {
      hash: b
    });
    if (f.criteriaType === z.EVENT) {
      const d = (await J(this._config, {
        hash: b
      })).logs;
      if (d.length === 0)
        throw new G(
          `No logs found for event signature ${f.signature}`
        );
      try {
        const i = Sf.abi[f.signature], s = S({
          abi: [i],
          logs: d
        });
        if (s == null || s.length === 0)
          throw new G(
            `No logs found for event signature ${f.signature}`
          );
        const n = ((a = s[0]) == null ? void 0 : a.args)[f.fieldIndex];
        if (n === void 0)
          throw new B(
            `Decoded argument at index ${f.fieldIndex} is undefined`
          );
        return BigInt(n);
      } catch (i) {
        throw new B(
          `Failed to decode event log for signature ${f.signature}: ${i.message}`
        );
      }
    } else if (f.criteriaType === z.FUNC)
      try {
        const c = Of.abi[f.signature], i = Ff({
          abi: [c],
          data: e.input
        }).args[f.fieldIndex];
        if (i == null)
          throw new B(
            `Decoded argument at index ${f.fieldIndex} is undefined`
          );
        return BigInt(i);
      } catch (c) {
        throw new B(
          `Failed to decode function data for signature ${f.signature}: ${c.message}`
        );
      }
    else
      throw new Xf(
        `Invalid criteria type ${f.criteriaType}`
      );
  }
  /**
   * @inheritdoc
   *
   * @public
   * @param {?ERC20VariableCriteriaIncentivePayload} [_payload]
   * @param {?DeployableOptions} [_options]
   * @returns {GenericDeployableParams}
   */
  buildParameters(b, f) {
    const [e, a] = this.validateDeploymentConfig(
      b,
      f
    );
    return {
      abi: q,
      bytecode: A0,
      args: [p0(e)],
      ...this.optionallyAttachAccount(a.account)
    };
  }
};
T.bases = {
  ...xf
};
let O = T;
function p0({
  asset: t,
  reward: b,
  limit: f,
  criteria: e
}) {
  return Df(
    [
      {
        type: "tuple",
        name: "initPayloadExtended",
        components: [
          { type: "address", name: "asset" },
          { type: "uint256", name: "reward" },
          { type: "uint256", name: "limit" },
          {
            type: "tuple",
            name: "criteria",
            components: [
              { type: "uint8", name: "criteriaType" },
              { type: "bytes32", name: "signature" },
              { type: "uint8", name: "fieldIndex" },
              { type: "address", name: "targetContract" }
            ]
          }
        ]
      }
    ],
    [
      {
        asset: t,
        reward: b,
        limit: f,
        criteria: {
          criteriaType: e.criteriaType,
          signature: e.signature,
          fieldIndex: e.fieldIndex,
          targetContract: e.targetContract
        }
      }
    ]
  );
}
const Y0 = $f("0.000075"), Z0 = Q[11155111], W = {
  ...Q,
  31337: void 0
};
function _0(t) {
  return t.address;
}
function P0(t) {
  return t.registryAddress && t.protocolFeeReceiver;
}
const L = class L extends kf {
  /**
   * A getter that will return Boost core's static addresses by numerical chain ID
   *
   * @public
   * @readonly
   * @type {Record<number, Address>}
   */
  get addresses() {
    return this.constructor.addresses;
  }
  /**
   * Creates an instance of BoostCore.
   *
   * @constructor
   * @param {BoostCoreConfig} param0
   * @param {Config} param0.config
   * @param {?Account} [param0.account]
   * @param {({ address?: Address; } | { registryAddress: Address; protocolFeeReceiver: Address; })} param0....options
   */
  constructor({ config: b, account: f, ...e }) {
    if (_0(e) && e.address)
      super({ account: f, config: b }, e.address);
    else if (P0(e))
      super({ account: f, config: b }, [
        e.registryAddress,
        e.protocolFeeReceiver
      ]);
    else {
      const { address: a } = l(
        b,
        W
      );
      super({ account: f, config: b }, a);
    }
    this.abi = I;
  }
  /**
   * Create a new Boost.
   *
   * @public
   * @async
   * @param {CreateBoostPayload} _boostPayload
   * @param {?DeployableOptions} [_options]
   * @returns {Promise<Boost>}
   */
  async createBoost(b, f) {
    var M, V;
    const [e, a] = this.validateDeploymentConfig(b, f), c = ((M = f == null ? void 0 : f.chain) == null ? void 0 : M.id) || (f == null ? void 0 : f.chainId), { chainId: d, address: i } = l(
      a.config,
      this.addresses,
      c
    );
    let {
      budget: s,
      action: n,
      validator: o,
      allowList: h,
      incentives: y,
      protocolFee: F = 0n,
      referralFee: D = 0n,
      maxParticipants: $ = 0n,
      owner: C
    } = e;
    const bf = I0({
      abi: I,
      functionName: "createBoost",
      address: i
    });
    if (!C && (C = ((V = this._account) == null ? void 0 : V.address) || Pf(a.config).address || m, C === m))
      throw new Yf();
    o || (o = this.SignerValidator({
      signers: [C],
      validatorCaller: i
    }));
    let j = m;
    if (s.address) {
      if (j = s.address, !await s.isAuthorized(i))
        throw new Zf(i);
    } else
      throw new f0();
    let A = {
      instance: m,
      isBase: !0,
      parameters: u
    };
    if (n.address) {
      const r = n.isBase;
      A = {
        isBase: r,
        instance: n.address,
        parameters: r ? n.buildParameters(void 0, a).args.at(0) || u : u
      };
    } else
      A.parameters = n.buildParameters(void 0, a).args.at(0) || u, A.instance = l(
        a.config,
        n.bases,
        d
      ).address;
    let p = {
      instance: m,
      isBase: !0,
      parameters: u
    };
    if (o.address) {
      const r = o.isBase;
      p = {
        isBase: r,
        instance: o.address,
        parameters: r ? o.buildParameters(void 0, a).args.at(0) || u : u
      };
    } else
      p.parameters = o.buildParameters(void 0, a).args.at(0) || u, p.instance = l(
        a.config,
        o.bases,
        d
      ).address;
    let _ = {
      instance: m,
      isBase: !0,
      parameters: u
    };
    if (h.address) {
      const r = h.isBase;
      _ = {
        isBase: r,
        instance: h.address,
        parameters: r ? u : u
      };
    } else
      _.parameters = h.buildParameters(void 0, a).args.at(0) || u, _.instance = l(
        a.config,
        h.bases,
        d
      ).address;
    const P = y.map(() => ({
      instance: m,
      isBase: !0,
      parameters: u
    }));
    for (let r = 0; r < y.length; r++) {
      const w = y.at(r);
      if (w.address) {
        const N = w.isBase;
        if (!N) throw new b0(w);
        P[r] = {
          isBase: N,
          instance: w.address,
          parameters: N ? w.buildParameters(void 0, a).args.at(0) || u : u
        };
      } else
        P[r].parameters = w.buildParameters(void 0, a).args.at(0) || u, P[r].instance = l(
          a.config,
          w.bases,
          d
        ).address;
    }
    const ef = {
      budget: j,
      action: A,
      validator: p,
      allowList: _,
      incentives: P,
      protocolFee: F,
      referralFee: D,
      maxParticipants: $,
      owner: C
    }, af = await bf(a.config, {
      ...this.optionallyAttachAccount(a.account),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...f,
      chainId: d,
      args: [zf(ef)]
    }), tf = await Ef(a.config, {
      hash: af
    }), E = S({
      abi: I,
      eventName: "BoostCreated",
      logs: tf.logs
    }).at(0);
    let x = 0n;
    if (!E) throw new e0();
    x = E == null ? void 0 : E.args.boostIndex;
    const g = await this.readBoost(x);
    return new U({
      id: x,
      budget: s.at(g.budget),
      action: n.at(g.action),
      validator: o.at(g.validator),
      allowList: h.at(g.allowList),
      incentives: y.map(
        (r, w) => (
          // biome-ignore lint/style/noNonNullAssertion: this will never be undefined
          r.at(g.incentives.at(w))
        )
      ),
      protocolFee: g.protocolFee,
      referralFee: g.referralFee,
      maxParticipants: g.maxParticipants,
      owner: g.owner
    });
  }
  /**
   * Claims one incentive from a given `Boost` by `boostId` and `incentiveId`
   *
   * @public
   * @async
   * @param {bigint} boostId
   * @param {bigint} incentiveId
   * @param {Address} address
   * @param {Hex} data
   * @param {?WriteParams} [params]
   * @returns {Promise<void>}
   */
  async claimIncentive(b, f, e, a, c) {
    return await this.awaitResult(
      this.claimIncentiveRaw(b, f, e, a, c)
    );
  }
  /**
   * Claim an incentive for a Boost
   *
   * @public
   * @async
   * @param {bigint} boostId - The ID of the Boost
   * @param {bigint} incentiveId - The ID of the Incentive
   * @param {Address} referrer - The address of the referrer (if any)
   * @param {Hex} data- The data for the claim
   * @param {?WriteParams} [params]
   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
   */
  async claimIncentiveRaw(b, f, e, a, c) {
    var n;
    const { request: d, result: i } = await df(
      this._config,
      {
        ...l(
          this._config,
          this.addresses,
          ((n = c == null ? void 0 : c.chain) == null ? void 0 : n.id) || (c == null ? void 0 : c.chainId)
        ),
        args: [b, f, e, a],
        ...this.optionallyAttachAccount(),
        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
        ...c
      }
    );
    return { hash: await nf(this._config, d), result: i };
  }
  /**
   * Claims one incentive for a given `Boost` on behalf of another user by `boostId` and `incentiveId`
   *
   * @public
   * @async
   * @param {bigint} boostId
   * @param {bigint} incentiveId
   * @param {Address} referrer
   * @param {Hex} data
   * @param {Address} claimant
   * @param {?WriteParams} [params]
   * @returns {Promise<void>}
   */
  async claimIncentiveFor(b, f, e, a, c, d) {
    return await this.awaitResult(
      this.claimIncentiveForRaw(
        b,
        f,
        e,
        a,
        c,
        d
      )
    );
  }
  /**
   * Claim an incentive for a Boost on behalf of another user
   *
   * @public
   * @async
   * @param {bigint} boostId - The ID of the Boost
   * @param {bigint} incentiveId - The ID of the Incentive
   * @param {Address} referrer - The address of the referrer (if any)
   * @param {Hex} data - The data for the claim
   * @param {Address} claimant - The address of the user eligible for the incentive payout
   * @param {?WriteParams} [params]
   * @returns {Promise<{ hash: Hex; result: void; }>}
   */
  async claimIncentiveForRaw(b, f, e, a, c, d) {
    var o;
    const { request: i, result: s } = await sf(
      this._config,
      {
        ...l(
          this._config,
          this.addresses,
          ((o = d == null ? void 0 : d.chain) == null ? void 0 : o.id) || (d == null ? void 0 : d.chainId)
        ),
        args: [b, f, e, a, c],
        ...this.optionallyAttachAccount(),
        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
        ...d
      }
    );
    return { hash: await of(this._config, i), result: s };
  }
  /**
   * Get a Boost by index, will return the raw on chain representation of a Boost.
   *
   * @public
   * @async
   * @param {bigint} id
   * @param {?ReadParams} [params]
   * @returns {Promise<RawBoost>}
   */
  async readBoost(b, f) {
    return await rf(this._config, {
      address: this.assertValidAddress(),
      args: [b],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...f
    });
  }
  /**
   * Get a Boost by index, will return a new {@link Boost} with correct target implementations instantiated, ie `(await core.getBoost(0n)).allowList instanceof SimpleAllowList` vs `SimpleDenyList`
   *
   * @public
   * @async
   * @param {(string | bigint)} _id
   * @param {?ReadParams} [params]
   * @returns {Promise<Boost>}
   */
  async getBoost(b, f) {
    let e;
    typeof b == "string" ? e = BigInt(b) : e = b;
    const {
      protocolFee: a,
      referralFee: c,
      maxParticipants: d,
      owner: i,
      ...s
    } = await this.readBoost(e, f), n = {
      config: this._config,
      account: this._account
    }, [o, h, y, F, D] = await Promise.all([
      Nf(n, s.action),
      Uf(n, s.budget),
      n0(n, s.validator),
      Lf(n, s.allowList),
      Promise.all(
        s.incentives.map(
          ($) => a0(n, $)
        )
      )
    ]);
    return new U({
      id: e,
      action: o,
      budget: h,
      validator: y,
      allowList: F,
      incentives: D,
      protocolFee: a,
      referralFee: c,
      maxParticipants: d,
      owner: i
    });
  }
  /**
   * Retrieve the total number of deployed Boosts
   *
   * @public
   * @async
   * @param {?ReadParams} [params]
   * @returns {Promise<bigint>}
   */
  async getBoostCount(b) {
    return await uf(this._config, {
      ...l(
        this._config,
        this.addresses,
        b == null ? void 0 : b.chainId
      ),
      args: [],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...b
    });
  }
  /**
   * Checks if an address is authorized
   *
   * @public
   * @async
   * @param {Address} address
   * @param {?ReadParams &
   *       ReadParams<typeof iAuthAbi, 'isAuthorized'>} [params]
   * @returns {Promise<boolean>}
   */
  async isAuthorized(b, f) {
    const e = await this.createBoostAuth(f);
    return lf(this._config, {
      address: e,
      args: [b],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...f
    });
  }
  /**
   * Retrieve the address of the current creation auth provider.
   *
   * @public
   * @async
   * @param {?ReadParams} [params]
   * @returns {Promise<Address>}
   */
  async createBoostAuth(b) {
    return await hf(this._config, {
      ...l(
        this._config,
        this.addresses,
        b == null ? void 0 : b.chainId
      ),
      args: [],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...b
    });
  }
  /**
   *  Replace the current auth scheme.
   *
   * @public
   * @async
   * @param {Auth} auth
   * @param {?WriteParams} [params]
   * @returns {Promise<void>}
   */
  async setCreateBoostAuth(b, f) {
    return await this.awaitResult(
      this.setCreateBoostAuthRaw(b.assertValidAddress(), {
        ...f
      })
    );
  }
  /**
   * Set the createBoostAuth address
   *
   * @public
   * @async
   * @param {Address} address
   * @param {?WriteParams} [params]
   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
   */
  async setCreateBoostAuthRaw(b, f) {
    const { request: e, result: a } = await gf(
      this._config,
      {
        ...l(
          this._config,
          this.addresses,
          f == null ? void 0 : f.chainId
        ),
        args: [b],
        ...this.optionallyAttachAccount(),
        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
        ...f
      }
    );
    return { hash: await wf(this._config, e), result: a };
  }
  /**
   * Get the protocol fee.
   *
   * @public
   * @async
   * @param {?ReadParams} [params]
   * @returns {unknown}
   */
  async protocolFee(b) {
    return await yf(this._config, {
      ...l(
        this._config,
        this.addresses,
        b == null ? void 0 : b.chainId
      ),
      args: [],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...b
    });
  }
  /**
   * Get the protocol fee receiver.
   *
   * @public
   * @async
   * @param {?ReadParams} [params]
   * @returns {Promise<Address>}
   */
  async protocolFeeReceiver(b) {
    return await mf(this._config, {
      ...l(
        this._config,
        this.addresses,
        b == null ? void 0 : b.chainId
      ),
      args: [],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...b
    });
  }
  /**
   * Set the protocol fee receiver address. This function is only callable by the owner.
   *
   * @public
   * @async
   * @param {Address} address
   * @param {?WriteParams} [params]
   * @returns {Promise<void>}
   */
  async setProcolFeeReceiver(b, f) {
    return await this.awaitResult(
      this.setProcolFeeReceiverRaw(b, {
        ...f
      })
    );
  }
  /**
   * Set the protocol fee receiver address. This function is only callable by the owner.
   *
   * @public
   * @async
   * @param {Address} address
   * @param {?WriteParams} [params]
   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
   */
  async setProcolFeeReceiverRaw(b, f) {
    const { request: e, result: a } = await vf(
      this._config,
      {
        ...l(
          this._config,
          this.addresses,
          f == null ? void 0 : f.chainId
        ),
        args: [b],
        ...this.optionallyAttachAccount(),
        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
        ...f
      }
    );
    return { hash: await Cf(
      this._config,
      e
    ), result: a };
  }
  /**
   * Get the claim fee.
   *
   * @public
   * @async
   * @param {?ReadParams} [params]
   * @returns {Promise<bigint>}
   */
  async claimFee(b) {
    return await If(this._config, {
      ...l(
        this._config,
        this.addresses,
        b == null ? void 0 : b.chainId
      ),
      args: [],
      ...this.optionallyAttachAccount(),
      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
      ...b
    });
  }
  /**
   * Sets the claim fee.
   *
   * @public
   * @async
   * @param {bigint} claimFee
   * @param {?WriteParams} [params]
   * @returns {Promise<void>}
   */
  async setClaimFee(b, f) {
    return await this.awaitResult(this.setClaimFeeRaw(b, f));
  }
  /**
   * Sets the claim fee.
   *
   * @public
   * @async
   * @param {bigint} claimFee
   * @param {?WriteParams} [params]
   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
   */
  async setClaimFeeRaw(b, f) {
    const { request: e, result: a } = await Af(
      this._config,
      {
        ...l(
          this._config,
          this.addresses,
          f == null ? void 0 : f.chainId
        ),
        args: [b],
        ...this.optionallyAttachAccount(),
        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally
        ...f
      }
    );
    return { hash: await pf(this._config, e), result: a };
  }
  /**
   * Retrieves the claim information from a transaction receipt.
   *
   * @param {GetTransactionReceiptParameters} params - The parameters required to get the transaction receipt.
   * @returns {Promise<{ boostId: bigint, incentiveId: bigint, claimer: Address, amount: bigint } | undefined>} The claim information if found, undefined otherwise.
   *
   * @description
   * This method retrieves the transaction receipt using the provided parameters,
   * then parses the logs to find the 'BoostClaimed' event.
   * If found, it returns the arguments of the event, which include the boost ID,
   * incentive ID, claimer address, and claimed amount.
   *
   * @example
   * ```ts
   * const claimInfo = await boostCore.getClaimFromTransaction({
   *   hash: '0x...',
   *   chainId: 1
   * });
   * if (claimInfo) {
   *   console.log(`Boost ${claimInfo.boostId} claimed by ${claimInfo.claimer}`);
   * }
   * ```
   */
  async getClaimFromTransaction(b) {
    var a;
    const f = await J(this._config, b);
    return (a = S({
      abi: I,
      eventName: "BoostClaimed",
      logs: f.logs
    }).at(0)) == null ? void 0 : a.args;
  }
  /**
   * Bound {@link PassthroughAuth} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const auth = core.PassthroughAuth('0x') // is roughly equivalent to
   * const auth = new PassthroughAuth({ config: core._config, account: core._account }, '0x')
   * ```
   * @param {Address} address
   * @returns {PassthroughAuth}
   */
  PassthroughAuth(b) {
    return new qf(
      { config: this._config, account: this._account },
      b
    );
  }
  // /**
  //  * Bound {@link ContractAction} constructor that reuses the same configuration as the Boost Core instance.
  //  *
  //  * @example
  //  * ```ts
  //  * const action = core.ContractAction('0x') // is roughly equivalent to
  //  * const action = new ContractAction({ config: core._config, account: core._account }, '0x')
  //  * ```
  //  * @param {DeployablePayloadOrAddress<ContractActionPayload>} options
  //  * @param {?boolean} [isBase]
  //  * @returns {ContractAction}
  //  */
  // ContractAction(
  //   options: DeployablePayloadOrAddress<ContractActionPayload>,
  //   isBase?: boolean,
  // ) {
  //   return new ContractAction(
  //     { config: this._config, account: this._account },
  //     options,
  //     isBase,
  //   );
  // }
  /**
   * Bound {@link EventAction} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const action = core.EventAction('0x') // is roughly equivalent to
   * const action = new EventAction({ config: core._config, account: core._account }, '0x')
   */
  EventAction(b, f) {
    return new Tf(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  // /**
  //  * Bound {@link ERC721MintAction} constructor that reuses the same configuration as the Boost Core instance.
  //  *
  //  * @example
  //  * ```ts
  //  * const action = core.ERC721MintAction('0x') // is roughly equivalent to
  //  * const action = new ERC721MintAction({ config: core._config, account: core._account }, '0x')
  //  * ```
  //  * @param {DeployablePayloadOrAddress<ERC721MintActionPayload>} options
  //  * @param {?boolean} [isBase]
  //  * @returns {ERC721MintAction}
  //  */
  // ERC721MintAction(
  //   options: DeployablePayloadOrAddress<ERC721MintActionPayload>,
  //   isBase?: boolean,
  // ) {
  //   return new ERC721MintAction(
  //     { config: this._config, account: this._account },
  //     options,
  //     isBase,
  //   );
  // }
  /**
   * Bound {@link OpenAllowList} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const list = core.OpenAllowList('0x') // is roughly equivalent to
   * const list = new OpenAllowList({ config: core._config, account: core._account }, '0x')
   * ```
   * @param {?boolean} [isBase]
   * @returns {OpenAllowList}
   */
  OpenAllowList(b) {
    return new jf(
      { config: this._config, account: this._account },
      void 0,
      b
    );
  }
  /**
   * Bound {@link SimpleAllowList} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const list = core.SimpleAllowList('0x') // is roughly equivalent to
   * const list = new SimpleAllowList({ config: core._config, account: core._account }, '0x')
   * ```
   * @param {DeployablePayloadOrAddress<SimpleAllowListPayload>} options
   * @param {?boolean} [isBase]
   * @returns {SimpleAllowList}
   */
  SimpleAllowList(b, f) {
    return new Mf(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  /**
   * Bound {@link SimpleDenyList} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const list = core.SimpleDenyList('0x') // is roughly equivalent to
   * const list = new SimpleDenyList({ config: core._config, account: core._account }, '0x')
   * ```
   * @param {DeployablePayloadOrAddress<SimpleDenyListPayload>} options
   * @param {?boolean} [isBase]
   * @returns {SimpleDenyList}
   */
  SimpleDenyList(b, f) {
    return new Vf(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  // /**
  //  * Bound {@link SimpleBudget} constructor that reuses the same configuration as the Boost Core instance.
  //  *
  //  * @example
  //  * ```ts
  //  * const budget = core.SimpleBudget('0x') // is roughly equivalent to
  //  * const budget = new SimpleBudget({ config: core._config, account: core._account }, '0x')
  //  * ```
  //  * @param {DeployablePayloadOrAddress<SimpleBudgetPayload>} options
  //  * @returns {SimpleBudget}
  //  */
  // SimpleBudget(options: DeployablePayloadOrAddress<SimpleBudgetPayload>) {
  //   return new SimpleBudget(
  //     { config: this._config, account: this._account },
  //     options,
  //   );
  // }
  /**
   * Bound {@link ManagedBudget} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const budget = core.ManagedBudget('0x') // is roughly equivalent to
   * const budget = new ManagedBudget({ config: core._config, account: core._account }, '0x')
   * ```
   * @param {DeployablePayloadOrAddress<ManagedBudgetPayload>} options
   * @returns {ManagedBudget}
   */
  ManagedBudget(b) {
    return new Gf(
      { config: this._config, account: this._account },
      b
    );
  }
  // /**
  //  * Bound {@link VestingBudget} constructor that reuses the same configuration as the Boost Core instance.
  //  *
  //  * @example
  //  * ```ts
  //  * const budget = core.VestingBudget('0x') // is roughly equivalent to
  //  * const budget = new VestingBudget({ config: core._config, account: core._account }, '0x')
  //  * ```
  //  * @param {DeployablePayloadOrAddress<VestingBudgetPayload>} options
  //  * @returns {VestingBudget}
  //  */
  // VestingBudget(options: DeployablePayloadOrAddress<VestingBudgetPayload>) {
  //   return new VestingBudget(
  //     { config: this._config, account: this._account },
  //     options,
  //   );
  // }
  /**
   * Bound {@link AllowListIncentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const incentive = core.AllowListIncentive({ ... }) // is roughly equivalent to
   * const incentive = new AllowListIncentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {DeployablePayloadOrAddress<VestingBudgetPayload>} options
   * @returns {VestingBudget}
   */
  AllowListIncentive(b) {
    return new Wf(
      { config: this._config, account: this._account },
      b
    );
  }
  /**
   * Bound {@link CGDAIncentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const incentive = core.CGDAIncentive({ ... }) // is roughly equivalent to
   * const incentive = new CGDAIncentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {CGDAIncentivePayload} options
   * @returns {CGDAIncentive}
   */
  CGDAIncentive(b) {
    return new Hf(
      { config: this._config, account: this._account },
      b
    );
  }
  /**
   * Bound {@link ERC20Incentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const incentive = core.ERC20Incentive({ ... }) // is roughly equivalent to
   * const incentive = new ERC20Incentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {ERC20IncentivePayload} options
   * @returns {ERC20Incentive}
   */
  ERC20Incentive(b) {
    return new Jf(
      { config: this._config, account: this._account },
      b
    );
  }
  // /**
  //  * Temporarily disabled until low level ABI encoding bugs are resolved
  //  * Bound {@link ERC1155Incentive} constructor that reuses the same configuration as the Boost Core instance.
  //  *
  //  * @experimental
  //  * @example
  //  * ```ts
  //  * const incentive = core.ERC1155Incentive({ ... }) // is roughly equivalent to
  //  * const incentive = new ERC1155Incentive({ config: core._config, account: core._account }, { ... })
  //  * ```
  //  * @param {ERC1155IncentivePayload} options
  //  * @returns {ERC1155Incentive}
  //  */
  // ERC1155Incentive(options: ERC1155IncentivePayload) {
  //   return new ERC1155Incentive(
  //     { config: this._config, account: this._account },
  //     options,
  //   );
  // }
  /**
   * Bound {@link PointsIncentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const incentive = core.PointsIncentive({ ... }) // is roughly equivalent to
   * const incentive = new PointsIncentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {PointsIncentivePayload} options
   * @returns {PointsIncentive}
   */
  PointsIncentive(b) {
    return new c0(
      { config: this._config, account: this._account },
      b
    );
  }
  /**
   * Bound {@link SignerValidator} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const validator = core.SignerValidator({ ... }) // is roughly equivalent to
   * const validator = new SignerValidator({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {DeployablePayloadOrAddress<SignerValidatorPayload>} options
   * @param {?boolean} [isBase]
   * @returns {SignerValidator}
   */
  SignerValidator(b, f) {
    return new d0(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  /**
   * Bound {@link ERC20VariableCriteriaIncentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const validator = core.ERC20VariableCrtieriaIncentive({ ... }) // is roughly equivalent to
   * const validator = new ERC20VariableCrtieriaIncentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {DeployablePayloadOrAddress<ERC20VariableCrtieriaIncentivePayload>} options
   * @param {?boolean} [isBase]
   * @returns {ERC20VariableCrtieriaIncentive}
   * */
  ERC20VariableCriteriaIncentive(b, f) {
    return new O(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  /**
   * Bound {@link ERC20VariableIncentive} constructor that reuses the same configuration as the Boost Core instance.
   *
   * @example
   * ```ts
   * const validator = core.ERC20VariableIncentive({ ... }) // is roughly equivalent to
   * const validator = new ERC20VariableIncentive({ config: core._config, account: core._account }, { ... })
   * ```
   * @param {DeployablePayloadOrAddress<ERC20VariableIncentivePayload>} options
   * @param {?boolean} [isBase]
   * @returns {ERC20VariableIncentive}
   */
  ERC20VariableIncentive(b, f) {
    return new t0(
      { config: this._config, account: this._account },
      b,
      f
    );
  }
  /**
   * @inheritdoc
   *
   * @public
   * @param {?[Address, Address]} [_payload]
   * @param {?DeployableOptions} [_options]
   * @returns {GenericDeployableParams}
   */
  buildParameters(b, f) {
    const [e, a] = this.validateDeploymentConfig(
      b,
      f
    );
    return {
      abi: I,
      bytecode: u0,
      args: e,
      ...this.optionallyAttachAccount(a.account)
    };
  }
};
L.addresses = W;
let H = L;
export {
  Y0 as B,
  O as E,
  Z0 as a,
  W as b,
  H as c,
  p0 as p
};
//# sourceMappingURL=BoostCore-kwoUw7YE.js.map
