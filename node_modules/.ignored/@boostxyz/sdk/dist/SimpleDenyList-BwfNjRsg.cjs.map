{"version":3,"file":"SimpleDenyList-BwfNjRsg.cjs","sources":["../src/AllowLists/SimpleDenyList.ts"],"sourcesContent":["import {\n  readSimpleAllowListOwner,\n  readSimpleDenyListIsAllowed,\n  simpleDenyListAbi,\n  simulateSimpleDenyListSetDenied,\n  writeSimpleDenyListSetDenied,\n} from '@boostxyz/evm';\nimport { bytecode } from '@boostxyz/evm/artifacts/contracts/allowlists/SimpleDenyList.sol/SimpleDenyList.json';\nimport { getAccount } from '@wagmi/core';\nimport {\n  type Address,\n  type ContractEventName,\n  type Hex,\n  encodeAbiParameters,\n  zeroAddress,\n  zeroHash,\n} from 'viem';\nimport { SimpleDenyList as SimpleDenyListBases } from '../../dist/deployments.json';\nimport type {\n  DeployableOptions,\n  GenericDeployableParams,\n} from '../Deployable/Deployable';\nimport { DeployableTargetWithRBAC } from '../Deployable/DeployableTargetWithRBAC';\nimport { DeployableUnknownOwnerProvidedError } from '../errors';\nimport {\n  type GenericLog,\n  type ReadParams,\n  RegistryType,\n  type WriteParams,\n} from '../utils';\n\nexport { simpleDenyListAbi };\n\n/**\n * Object representation of a {@link SimpleDenyList} initialization payload.\n *\n * @export\n * @interface SimpleDenyListPayload\n * @typedef {SimpleDenyListPayload}\n */\nexport interface SimpleDenyListPayload {\n  /**\n   * The allow list's owner\n   *\n   * @type {Address}\n   */\n  owner: Address;\n  /**\n   * List of denied addresses.\n   *\n   * @type {Address[]}\n   */\n  denied: Address[];\n}\n\n/**\n * A generic `viem.Log` event with support for `SimpleDenyList` event types.\n *\n * @export\n * @typedef {SimpleDenyListLog}\n * @template {ContractEventName<typeof simpleDenyListAbi>} [event=ContractEventName<\n *     typeof simpleDenyListAbi\n *   >]\n */\nexport type SimpleDenyListLog<\n  event extends ContractEventName<typeof simpleDenyListAbi> = ContractEventName<\n    typeof simpleDenyListAbi\n  >,\n> = GenericLog<typeof simpleDenyListAbi, event>;\n\n/**\n * A simple implementation of an AllowList that implicitly allows all addresses except those explicitly added to the deny list\n *\n * @export\n * @class SimpleDenyList\n * @typedef {SimpleDenyList}\n * @extends {DeployableTargetWithRBAC<SimpleDenyListPayload>}\n */\nexport class SimpleDenyList<\n  Payload = SimpleDenyListPayload,\n> extends DeployableTargetWithRBAC<\n  Payload | undefined,\n  typeof simpleDenyListAbi\n> {\n  public override readonly abi = simpleDenyListAbi;\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {Record<number, Address>}\n   */\n  public static override bases: Record<number, Address> = {\n    ...(SimpleDenyListBases as Record<number, Address>),\n  };\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {RegistryType}\n   */\n  public static override registryType: RegistryType = RegistryType.ALLOW_LIST;\n\n  /**\n   * Retrieves the owner\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<Address>} - The address of the owner\n   */\n  public async owner(\n    params?: ReadParams<typeof simpleDenyListAbi, 'owner'>,\n  ): Promise<Address> {\n    return await readSimpleAllowListOwner(this._config, {\n      ...this.optionallyAttachAccount(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n      address: this.assertValidAddress(),\n      args: [],\n    });\n  }\n\n  /**\n   * Check if a user is authorized (i.e. not denied)\n   *\n   * @public\n   * @async\n   * @param {Address} address - The address of the user\n   * @param {?ReadParams} [params]\n   * @returns {Promise<boolean>} - True if the user is authorized\n   */\n  public async isAllowed(\n    address: Address,\n    params?: ReadParams<typeof simpleDenyListAbi, 'isAllowed'>,\n  ): Promise<boolean> {\n    return await readSimpleDenyListIsAllowed(this._config, {\n      address: this.assertValidAddress(),\n      args: [address, zeroHash],\n      ...this.optionallyAttachAccount(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * Set the denied status of a user. The length of the `users_` and `denied_` arrays must be the same. This function can only be called by the owner\n   *\n   * @public\n   * @async\n   * @param {Address[]} addresses - The list of users to update\n   * @param {boolean[]} allowed - The denied status of each user\n   * @param {?WriteParams} [params]\n   * @returns {Promise<void>}\n   */\n  public async setDenied(\n    addresses: Address[],\n    allowed: boolean[],\n    params?: WriteParams<typeof simpleDenyListAbi, 'setDenied'>,\n  ) {\n    return await this.awaitResult(\n      this.setDeniedRaw(addresses, allowed, params),\n    );\n  }\n\n  /**\n   * Set the denied status of a user. The length of the `users_` and `denied_` arrays must be the same. This function can only be called by the owner\n   *\n   * @public\n   * @async\n   * @param {Address[]} addresses - The list of users to update\n   * @param {boolean[]} allowed - The denied status of each user\n   * @param {?WriteParams} [params]\n   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}\n   */\n  public async setDeniedRaw(\n    addresses: Address[],\n    allowed: boolean[],\n    params?: WriteParams<typeof simpleDenyListAbi, 'setDenied'>,\n  ) {\n    const { request, result } = await simulateSimpleDenyListSetDenied(\n      this._config,\n      {\n        address: this.assertValidAddress(),\n        args: [addresses, allowed],\n        ...this.optionallyAttachAccount(),\n        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n        ...(params as any),\n      },\n    );\n    const hash = await writeSimpleDenyListSetDenied(this._config, request);\n    return { hash, result };\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @param {?SimpleDenyListPayload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {GenericDeployableParams}\n   */\n  public override buildParameters(\n    _payload?: Payload,\n    _options?: DeployableOptions,\n  ): GenericDeployableParams {\n    const [p, options] = this.validateDeploymentConfig(_payload, _options);\n    const payload = p as SimpleDenyListPayload;\n    if (!payload.owner || payload.owner === zeroAddress) {\n      const owner = options.account\n        ? options.account.address\n        : options.config\n          ? getAccount(options.config).address\n          : this._account?.address;\n      if (owner) {\n        payload.owner = owner;\n      } else {\n        throw new DeployableUnknownOwnerProvidedError();\n      }\n    }\n    return {\n      abi: simpleDenyListAbi,\n      bytecode: bytecode as Hex,\n      args: [prepareSimpleDenyListPayload(payload)],\n      ...this.optionallyAttachAccount(options.account),\n    };\n  }\n}\n\n/**\n * Given a {@link SimpleDenyListPayload}, properly encode the initialization payload.\n *\n * @param {SimpleDenyListPayload} param0\n * @param {Address} param0.owner - The allow list's owner\n * @param {Address[]} param0.denied - List of denied addresses.\n * @returns {Hex}\n */\nexport function prepareSimpleDenyListPayload({\n  owner,\n  denied,\n}: SimpleDenyListPayload) {\n  return encodeAbiParameters(\n    [\n      { type: 'address', name: 'owner' },\n      { type: 'address[]', name: 'denied' },\n    ],\n    [owner, denied],\n  );\n}\n"],"names":["_SimpleDenyList","DeployableTargetWithRBAC","simpleDenyListAbi","params","readSimpleAllowListOwner","address","readSimpleDenyListIsAllowed","zeroHash","addresses","allowed","request","result","simulateSimpleDenyListSetDenied","writeSimpleDenyListSetDenied","_payload","_options","p","options","payload","zeroAddress","owner","getAccount","_a","DeployableUnknownOwnerProvidedError","bytecode","prepareSimpleDenyListPayload","SimpleDenyListBases","RegistryType","SimpleDenyList","denied","encodeAbiParameters"],"mappings":"qnaA8EaA,EAAN,MAAMA,UAEHC,EAAAA,wBAGR,CALK,aAAA,CAAA,MAAA,GAAA,SAAA,EAML,KAAyB,IAAMC,GAAA,CA4B/B,MAAa,MACXC,EACkB,CACX,OAAA,MAAMC,EAAAA,GAAyB,KAAK,QAAS,CAClD,GAAG,KAAK,wBAAwB,EAEhC,GAAID,EACJ,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAAC,CAAA,CACR,CACH,CAWA,MAAa,UACXE,EACAF,EACkB,CACX,OAAA,MAAMG,EAAAA,GAA4B,KAAK,QAAS,CACrD,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAACD,EAASE,UAAQ,EACxB,GAAG,KAAK,wBAAwB,EAEhC,GAAIJ,CAAA,CACL,CACH,CAYA,MAAa,UACXK,EACAC,EACAN,EACA,CACA,OAAO,MAAM,KAAK,YAChB,KAAK,aAAaK,EAAWC,EAASN,CAAM,CAAA,CAEhD,CAYA,MAAa,aACXK,EACAC,EACAN,EACA,CACA,KAAM,CAAE,QAAAO,EAAS,OAAAC,CAAO,EAAI,MAAMC,EAAA,GAChC,KAAK,QACL,CACE,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAACJ,EAAWC,CAAO,EACzB,GAAG,KAAK,wBAAwB,EAEhC,GAAIN,CACN,CAAA,EAGK,MAAA,CAAE,KADI,MAAMU,EAA6B,GAAA,KAAK,QAASH,CAAO,EACtD,OAAAC,EACjB,CAUgB,gBACdG,EACAC,EACyB,OACzB,KAAM,CAACC,EAAGC,CAAO,EAAI,KAAK,yBAAyBH,EAAUC,CAAQ,EAC/DG,EAAUF,EAChB,GAAI,CAACE,EAAQ,OAASA,EAAQ,QAAUC,EAAAA,YAAa,CACnD,MAAMC,EAAQH,EAAQ,QAClBA,EAAQ,QAAQ,QAChBA,EAAQ,OACNI,EAAA,WAAWJ,EAAQ,MAAM,EAAE,SAC3BK,EAAA,KAAK,WAAL,YAAAA,EAAe,QACrB,GAAIF,EACFF,EAAQ,MAAQE,MAEhB,OAAM,IAAIG,EAAoC,mCAElD,CACO,MAAA,CACL,IAAKrB,EAAA,EACL,SAAAsB,EACA,KAAM,CAACC,EAA6BP,CAAO,CAAC,EAC5C,GAAG,KAAK,wBAAwBD,EAAQ,OAAO,CAAA,CAEnD,CACF,EAxIEjB,EAAuB,MAAiC,CACtD,GAAI0B,EAAA,cAAA,EASN1B,EAAuB,aAA6B2B,EAAa,aAAA,WAxB5D,IAAMC,EAAN5B,EAgKA,SAASyB,EAA6B,CAC3C,MAAAL,EACA,OAAAS,CACF,EAA0B,CACjB,OAAAC,EAAA,oBACL,CACE,CAAE,KAAM,UAAW,KAAM,OAAQ,EACjC,CAAE,KAAM,YAAa,KAAM,QAAS,CACtC,EACA,CAACV,EAAOS,CAAM,CAAA,CAElB"}