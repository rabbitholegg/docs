import { encodeAbiParameters as t, parseAbiParameters as n, zeroAddress as d } from "viem";
var u = /* @__PURE__ */ ((a) => (a[a.ETH = 0] = "ETH", a[a.ERC20 = 1] = "ERC20", a[a.ERC1155 = 2] = "ERC1155", a))(u || {});
const y = ({
  assetType: a,
  address: e,
  target: r,
  data: s
}) => t(
  [
    { type: "uint8", name: "assetType" },
    { type: "address", name: "asset" },
    { type: "address", name: "target" },
    { type: "bytes", name: "data" }
  ],
  [a, e, r, s]
);
function o({ tokenId: a, amount: e }) {
  return t(
    n([
      "ERC1155Payload payload",
      "struct ERC1155Payload { uint256 tokenId; uint256 amount; bytes data; }"
    ]),
    [{ tokenId: a, amount: e, data: "0x" }]
  );
}
function l({
  tokenId: a,
  amount: e,
  asset: r,
  target: s
}) {
  return t(
    n([
      "Transfer request",
      "struct Transfer { uint8 assetType; address asset; address target; bytes data; }"
    ]),
    [
      {
        assetType: 2,
        asset: r,
        data: o({ tokenId: a, amount: e }),
        target: s
      }
    ]
  );
}
function p({ amount: a }) {
  return t(
    n([
      "FungiblePayload payload",
      "struct FungiblePayload { uint256 amount; }"
    ]),
    [{ amount: a }]
  );
}
function f({
  amount: a,
  asset: e,
  target: r
}) {
  return t(
    n([
      "Transfer request",
      "struct Transfer { uint8 assetType; address asset; address target; bytes data; }"
    ]),
    [
      {
        assetType: e == d ? 0 : 1,
        asset: e,
        data: p({ amount: a }),
        target: r
      }
    ]
  );
}
export {
  u as AssetType,
  o as prepareERC1155Payload,
  l as prepareERC1155Transfer,
  p as prepareFungiblePayload,
  f as prepareFungibleTransfer,
  y as prepareTransferPayload
};
//# sourceMappingURL=transfers.js.map
