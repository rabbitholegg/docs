{"version":3,"file":"AllowList.js","sources":["../../src/AllowLists/OpenAllowList.ts","../../src/AllowLists/AllowList.ts"],"sourcesContent":["import { simpleDenyListAbi } from '@boostxyz/evm';\nimport { bytecode } from '@boostxyz/evm/artifacts/contracts/allowlists/SimpleDenyList.sol/SimpleDenyList.json';\nimport { type Hex, zeroAddress } from 'viem';\nimport type {\n  DeployableOptions,\n  GenericDeployableParams,\n} from '../Deployable/Deployable';\nimport {\n  SimpleDenyList,\n  type SimpleDenyListPayload,\n  prepareSimpleDenyListPayload,\n} from './SimpleDenyList';\n\nexport const openAllowListAbi = simpleDenyListAbi;\n\n/**\n * A simple AllowList, extending {@link DenyList}, that is ownerless and allows anyone to claim.\n *\n * @export\n * @class OpenAllowList\n * @typedef {OpenAllowList}\n * @extends {DeployableTarget<OpenAllowListPayload>}\n */\nexport class OpenAllowList extends SimpleDenyList<undefined> {\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @param {?SimpleDenyListPayload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {GenericDeployableParams}\n   */\n  public override buildParameters(\n    _payload?: SimpleDenyListPayload,\n    _options?: DeployableOptions,\n  ): GenericDeployableParams {\n    const [_, options] = this.validateDeploymentConfig({}, _options);\n    return {\n      abi: openAllowListAbi,\n      bytecode: bytecode as Hex,\n      args: [prepareSimpleDenyListPayload({ owner: zeroAddress, denied: [] })],\n      ...this.optionallyAttachAccount(options.account),\n    };\n  }\n}\n","import { aAllowListAbi } from '@boostxyz/evm';\nimport {\n  ASimpleAllowList,\n  ASimpleDenyList,\n} from '@boostxyz/evm/deploys/componentInterfaces.json';\nimport { readContract } from '@wagmi/core';\nimport type { Address, Hex } from 'viem';\nimport type { DeployableOptions } from '../Deployable/Deployable';\nimport { InvalidComponentInterfaceError } from '../errors';\nimport { OpenAllowList } from './OpenAllowList';\nimport { SimpleAllowList } from './SimpleAllowList';\nimport { SimpleDenyList } from './SimpleDenyList';\n\nexport { OpenAllowList, SimpleAllowList, SimpleDenyList };\n\n/**\n * A union type representing all valid protocol AllowList implementations\n *\n * @export\n * @typedef {AllowList}\n */\nexport type AllowList = OpenAllowList | SimpleAllowList | SimpleDenyList;\n\n/**\n * A map of AllowList component interfaces to their constructors.\n *\n * @type {{ \"0x2bc9016b\": SimpleAllowList; \"0x9d585f63\": SimpleDenyList; }}\n */\nexport const AllowListByComponentInterface = {\n  [ASimpleAllowList as Hex]: SimpleAllowList,\n  [ASimpleDenyList as Hex]: SimpleDenyList,\n};\n\n/**\n * A function that will read a contract's component interface using `getComponentInterface` and return the correct instantiated instance.\n * This function will never return an instance of {@link OpenAllowList} because it has the same component interface as {@link SimpleDenyList}\n *\n * @export\n * @async\n * @param {DeployableOptions} options\n * @param {Address} address\n * @returns {Promise<SimpleAllowList | SimpleDenyList>}\n * @throws {@link InvalidComponentInterfaceError}\n */\nexport async function allowListFromAddress(\n  options: DeployableOptions,\n  address: Address,\n) {\n  const interfaceId = (await readContract(options.config, {\n    abi: aAllowListAbi,\n    functionName: 'getComponentInterface',\n    address,\n  })) as keyof typeof AllowListByComponentInterface;\n  const Ctor = AllowListByComponentInterface[interfaceId];\n  if (!Ctor) {\n    throw new InvalidComponentInterfaceError(\n      Object.keys(AllowListByComponentInterface) as Hex[],\n      interfaceId as Hex,\n    );\n  }\n  return new Ctor(options, address) as SimpleDenyList | SimpleAllowList;\n}\n"],"names":["openAllowListAbi","simpleDenyListAbi","OpenAllowList","SimpleDenyList","_payload","_options","_","options","bytecode","prepareSimpleDenyListPayload","zeroAddress","AllowListByComponentInterface","ASimpleAllowList","SimpleAllowList","ASimpleDenyList","allowListFromAddress","address","interfaceId","readContract","aAllowListAbi","Ctor","InvalidComponentInterfaceError"],"mappings":";;;;;;;AAaO,MAAMA,IAAmBC;AAUzB,MAAMC,UAAsBC,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS3C,gBACdC,GACAC,GACyB;AACnB,UAAA,CAACC,GAAGC,CAAO,IAAI,KAAK,yBAAyB,CAAA,GAAIF,CAAQ;AACxD,WAAA;AAAA,MACL,KAAKL;AAAA,MACL,UAAAQ;AAAA,MACA,MAAM,CAACC,EAA6B,EAAE,OAAOC,GAAa,QAAQ,CAAG,EAAA,CAAC,CAAC;AAAA,MACvE,GAAG,KAAK,wBAAwBH,EAAQ,OAAO;AAAA,IAAA;AAAA,EAEnD;AACF;AChBO,MAAMI,IAAgC;AAAA,EAC3C,CAACC,CAAuB,GAAGC;AAAA,EAC3B,CAACC,CAAsB,GAAGX;AAC5B;AAasB,eAAAY,EACpBR,GACAS,GACA;AACA,QAAMC,IAAe,MAAMC,EAAaX,EAAQ,QAAQ;AAAA,IACtD,KAAKY;AAAAA,IACL,cAAc;AAAA,IACd,SAAAH;AAAA,EAAA,CACD,GACKI,IAAOT,EAA8BM,CAAW;AACtD,MAAI,CAACG;AACH,UAAM,IAAIC;AAAA,MACR,OAAO,KAAKV,CAA6B;AAAA,MACzCM;AAAA,IAAA;AAGG,SAAA,IAAIG,EAAKb,GAASS,CAAO;AAClC;"}