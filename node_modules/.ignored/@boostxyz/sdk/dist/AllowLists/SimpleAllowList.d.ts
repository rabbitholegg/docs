import { simpleAllowListAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName } from 'viem';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTargetWithRBAC, Roles } from '../Deployable/DeployableTargetWithRBAC';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
export { simpleAllowListAbi };
/**
 * Object representation of a {@link SimpleAllowList} initialization payload.
 *
 * @export
 * @interface SimpleAllowListPayload
 * @typedef {SimpleAllowListPayload}
 */
export interface SimpleAllowListPayload {
    /**
     * The allow list's owner, given the {@link LIST_MANAGER_ROLE} role.
     *
     * @type {Address}
     */
    owner: Address;
    /**
     * List of allowed addresses.
     *
     * @type {Address[]}
     */
    allowed: Address[];
}
/**
 * A generic `viem.Log` event with support for `SimpleAllowList` event types.
 *
 * @export
 * @typedef {SimpleAllowListLog}
 * @template {ContractEventName<
 *     typeof simpleAllowListAbi
 *   >} [event=ContractEventName<typeof simpleAllowListAbi>]
 */
export type SimpleAllowListLog<event extends ContractEventName<typeof simpleAllowListAbi> = ContractEventName<typeof simpleAllowListAbi>> = GenericLog<typeof simpleAllowListAbi, event>;
/**
 * A constant representing the list manager's role
 *
 * @deprecated use {@link Roles} instead
 * @type {1n}
 */
export declare const LIST_MANAGER_ROLE = Roles.MANAGER;
/**
 * A simple implementation of an AllowList that checks if a user is authorized based on a list of allowed addresses
 *
 * @export
 * @class SimpleAllowList
 * @typedef {SimpleAllowList}
 * @extends {DeployableTargetWithRBAC<SimpleAllowListPayload>}
 */
export declare class SimpleAllowList extends DeployableTargetWithRBAC<SimpleAllowListPayload, typeof simpleAllowListAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "RolesUpdated";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "grantRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accounts_";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "roles_";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "grantRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "hasAllRoles";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "hasAnyRole";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user_";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isAllowed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account_";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isAuthorized";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "renounceRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "revokeRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accounts_";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "roles_";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "revokeRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "rolesOf";
        readonly outputs: readonly [{
            readonly name: "roles";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "users_";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "allowed_";
            readonly internalType: "bool[]";
            readonly type: "bool[]";
        }];
        readonly name: "setAllowed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accounts_";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "authorized_";
            readonly internalType: "bool[]";
            readonly type: "bool[]";
        }];
        readonly name: "setAuthorized";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * Retrieves the owner
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>} - The address of the owner
     */
    owner(params?: ReadParams<typeof simpleAllowListAbi, 'owner'>): Promise<Address>;
    /**
     * Check if a user is authorized.
     *
     * @public
     * @async
     * @param {Address} address - The address of the user
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>} - True if the user is authorized
     */
    isAllowed(address: Address, params?: ReadParams<typeof simpleAllowListAbi, 'setAllowed'>): Promise<boolean>;
    /**
     * Set the allowed status of a user. The length of the `users_` and `allowed_` arrays must be the same.
     * This function can only be called by the owner
     *
     * @public
     * @async
     * @param {Address[]} addresses - The list of users to update
     * @param {boolean[]} allowed - The allowed status of each user
     * @param {?ReadParams} [params]
     * @returns {Promise<void>}
     */
    setAllowed(addresses: Address[], allowed: boolean[], params?: WriteParams<typeof simpleAllowListAbi, 'setAllowed'>): Promise<void>;
    /**
     * Set the allowed status of a user. The length of the `users_` and `allowed_` arrays must be the same.
     * This function can only be called by the owner
     *
     * @public
     * @async
     * @param {Address[]} addresses - The list of users to update
     * @param {boolean[]} allowed - The allowed status of each user
     * @param {?ReadParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: void; }>}
     */
    setAllowedRaw(addresses: Address[], allowed: boolean[], params?: ReadParams<typeof simpleAllowListAbi, 'setAllowed'>): Promise<{
        hash: `0x${string}`;
        result: void;
    }>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?SimpleAllowListPayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: SimpleAllowListPayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Given a {@link SimpleAllowListPayload}, properly encode the initialization payload.
 *
 * @param {SimpleAllowListPayload} param0
 * @param {Address} param0.owner - The allow list's owner, given the {@link LIST_MANAGER_ROLE} role.
 * @param {Address[]} param0.allowed - List of allowed addresses.
 * @returns {Hex}
 */
export declare function prepareSimpleAllowListPayload({ owner, allowed, }: SimpleAllowListPayload): `0x${string}`;
//# sourceMappingURL=SimpleAllowList.d.ts.map