{"version":3,"file":"SimpleDenyList-Cn5WpNn0.js","sources":["../src/AllowLists/SimpleDenyList.ts"],"sourcesContent":["import {\n  readSimpleAllowListOwner,\n  readSimpleDenyListIsAllowed,\n  simpleDenyListAbi,\n  simulateSimpleDenyListSetDenied,\n  writeSimpleDenyListSetDenied,\n} from '@boostxyz/evm';\nimport { bytecode } from '@boostxyz/evm/artifacts/contracts/allowlists/SimpleDenyList.sol/SimpleDenyList.json';\nimport { getAccount } from '@wagmi/core';\nimport {\n  type Address,\n  type ContractEventName,\n  type Hex,\n  encodeAbiParameters,\n  zeroAddress,\n  zeroHash,\n} from 'viem';\nimport { SimpleDenyList as SimpleDenyListBases } from '../../dist/deployments.json';\nimport type {\n  DeployableOptions,\n  GenericDeployableParams,\n} from '../Deployable/Deployable';\nimport { DeployableTargetWithRBAC } from '../Deployable/DeployableTargetWithRBAC';\nimport { DeployableUnknownOwnerProvidedError } from '../errors';\nimport {\n  type GenericLog,\n  type ReadParams,\n  RegistryType,\n  type WriteParams,\n} from '../utils';\n\nexport { simpleDenyListAbi };\n\n/**\n * Object representation of a {@link SimpleDenyList} initialization payload.\n *\n * @export\n * @interface SimpleDenyListPayload\n * @typedef {SimpleDenyListPayload}\n */\nexport interface SimpleDenyListPayload {\n  /**\n   * The allow list's owner\n   *\n   * @type {Address}\n   */\n  owner: Address;\n  /**\n   * List of denied addresses.\n   *\n   * @type {Address[]}\n   */\n  denied: Address[];\n}\n\n/**\n * A generic `viem.Log` event with support for `SimpleDenyList` event types.\n *\n * @export\n * @typedef {SimpleDenyListLog}\n * @template {ContractEventName<typeof simpleDenyListAbi>} [event=ContractEventName<\n *     typeof simpleDenyListAbi\n *   >]\n */\nexport type SimpleDenyListLog<\n  event extends ContractEventName<typeof simpleDenyListAbi> = ContractEventName<\n    typeof simpleDenyListAbi\n  >,\n> = GenericLog<typeof simpleDenyListAbi, event>;\n\n/**\n * A simple implementation of an AllowList that implicitly allows all addresses except those explicitly added to the deny list\n *\n * @export\n * @class SimpleDenyList\n * @typedef {SimpleDenyList}\n * @extends {DeployableTargetWithRBAC<SimpleDenyListPayload>}\n */\nexport class SimpleDenyList<\n  Payload = SimpleDenyListPayload,\n> extends DeployableTargetWithRBAC<\n  Payload | undefined,\n  typeof simpleDenyListAbi\n> {\n  public override readonly abi = simpleDenyListAbi;\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {Record<number, Address>}\n   */\n  public static override bases: Record<number, Address> = {\n    ...(SimpleDenyListBases as Record<number, Address>),\n  };\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {RegistryType}\n   */\n  public static override registryType: RegistryType = RegistryType.ALLOW_LIST;\n\n  /**\n   * Retrieves the owner\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<Address>} - The address of the owner\n   */\n  public async owner(\n    params?: ReadParams<typeof simpleDenyListAbi, 'owner'>,\n  ): Promise<Address> {\n    return await readSimpleAllowListOwner(this._config, {\n      ...this.optionallyAttachAccount(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n      address: this.assertValidAddress(),\n      args: [],\n    });\n  }\n\n  /**\n   * Check if a user is authorized (i.e. not denied)\n   *\n   * @public\n   * @async\n   * @param {Address} address - The address of the user\n   * @param {?ReadParams} [params]\n   * @returns {Promise<boolean>} - True if the user is authorized\n   */\n  public async isAllowed(\n    address: Address,\n    params?: ReadParams<typeof simpleDenyListAbi, 'isAllowed'>,\n  ): Promise<boolean> {\n    return await readSimpleDenyListIsAllowed(this._config, {\n      address: this.assertValidAddress(),\n      args: [address, zeroHash],\n      ...this.optionallyAttachAccount(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * Set the denied status of a user. The length of the `users_` and `denied_` arrays must be the same. This function can only be called by the owner\n   *\n   * @public\n   * @async\n   * @param {Address[]} addresses - The list of users to update\n   * @param {boolean[]} allowed - The denied status of each user\n   * @param {?WriteParams} [params]\n   * @returns {Promise<void>}\n   */\n  public async setDenied(\n    addresses: Address[],\n    allowed: boolean[],\n    params?: WriteParams<typeof simpleDenyListAbi, 'setDenied'>,\n  ) {\n    return await this.awaitResult(\n      this.setDeniedRaw(addresses, allowed, params),\n    );\n  }\n\n  /**\n   * Set the denied status of a user. The length of the `users_` and `denied_` arrays must be the same. This function can only be called by the owner\n   *\n   * @public\n   * @async\n   * @param {Address[]} addresses - The list of users to update\n   * @param {boolean[]} allowed - The denied status of each user\n   * @param {?WriteParams} [params]\n   * @returns {Promise<{ hash: `0x${string}`; result: void; }>}\n   */\n  public async setDeniedRaw(\n    addresses: Address[],\n    allowed: boolean[],\n    params?: WriteParams<typeof simpleDenyListAbi, 'setDenied'>,\n  ) {\n    const { request, result } = await simulateSimpleDenyListSetDenied(\n      this._config,\n      {\n        address: this.assertValidAddress(),\n        args: [addresses, allowed],\n        ...this.optionallyAttachAccount(),\n        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n        ...(params as any),\n      },\n    );\n    const hash = await writeSimpleDenyListSetDenied(this._config, request);\n    return { hash, result };\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @param {?SimpleDenyListPayload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {GenericDeployableParams}\n   */\n  public override buildParameters(\n    _payload?: Payload,\n    _options?: DeployableOptions,\n  ): GenericDeployableParams {\n    const [p, options] = this.validateDeploymentConfig(_payload, _options);\n    const payload = p as SimpleDenyListPayload;\n    if (!payload.owner || payload.owner === zeroAddress) {\n      const owner = options.account\n        ? options.account.address\n        : options.config\n          ? getAccount(options.config).address\n          : this._account?.address;\n      if (owner) {\n        payload.owner = owner;\n      } else {\n        throw new DeployableUnknownOwnerProvidedError();\n      }\n    }\n    return {\n      abi: simpleDenyListAbi,\n      bytecode: bytecode as Hex,\n      args: [prepareSimpleDenyListPayload(payload)],\n      ...this.optionallyAttachAccount(options.account),\n    };\n  }\n}\n\n/**\n * Given a {@link SimpleDenyListPayload}, properly encode the initialization payload.\n *\n * @param {SimpleDenyListPayload} param0\n * @param {Address} param0.owner - The allow list's owner\n * @param {Address[]} param0.denied - List of denied addresses.\n * @returns {Hex}\n */\nexport function prepareSimpleDenyListPayload({\n  owner,\n  denied,\n}: SimpleDenyListPayload) {\n  return encodeAbiParameters(\n    [\n      { type: 'address', name: 'owner' },\n      { type: 'address[]', name: 'denied' },\n    ],\n    [owner, denied],\n  );\n}\n"],"names":["_SimpleDenyList","DeployableTargetWithRBAC","simpleDenyListAbi","params","readSimpleAllowListOwner","address","readSimpleDenyListIsAllowed","zeroHash","addresses","allowed","request","result","simulateSimpleDenyListSetDenied","writeSimpleDenyListSetDenied","_payload","_options","p","options","payload","zeroAddress","owner","getAccount","_a","DeployableUnknownOwnerProvidedError","bytecode","prepareSimpleDenyListPayload","SimpleDenyListBases","RegistryType","SimpleDenyList","denied","encodeAbiParameters"],"mappings":";;;;;;;w4ZA8EaA,IAAN,MAAMA,UAEHC,EAGR;AAAA,EALK,cAAA;AAAA,UAAA,GAAA,SAAA,GAML,KAAyB,MAAMC;AAAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4B/B,MAAa,MACXC,GACkB;AACX,WAAA,MAAMC,EAAyB,KAAK,SAAS;AAAA,MAClD,GAAG,KAAK,wBAAwB;AAAA;AAAA,MAEhC,GAAID;AAAA,MACJ,SAAS,KAAK,mBAAmB;AAAA,MACjC,MAAM,CAAC;AAAA,IAAA,CACR;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAa,UACXE,GACAF,GACkB;AACX,WAAA,MAAMG,EAA4B,KAAK,SAAS;AAAA,MACrD,SAAS,KAAK,mBAAmB;AAAA,MACjC,MAAM,CAACD,GAASE,CAAQ;AAAA,MACxB,GAAG,KAAK,wBAAwB;AAAA;AAAA,MAEhC,GAAIJ;AAAA,IAAA,CACL;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAa,UACXK,GACAC,GACAN,GACA;AACA,WAAO,MAAM,KAAK;AAAA,MAChB,KAAK,aAAaK,GAAWC,GAASN,CAAM;AAAA,IAAA;AAAA,EAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAa,aACXK,GACAC,GACAN,GACA;AACA,UAAM,EAAE,SAAAO,GAAS,QAAAC,EAAO,IAAI,MAAMC;AAAAA,MAChC,KAAK;AAAA,MACL;AAAA,QACE,SAAS,KAAK,mBAAmB;AAAA,QACjC,MAAM,CAACJ,GAAWC,CAAO;AAAA,QACzB,GAAG,KAAK,wBAAwB;AAAA;AAAA,QAEhC,GAAIN;AAAA,MACN;AAAA,IAAA;AAGK,WAAA,EAAE,MADI,MAAMU,EAA6B,KAAK,SAASH,CAAO,GACtD,QAAAC;EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUgB,gBACdG,GACAC,GACyB;;AACzB,UAAM,CAACC,GAAGC,CAAO,IAAI,KAAK,yBAAyBH,GAAUC,CAAQ,GAC/DG,IAAUF;AAChB,QAAI,CAACE,EAAQ,SAASA,EAAQ,UAAUC,GAAa;AACnD,YAAMC,IAAQH,EAAQ,UAClBA,EAAQ,QAAQ,UAChBA,EAAQ,SACNI,EAAWJ,EAAQ,MAAM,EAAE,WAC3BK,IAAA,KAAK,aAAL,gBAAAA,EAAe;AACrB,UAAIF;AACF,QAAAF,EAAQ,QAAQE;AAAA;AAEhB,cAAM,IAAIG,EAAoC;AAAA,IAElD;AACO,WAAA;AAAA,MACL,KAAKrB;AAAAA,MACL,UAAAsB;AAAA,MACA,MAAM,CAACC,EAA6BP,CAAO,CAAC;AAAA,MAC5C,GAAG,KAAK,wBAAwBD,EAAQ,OAAO;AAAA,IAAA;AAAA,EAEnD;AACF;AAxIEjB,EAAuB,QAAiC;AAAA,EACtD,GAAI0B;AAAA,GASN1B,EAAuB,eAA6B2B,EAAa;AAxB5D,IAAMC,IAAN5B;AAgKA,SAASyB,EAA6B;AAAA,EAC3C,OAAAL;AAAA,EACA,QAAAS;AACF,GAA0B;AACjB,SAAAC;AAAA,IACL;AAAA,MACE,EAAE,MAAM,WAAW,MAAM,QAAQ;AAAA,MACjC,EAAE,MAAM,aAAa,MAAM,SAAS;AAAA,IACtC;AAAA,IACA,CAACV,GAAOS,CAAM;AAAA,EAAA;AAElB;"}