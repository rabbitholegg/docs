import { cgdaIncentiveAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName } from 'viem';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import { type ClaimPayload } from '../claiming';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
export { cgdaIncentiveAbi };
/**
 * The object representation of a `CGDAIncentive.InitPayload`
 *
 * @export
 * @interface CGDAIncentivePayload
 * @typedef {CGDAIncentivePayload}
 */
export interface CGDAIncentivePayload {
    /**
     * The address of the ERC20-like token
     *
     * @type {Address}
     */
    asset: Address;
    /**
     * The initial reward amount
     *
     * @type {bigint}
     */
    initialReward: bigint;
    /**
     * The amount to subtract from the current reward after each claim
     *
     * @type {bigint}
     */
    rewardDecay: bigint;
    /**
     * The amount by which the reward increases for each hour without a claim (continuous linear increase)
     *
     * @type {bigint}
     */
    rewardBoost: bigint;
    /**
     * The total budget for the incentive
     *
     * @type {bigint}
     */
    totalBudget: bigint;
}
/**
 *  The configuration parameters for the CGDAIncentive
 *
 * @export
 * @interface CGDAParameters
 * @typedef {CGDAParameters}
 */
export interface CGDAParameters {
    /**
     * The amount to subtract from the current reward after each claim
     *
     * @type {bigint}
     */
    rewardDecay: bigint;
    /**
     * The amount by which the reward increases for each hour without a claim (continuous linear increase)
     *
     * @type {bigint}
     */
    rewardBoost: bigint;
    /**
     * The timestamp of the last claim
     *
     * @type {bigint}
     */
    lastClaimTime: bigint;
    /**
     * The current reward amount
     *
     * @type {bigint}
     */
    currentReward: bigint;
}
/**
 * A generic `viem.Log` event with support for `CGDAIncentive` event types.
 *
 * @export
 * @typedef {CGDAIncentiveLog}
 * @template {ContractEventName<typeof cgdaIncentiveAbi>} [event=ContractEventName<
 *     typeof cgdaIncentiveAbi
 *   >]
 */
export type CGDAIncentiveLog<event extends ContractEventName<typeof cgdaIncentiveAbi> = ContractEventName<typeof cgdaIncentiveAbi>> = GenericLog<typeof cgdaIncentiveAbi, event>;
/**
 * Continuous Gradual Dutch Auction Incentive.
 * An CGDA incentive implementation with reward amounts adjusting dynamically based on claim volume.
 *
 * @export
 * @class CGDAIncentive
 * @typedef {CGDAIncentive}
 * @extends {DeployableTarget<CGDAIncentivePayload>}
 */
export declare class CGDAIncentive extends DeployableTarget<CGDAIncentivePayload, typeof cgdaIncentiveAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "asset";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotClaimable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "Claimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "asset";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cgdaParams";
        readonly outputs: readonly [{
            readonly name: "rewardDecay";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "rewardBoost";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lastClaimTime";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "claim";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "claims";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "clawback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "currentReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isClaimable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preflight";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "reward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalBudget";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * The incentive's owner.
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    owner(params?: ReadParams<typeof cgdaIncentiveAbi, 'owner'>): Promise<`0x${string}`>;
    /**
     * The number of claims that have been made
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    claims(params?: ReadParams<typeof cgdaIncentiveAbi, 'claims'>): Promise<bigint>;
    /**
     * The reward amount issued for each claim
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    reward(params?: ReadParams<typeof cgdaIncentiveAbi, 'reward'>): Promise<bigint>;
    /**
     * Get the claim status for a user
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    claimed(address: Address, params?: ReadParams<typeof cgdaIncentiveAbi, 'claimed'>): Promise<boolean>;
    /**
     * The CGDA-like token used for the incentive
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    asset(params?: ReadParams<typeof cgdaIncentiveAbi, 'asset'>): Promise<`0x${string}`>;
    /**
     * The configuration parameters for the CGDAIncentive
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<CGDAParameters>}
     */
    cgdaParams(params?: ReadParams<typeof cgdaIncentiveAbi, 'cgdaParams'>): Promise<CGDAParameters>;
    /**
     * The total budget of the incentive
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    totalBudget(params?: ReadParams<typeof cgdaIncentiveAbi, 'totalBudget'>): Promise<bigint>;
    /**
     * Claim the incentive
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>} - Returns true if successfully claimed
     */
    protected claim(payload: ClaimPayload, params?: WriteParams<typeof cgdaIncentiveAbi, 'claim'>): Promise<boolean>;
    /**
     * Claim the incentive
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>} - Returns true if successfully claimed
     */
    protected claimRaw(payload: ClaimPayload, params?: WriteParams<typeof cgdaIncentiveAbi, 'claim'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * Clawback assets from the incentive
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>} -  True if the assets were successfully clawbacked
     */
    clawback(payload: ClaimPayload, params?: WriteParams<typeof cgdaIncentiveAbi, 'clawback'>): Promise<boolean>;
    /**
     * Clawback assets from the incentive
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<boolean>} -  True if the assets were successfully clawbacked
     */
    clawbackRaw(payload: ClaimPayload, params?: WriteParams<typeof cgdaIncentiveAbi, 'clawback'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * Check if an incentive is claimable
     *
     * @public
     * @async
     * @param {ClaimPayload} payload
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>} - True if the incentive is claimable based on the data payload
     */
    isClaimable(payload: ClaimPayload, params?: ReadParams<typeof cgdaIncentiveAbi, 'isClaimable'>): Promise<boolean>;
    /**
     * Calculates the current reward based on the time since the last claim.
     * The reward is calculated based on the time since the last claim, the available budget, and the reward parameters. It increases linearly over time in the absence of claims, with each hour adding `rewardBoost` to the current reward, up to the available budget.
     * For example, if there is one claim in the first hour, then no claims for three hours, the claimable reward would be `initialReward - rewardDecay + (rewardBoost * 3)`
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>} - The current reward
     */
    currentReward(params?: ReadParams<typeof cgdaIncentiveAbi, 'currentReward'>): Promise<bigint>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?CGDAIncentivePayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: CGDAIncentivePayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Given a {@link CGDAIncentivePayload}, properly encode a `CGDAIncentive.InitPayload` for use with {@link CGDAIncentive} initialization.
 *
 * @param {CGDAIncentivePayload} param0
 * @param {Address} param0.asset - The address of the ERC20-like token
 * @param {bigint} param0.initialReward - The initial reward amount
 * @param {bigint} param0.rewardDecay - The amount to subtract from the current reward after each claim
 * @param {bigint} param0.rewardBoost - The amount by which the reward increases for each hour without a claim (continuous linear increase)
 * @param {bigint} param0.totalBudget - The total budget for the incentive
 * @returns {Hex}
 */
export declare function prepareCGDAIncentivePayload({ asset, initialReward, rewardDecay, rewardBoost, totalBudget, }: CGDAIncentivePayload): `0x${string}`;
//# sourceMappingURL=CGDAIncentive.d.ts.map