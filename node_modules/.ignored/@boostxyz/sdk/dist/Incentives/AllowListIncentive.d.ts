import { allowListIncentiveAbi } from '@boostxyz/evm';
import { type Address, type ContractEventName } from 'viem';
import { SimpleAllowList } from '../AllowLists/AllowList';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import { type ClaimPayload } from '../claiming';
import { type GenericLog, type ReadParams, RegistryType, type WriteParams } from '../utils';
export { allowListIncentiveAbi };
/**
 * The object representation of a `AllowListIncentive.InitPayload`
 *
 * @export
 * @interface AllowListIncentivePayload
 * @typedef {AllowListIncentivePayload}
 */
export interface AllowListIncentivePayload {
    /**
     * The address to the allowlist to add claimers to.
     *
     * @type {Address}
     */
    allowList: Address;
    /**
     *  The maximum number of claims that can be made (one per address)
     *
     * @type {bigint}
     */
    limit: bigint;
}
/**
 * A generic `viem.Log` event with support for `AllowListIncentive` event types.
 *
 * @export
 * @typedef {AllowListIncentiveLog}
 * @template {ContractEventName<
 *     typeof allowListIncentiveAbi
 *   >} [event=ContractEventName<typeof allowListIncentiveAbi>]
 */
export type AllowListIncentiveLog<event extends ContractEventName<typeof allowListIncentiveAbi> = ContractEventName<typeof allowListIncentiveAbi>> = GenericLog<typeof allowListIncentiveAbi, event>;
/**
 * An incentive implementation that grants the claimer a slot on an {SimpleAllowList}
 * In order for any claim to be successful:
 * - The claimer must not already be on the allow list; and
 * - The maximum number of claims must not have been reached; and
 * - This contract must be authorized to modify the allow list
 *
 * @export
 * @class AllowListIncentive
 * @typedef {AllowListIncentive}
 * @extends {DeployableTarget<AllowListIncentivePayload>}
 */
export declare class AllowListIncentive extends DeployableTarget<AllowListIncentivePayload, typeof allowListIncentiveAbi> {
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotClaimable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "Claimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "allowList";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract SimpleAllowList";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "claim";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "claims";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "clawback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "currentReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isClaimable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "limit";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preflight";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "reward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {RegistryType}
     */
    static registryType: RegistryType;
    /**
     * The owner of the allowList
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<Address>}
     */
    owner(params?: ReadParams<typeof allowListIncentiveAbi, 'owner'>): Promise<`0x${string}`>;
    /**
     * The number of claims that have been made
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    claims(params?: ReadParams<typeof allowListIncentiveAbi, 'claims'>): Promise<bigint>;
    /**
     * The reward amount issued for each claim
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    reward(params?: ReadParams<typeof allowListIncentiveAbi, 'reward'>): Promise<bigint>;
    /**
     * Get the claim status for a user
     *
     * @public
     * @async
     * @param {Address} address
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>}
     */
    claimed(address: Address, params?: ReadParams<typeof allowListIncentiveAbi, 'claimed'>): Promise<boolean>;
    /**
     * The {@link SimpleAllowList} contract
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<SimpleAllowList>}
     */
    allowList(params?: ReadParams<typeof allowListIncentiveAbi, 'allowList'>): Promise<SimpleAllowList>;
    /**
     * The maximum number of claims that can be made (one per address)
     *
     * @public
     * @async
     * @param {?ReadParams} [params]
     * @returns {Promise<bigint>}
     */
    limit(params?: ReadParams<typeof allowListIncentiveAbi, 'limit'>): Promise<bigint>;
    /**
     * Claim a slot on the {@link SimpleAllowList}
     *
     * @public
     * @async
     * @param {Pick<ClaimPayload, 'target'>} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<true>} - return true if successful, otherwise revert
     */
    protected claim(payload: Pick<ClaimPayload, 'target'>, params?: WriteParams<typeof allowListIncentiveAbi, 'claim'>): Promise<boolean>;
    /**
     * Claim a slot on the {@link SimpleAllowList}
     *
     * @public
     * @async
     * @param {Pick<ClaimPayload, 'target'>} payload
     * @param {?WriteParams} [params]
     * @returns {Promise<{ hash: `0x${string}`; result: boolean; }>} - return true if successful, otherwise revert
     */
    protected claimRaw(payload: Pick<ClaimPayload, 'target'>, params?: WriteParams<typeof allowListIncentiveAbi, 'claim'>): Promise<{
        hash: `0x${string}`;
        result: boolean;
    }>;
    /**
     * Check if an incentive is claimable
     *
     * @public
     * @async
     * @param {Pick<ClaimPayload, 'target'>} payload
     * @param {?ReadParams} [params]
     * @returns {Promise<boolean>} - True if the incentive is claimable based on the data payload
     */
    isClaimable(payload: Pick<ClaimPayload, 'target'>, params?: ReadParams<typeof allowListIncentiveAbi, 'isClaimable'>): Promise<boolean>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?AllowListIncentivePayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: AllowListIncentivePayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 * Given a {@link AllowListIncentivePayload}, properly encode a `AllowListIncentive.InitPayload` for use with {@link AllowListIncentive} initialization.
 *
 * @param {AllowListIncentivePayload} param0
 * @param {Address} param0.allowList - The address to the allowlist to add claimers to.
 * @param {bigint} param0.limit -  The maximum number of claims that can be made (one per address)
 * @returns {Hex}
 */
export declare const prepareAllowListIncentivePayload: ({ allowList, limit, }: AllowListIncentivePayload) => `0x${string}`;
//# sourceMappingURL=AllowListIncentive.d.ts.map