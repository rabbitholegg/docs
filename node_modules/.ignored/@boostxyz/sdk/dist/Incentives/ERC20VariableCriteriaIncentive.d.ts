import { erc20VariableCriteriaIncentiveAbi } from '@boostxyz/evm';
import { type Address, type Hex } from 'viem';
import { SignatureType } from '../Actions/EventAction';
import type { DeployableOptions, GenericDeployableParams } from '../Deployable/Deployable';
import { DeployableTarget } from '../Deployable/DeployableTarget';
import type { ReadParams } from '../utils';
export interface ERC20VariableCriteriaIncentivePayload {
    /**
     * The address of the incentivized asset.
     *
     * @type {Address}
     */
    asset: Address;
    /**
     * The amount of the asset to distribute as reward.
     *
     * @type {bigint}
     */
    reward: bigint;
    /**
     * The total spending limit of the asset that will be distributed.
     *
     * @type {bigint}
     */
    limit: bigint;
    /**
     * The criteria for the incentive that determines how the reward is distributed.
     *
     * @type {IncentiveCriteria}
     */
    criteria: IncentiveCriteria;
}
export interface IncentiveCriteria {
    /**
     * The type of criteria used, either function signature or event signature.
     *
     * @type {SignatureType}
     */
    criteriaType: SignatureType;
    /**
     * The function or event signature used for criteria matching.
     *
     * @type {Hex}
     */
    signature: Hex;
    /**
     * The index of the field from where the scalar value is extracted.
     *
     * @type {number}
     */
    fieldIndex: number;
    /**
     * The address of the contract where the event/function is called/emitted.
     *
     * @type {Address}
     */
    targetContract: Address;
}
export interface ReadIncentiveCriteriaParams extends ReadParams<typeof erc20VariableCriteriaIncentiveAbi, 'getIncentiveCriteria'> {
}
export interface GetIncentiveScalarParams {
    hash: Hex;
}
/**
 * Extended ERC20 Variable Criteria Incentive class that fetches incentive criteria and scalar
 */
export declare class ERC20VariableCriteriaIncentive extends DeployableTarget<ERC20VariableCriteriaIncentivePayload, typeof erc20VariableCriteriaIncentiveAbi> {
    readonly abi: readonly [{
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ClaimFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CloneAlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InitializerNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "asset";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitializationData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoHandoverRequest";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotClaimable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "Claimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipHandoverRequested";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "asset";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "claim";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "claims";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "clawback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "completeOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "currentReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getComponentInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getIncentiveCriteria";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ERC20VariableCriteriaIncentive.IncentiveCriteria";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "criteriaType";
                readonly internalType: "enum SignatureType";
                readonly type: "uint8";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "fieldIndex";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }, {
                readonly name: "targetContract";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "incentiveCriteria";
        readonly outputs: readonly [{
            readonly name: "criteriaType";
            readonly internalType: "enum SignatureType";
            readonly type: "uint8";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "fieldIndex";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "targetContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimTarget";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isClaimable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "limit";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ownershipHandoverExpiresAt";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data_";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "preflight";
        readonly outputs: readonly [{
            readonly name: "budgetData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "requestOwnershipHandover";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "reward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalClaimed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
    /**
     * @inheritdoc
     *
     * @public
     * @static
     * @type {Record<number, Address>}
     */
    static bases: Record<number, Address>;
    /**
     *Functions from the ERC20VariableIncentive contract
     */
    /**
     * Fetches the IncentiveCriteria struct from the contract
     *
     * @returns {Promise<IncentiveCriteria>} Incentive criteria structure
     * @throws {IncentiveCriteriaNotFoundError}
     */
    getIncentiveCriteria(): Promise<IncentiveCriteria>;
    /**
     * Fetches the incentive scalar from a transaction hash
     *
     * @param {GetIncentiveScalarParams} params
     * @returns {Promise<bigint>}
     * @throws {InvalidCriteriaTypeError | NoMatchingLogsError | DecodedArgsError}
     */
    getIncentiveScalar({ hash, }: GetIncentiveScalarParams): Promise<bigint>;
    /**
     * @inheritdoc
     *
     * @public
     * @param {?ERC20VariableCriteriaIncentivePayload} [_payload]
     * @param {?DeployableOptions} [_options]
     * @returns {GenericDeployableParams}
     */
    buildParameters(_payload?: ERC20VariableCriteriaIncentivePayload, _options?: DeployableOptions): GenericDeployableParams;
}
/**
 *
 *
 * @param {InitPayloadExtended} param0
 * @param {Address} param0.asset - The address of the ERC20 asset to incentivize.
 * @param {bigint} param0.reward - The reward amount to distribute per action.
 * @param {bigint} param0.limit - The total limit of the asset distribution.
 * @param {IncentiveCriteria} param0.criteria - The incentive criteria for reward distribution.
 * @returns {Hex}
 */
export declare function prepareERC20VariableCriteriaIncentivePayload({ asset, reward, limit, criteria, }: ERC20VariableCriteriaIncentivePayload): `0x${string}`;
//# sourceMappingURL=ERC20VariableCriteriaIncentive.d.ts.map