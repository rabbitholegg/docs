import type { Address } from 'viem';
import type { DeployableOptions } from '../Deployable/Deployable';
import { AllowListIncentive } from './AllowListIncentive';
import { CGDAIncentive } from './CGDAIncentive';
import { ERC20Incentive } from './ERC20Incentive';
import type { ERC20VariableCriteriaIncentive } from './ERC20VariableCriteriaIncentive';
import { ERC20VariableIncentive } from './ERC20VariableIncentive';
import { PointsIncentive } from './PointsIncentive';
export { AllowListIncentive, CGDAIncentive, ERC20Incentive, PointsIncentive, ERC20VariableIncentive, };
/**
 * A union type representing all valid protocol Incentive implementations
 *
 * @export
 * @typedef {Incentive}
 */
export type Incentive = AllowListIncentive | CGDAIncentive | ERC20Incentive | PointsIncentive | ERC20VariableIncentive | ERC20VariableCriteriaIncentive;
/**
 * A map of Incentive component interfaces to their constructors.
 *
 * @type {{ "0xc5b24b8e": typeof PointsIncentive; "0x8c901437": typeof ERC20Incentive; "0x0a466e6f": typeof AllowListIncentive; "0xa39e44d9": typeof CGDAIncentive; "0x6060409d": typeof ERC20VariableIncentive }}
 */
export declare const IncentiveByComponentInterface: {
    [x: string]: typeof AllowListIncentive | typeof CGDAIncentive | typeof ERC20Incentive | typeof ERC20VariableIncentive | typeof PointsIncentive;
};
/**
 * A function that will read a contract's component interface using `getComponentInterface` and return the correct instantiated instance.
 *
 * @export
 * @async
 * @param {DeployableOptions} options
 * @param {Address} address
 * @returns {Incentive}
 * @throws {@link InvalidComponentInterfaceError}
 */
export declare function incentiveFromAddress(options: DeployableOptions, address: Address): Promise<AllowListIncentive | CGDAIncentive | ERC20Incentive | ERC20VariableIncentive | PointsIncentive>;
//# sourceMappingURL=Incentive.d.ts.map