{"version":3,"file":"AllowListIncentive.cjs","sources":["../../src/Incentives/AllowListIncentive.ts"],"sourcesContent":["import {\n  allowListIncentiveAbi,\n  readAllowListIncentiveAllowList,\n  readAllowListIncentiveClaimed,\n  readAllowListIncentiveClaims,\n  readAllowListIncentiveIsClaimable,\n  readAllowListIncentiveLimit,\n  readAllowListIncentiveOwner,\n  readAllowListIncentiveReward,\n  simulateAllowListIncentiveClaim,\n  writeAllowListIncentiveClaim,\n} from '@boostxyz/evm';\nimport { bytecode } from '@boostxyz/evm/artifacts/contracts/incentives/AllowListIncentive.sol/AllowListIncentive.json';\nimport {\n  type Address,\n  type ContractEventName,\n  type Hex,\n  encodeAbiParameters,\n} from 'viem';\nimport { AllowListIncentive as AllowListIncentiveBases } from '../../dist/deployments.json';\nimport { SimpleAllowList } from '../AllowLists/AllowList';\nimport type {\n  DeployableOptions,\n  GenericDeployableParams,\n} from '../Deployable/Deployable';\nimport { DeployableTarget } from '../Deployable/DeployableTarget';\nimport { type ClaimPayload, prepareClaimPayload } from '../claiming';\nimport {\n  type GenericLog,\n  type ReadParams,\n  RegistryType,\n  type WriteParams,\n} from '../utils';\n\nexport { allowListIncentiveAbi };\n\n/**\n * The object representation of a `AllowListIncentive.InitPayload`\n *\n * @export\n * @interface AllowListIncentivePayload\n * @typedef {AllowListIncentivePayload}\n */\nexport interface AllowListIncentivePayload {\n  /**\n   * The address to the allowlist to add claimers to.\n   *\n   * @type {Address}\n   */\n  allowList: Address;\n  /**\n   *  The maximum number of claims that can be made (one per address)\n   *\n   * @type {bigint}\n   */\n  limit: bigint;\n}\n\n/**\n * A generic `viem.Log` event with support for `AllowListIncentive` event types.\n *\n * @export\n * @typedef {AllowListIncentiveLog}\n * @template {ContractEventName<\n *     typeof allowListIncentiveAbi\n *   >} [event=ContractEventName<typeof allowListIncentiveAbi>]\n */\nexport type AllowListIncentiveLog<\n  event extends ContractEventName<\n    typeof allowListIncentiveAbi\n  > = ContractEventName<typeof allowListIncentiveAbi>,\n> = GenericLog<typeof allowListIncentiveAbi, event>;\n\n/**\n * An incentive implementation that grants the claimer a slot on an {SimpleAllowList}\n * In order for any claim to be successful:\n * - The claimer must not already be on the allow list; and\n * - The maximum number of claims must not have been reached; and\n * - This contract must be authorized to modify the allow list\n *\n * @export\n * @class AllowListIncentive\n * @typedef {AllowListIncentive}\n * @extends {DeployableTarget<AllowListIncentivePayload>}\n */\nexport class AllowListIncentive extends DeployableTarget<\n  AllowListIncentivePayload,\n  typeof allowListIncentiveAbi\n> {\n  public override readonly abi = allowListIncentiveAbi;\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {Record<number, Address>}\n   */\n  public static override bases: Record<number, Address> = {\n    ...(AllowListIncentiveBases as Record<number, Address>),\n  };\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @static\n   * @type {RegistryType}\n   */\n  public static override registryType: RegistryType = RegistryType.INCENTIVE;\n\n  /**\n   * The owner of the allowList\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<Address>}\n   */\n  public async owner(\n    params?: ReadParams<typeof allowListIncentiveAbi, 'owner'>,\n  ) {\n    return await readAllowListIncentiveOwner(this._config, {\n      address: this.assertValidAddress(),\n      args: [],\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * The number of claims that have been made\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<bigint>}\n   */\n  public async claims(\n    params?: ReadParams<typeof allowListIncentiveAbi, 'claims'>,\n  ) {\n    return await readAllowListIncentiveClaims(this._config, {\n      address: this.assertValidAddress(),\n      args: [],\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * The reward amount issued for each claim\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<bigint>}\n   */\n  public async reward(\n    params?: ReadParams<typeof allowListIncentiveAbi, 'reward'>,\n  ) {\n    return await readAllowListIncentiveReward(this._config, {\n      address: this.assertValidAddress(),\n      args: [],\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * Get the claim status for a user\n   *\n   * @public\n   * @async\n   * @param {Address} address\n   * @param {?ReadParams} [params]\n   * @returns {Promise<boolean>}\n   */\n  public async claimed(\n    address: Address,\n    params?: ReadParams<typeof allowListIncentiveAbi, 'claimed'>,\n  ) {\n    return await readAllowListIncentiveClaimed(this._config, {\n      address: this.assertValidAddress(),\n      args: [address],\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * The {@link SimpleAllowList} contract\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<SimpleAllowList>}\n   */\n  public async allowList(\n    params?: ReadParams<typeof allowListIncentiveAbi, 'allowList'>,\n  ): Promise<SimpleAllowList> {\n    const address = await readAllowListIncentiveAllowList(this._config, {\n      address: this.assertValidAddress(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n    return new SimpleAllowList(\n      { config: this._config, account: this._account },\n      address,\n    );\n  }\n\n  /**\n   * The maximum number of claims that can be made (one per address)\n   *\n   * @public\n   * @async\n   * @param {?ReadParams} [params]\n   * @returns {Promise<bigint>}\n   */\n  public async limit(\n    params?: ReadParams<typeof allowListIncentiveAbi, 'limit'>,\n  ) {\n    return await readAllowListIncentiveLimit(this._config, {\n      address: this.assertValidAddress(),\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * Claim a slot on the {@link SimpleAllowList}\n   *\n   * @public\n   * @async\n   * @param {Pick<ClaimPayload, 'target'>} payload\n   * @param {?WriteParams} [params]\n   * @returns {Promise<true>} - return true if successful, otherwise revert\n   */\n  protected async claim(\n    payload: Pick<ClaimPayload, 'target'>,\n    params?: WriteParams<typeof allowListIncentiveAbi, 'claim'>,\n  ) {\n    return await this.awaitResult(this.claimRaw(payload, params));\n  }\n\n  /**\n   * Claim a slot on the {@link SimpleAllowList}\n   *\n   * @public\n   * @async\n   * @param {Pick<ClaimPayload, 'target'>} payload\n   * @param {?WriteParams} [params]\n   * @returns {Promise<{ hash: `0x${string}`; result: boolean; }>} - return true if successful, otherwise revert\n   */\n  protected async claimRaw(\n    payload: Pick<ClaimPayload, 'target'>,\n    params?: WriteParams<typeof allowListIncentiveAbi, 'claim'>,\n  ) {\n    const { request, result } = await simulateAllowListIncentiveClaim(\n      this._config,\n      {\n        address: this.assertValidAddress(),\n        args: [prepareClaimPayload(payload)],\n        ...this.optionallyAttachAccount(),\n        // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n        ...(params as any),\n      },\n    );\n    const hash = await writeAllowListIncentiveClaim(this._config, request);\n    return { hash, result };\n  }\n\n  /**\n   * Check if an incentive is claimable\n   *\n   * @public\n   * @async\n   * @param {Pick<ClaimPayload, 'target'>} payload\n   * @param {?ReadParams} [params]\n   * @returns {Promise<boolean>} - True if the incentive is claimable based on the data payload\n   */\n  public async isClaimable(\n    payload: Pick<ClaimPayload, 'target'>,\n    params?: ReadParams<typeof allowListIncentiveAbi, 'isClaimable'>,\n  ) {\n    return await readAllowListIncentiveIsClaimable(this._config, {\n      address: this.assertValidAddress(),\n      args: [prepareClaimPayload(payload)],\n      // biome-ignore lint/suspicious/noExplicitAny: Accept any shape of valid wagmi/viem parameters, wagmi does the same thing internally\n      ...(params as any),\n    });\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @public\n   * @param {?AllowListIncentivePayload} [_payload]\n   * @param {?DeployableOptions} [_options]\n   * @returns {GenericDeployableParams}\n   */\n  public override buildParameters(\n    _payload?: AllowListIncentivePayload,\n    _options?: DeployableOptions,\n  ): GenericDeployableParams {\n    const [payload, options] = this.validateDeploymentConfig(\n      _payload,\n      _options,\n    );\n    return {\n      abi: allowListIncentiveAbi,\n      bytecode: bytecode as Hex,\n      args: [prepareAllowListIncentivePayload(payload)],\n      ...this.optionallyAttachAccount(options.account),\n    };\n  }\n}\n\n/**\n * Given a {@link AllowListIncentivePayload}, properly encode a `AllowListIncentive.InitPayload` for use with {@link AllowListIncentive} initialization.\n *\n * @param {AllowListIncentivePayload} param0\n * @param {Address} param0.allowList - The address to the allowlist to add claimers to.\n * @param {bigint} param0.limit -  The maximum number of claims that can be made (one per address)\n * @returns {Hex}\n */\nexport const prepareAllowListIncentivePayload = ({\n  allowList,\n  limit,\n}: AllowListIncentivePayload) => {\n  return encodeAbiParameters(\n    [\n      { type: 'address', name: 'allowList' },\n      { type: 'uint256', name: 'limit' },\n    ],\n    [allowList, limit],\n  );\n};\n"],"names":["_AllowListIncentive","DeployableTarget","allowListIncentiveAbi","params","readAllowListIncentiveOwner","readAllowListIncentiveClaims","readAllowListIncentiveReward","address","readAllowListIncentiveClaimed","readAllowListIncentiveAllowList","SimpleAllowList","readAllowListIncentiveLimit","payload","request","result","simulateAllowListIncentiveClaim","prepareClaimPayload","writeAllowListIncentiveClaim","readAllowListIncentiveIsClaimable","_payload","_options","options","bytecode","prepareAllowListIncentivePayload","AllowListIncentiveBases","RegistryType","AllowListIncentive","allowList","limit","encodeAbiParameters"],"mappings":"8jZAqFaA,EAAN,MAAMA,UAA2BC,EAAAA,gBAGtC,CAHK,aAAA,CAAA,MAAA,GAAA,SAAA,EAIL,KAAyB,IAAMC,GAAA,CA4B/B,MAAa,MACXC,EACA,CACO,OAAA,MAAMC,EAAAA,GAA4B,KAAK,QAAS,CACrD,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAAC,EAEP,GAAID,CAAA,CACL,CACH,CAUA,MAAa,OACXA,EACA,CACO,OAAA,MAAME,EAAAA,GAA6B,KAAK,QAAS,CACtD,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAAC,EAEP,GAAIF,CAAA,CACL,CACH,CAUA,MAAa,OACXA,EACA,CACO,OAAA,MAAMG,EAAAA,GAA6B,KAAK,QAAS,CACtD,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAAC,EAEP,GAAIH,CAAA,CACL,CACH,CAWA,MAAa,QACXI,EACAJ,EACA,CACO,OAAA,MAAMK,EAAAA,GAA8B,KAAK,QAAS,CACvD,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAACD,CAAO,EAEd,GAAIJ,CAAA,CACL,CACH,CAUA,MAAa,UACXA,EAC0B,CAC1B,MAAMI,EAAU,MAAME,KAAgC,KAAK,QAAS,CAClE,QAAS,KAAK,mBAAmB,EAEjC,GAAIN,CAAA,CACL,EACD,OAAO,IAAIO,EAAA,gBACT,CAAE,OAAQ,KAAK,QAAS,QAAS,KAAK,QAAS,EAC/CH,CAAA,CAEJ,CAUA,MAAa,MACXJ,EACA,CACO,OAAA,MAAMQ,EAAAA,GAA4B,KAAK,QAAS,CACrD,QAAS,KAAK,mBAAmB,EAEjC,GAAIR,CAAA,CACL,CACH,CAWA,MAAgB,MACdS,EACAT,EACA,CACA,OAAO,MAAM,KAAK,YAAY,KAAK,SAASS,EAAST,CAAM,CAAC,CAC9D,CAWA,MAAgB,SACdS,EACAT,EACA,CACA,KAAM,CAAE,QAAAU,EAAS,OAAAC,CAAO,EAAI,MAAMC,EAAA,GAChC,KAAK,QACL,CACE,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAACC,sBAAoBJ,CAAO,CAAC,EACnC,GAAG,KAAK,wBAAwB,EAEhC,GAAIT,CACN,CAAA,EAGK,MAAA,CAAE,KADI,MAAMc,EAA6B,GAAA,KAAK,QAASJ,CAAO,EACtD,OAAAC,EACjB,CAWA,MAAa,YACXF,EACAT,EACA,CACO,OAAA,MAAMe,EAAAA,GAAkC,KAAK,QAAS,CAC3D,QAAS,KAAK,mBAAmB,EACjC,KAAM,CAACF,sBAAoBJ,CAAO,CAAC,EAEnC,GAAIT,CAAA,CACL,CACH,CAUgB,gBACdgB,EACAC,EACyB,CACzB,KAAM,CAACR,EAASS,CAAO,EAAI,KAAK,yBAC9BF,EACAC,CAAA,EAEK,MAAA,CACL,IAAKlB,EAAA,EACL,SAAAoB,EACA,KAAM,CAACC,EAAiCX,CAAO,CAAC,EAChD,GAAG,KAAK,wBAAwBS,EAAQ,OAAO,CAAA,CAEnD,CACF,EAzNErB,EAAuB,MAAiC,CACtD,GAAIwB,EAAA,kBAAA,EASNxB,EAAuB,aAA6ByB,EAAa,aAAA,UAtB5D,IAAMC,EAAN1B,EA+OA,MAAMuB,EAAmC,CAAC,CAC/C,UAAAI,EACA,MAAAC,CACF,IACSC,EAAA,oBACL,CACE,CAAE,KAAM,UAAW,KAAM,WAAY,EACrC,CAAE,KAAM,UAAW,KAAM,OAAQ,CACnC,EACA,CAACF,EAAWC,CAAK,CAAA"}