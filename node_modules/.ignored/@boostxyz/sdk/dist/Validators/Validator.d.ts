import type { Address } from 'viem';
import type { DeployableOptions } from '../Deployable/Deployable';
import { SignerValidator } from './SignerValidator';
export { SignerValidator };
/**
 * A union type representing all valid protocol Validator implementations
 *
 * @export
 * @typedef {Validator}
 */
export type Validator = SignerValidator;
/**
 * A map of Validator component interfaces to their constructors.
 *
 * @type {{ "0xd8725ea2": typeof SignerValidator; }}
 */
export declare const ValidatorByComponentInterface: {
    [x: string]: typeof SignerValidator;
};
/**
 * A function that will read a contract's component interface using `getComponentInterface` and return the correct instantiated instance.
 *
 * @export
 * @async
 * @param {DeployableOptions} options
 * @param {Address} address
 * @returns {Promise<Validator>}
 * @throws {@link InvalidComponentInterfaceError}
 */
export declare function validatorFromAddress(options: DeployableOptions, address: Address): Promise<SignerValidator>;
//# sourceMappingURL=Validator.d.ts.map