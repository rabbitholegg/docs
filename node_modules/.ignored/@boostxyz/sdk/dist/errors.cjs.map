{"version":3,"file":"errors.cjs","sources":["../src/errors.ts"],"sourcesContent":["import {\n  type AbiEvent,\n  type AbiFunction,\n  type Hex,\n  type Log,\n  type WaitForTransactionReceiptReturnType,\n  zeroHash,\n} from 'viem';\nimport type { Criteria } from './Actions/EventAction';\nimport type { EventLogs } from './Actions/EventAction';\nimport type { BoostRegistry } from './BoostRegistry';\nimport type { Incentive } from './Incentives/Incentive';\n\n/**\n * This error is thrown during Boost creation if no `BoostCreated` event was emitted.\n *\n * @export\n * @class BoostCoreNoIdentifierEmitted\n * @typedef {BoostCoreNoIdentifierEmitted}\n * @extends {Error}\n * @example\n * ```ts\n * try {\n *   await boostCore.createBoost(...)\n * } catch(e) {\n *   if(e instanceof BoostCoreNoIdentifierEmitted) {}\n * }\n * ```\n */\nexport class BoostCoreNoIdentifierEmitted extends Error {\n  /**\n   * Creates an instance of BoostCoreNoIdentifierEmitted.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(`No \"BoostCreated\" log was emitted from which to extract boostId`);\n  }\n}\n\n/**\n * This error is thrown when `assertValidAddress` is called, usually because a contract call expects the class to have a valid address attached.\n *\n * @export\n * @class ContractAddressRequiredError\n * @typedef {ContractAddressRequiredError}\n * @extends {Error}\n * @example\n * ```ts\n * try {\n *   target.assertValidAddress()\n * } catch(e) {\n *   if(e instanceof ContractAddressRequiredError) {}\n * }\n */\nexport class ContractAddressRequiredError extends Error {\n  /**\n   * Creates an instance of ContractAddressRequiredError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super('Attempted to call contract method without providing an address');\n  }\n}\n\n/**\n * This error is thrown when attempting to deploy a contract that has already been deployed, or has an address attached.\n *\n * @export\n * @class DeployableAlreadyDeployedError\n * @typedef {DeployableAlreadyDeployedError}\n * @extends {Error}\n */\nexport class DeployableAlreadyDeployedError extends Error {\n  /**\n   * The address already attached to the target.\n   *\n   * @type {string}\n   */\n  address: string;\n  /**\n   * Creates an instance of DeployableAlreadyDeployedError.\n   *\n   * @constructor\n   * @param {string} address\n   */\n  constructor(address: string) {\n    super(\n      'Attempted to deploy a contract that already has an address configured',\n    );\n    this.address = address;\n  }\n}\n\n/**\n * You should never see this error if we did our jobs and every target overrides the `buildParameters` method.\n *\n * @export\n * @class DeployableBuildParametersUnspecifiedError\n * @typedef {DeployableBuildParametersUnspecifiedError}\n * @extends {Error}\n */\nexport class DeployableBuildParametersUnspecifiedError extends Error {\n  /**\n   * Creates an instance of DeployableBuildParametersUnspecifiedError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Implementing class did not properly override the `buildParameters` method',\n    );\n  }\n}\n\n/**\n * This error is thrown when attempting to deploy an `ownable` contract and the owner cannot be ascertained from the initialization payload or configured account.\n *\n * @export\n * @class DeployableUnknownOwnerProvidedError\n * @typedef {DeployableUnknownOwnerProvidedError}\n * @extends {Error}\n */\nexport class DeployableUnknownOwnerProvidedError extends Error {\n  /**\n   * Creates an instance of DeployableUnknownOwnerProvidedError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Expected an an owner to be provided in configuration or an account to exist on Wagmi config.',\n    );\n  }\n}\n\n/**\n * This error is thrown when deploying a contract with no valid Wagmi configuration on the instance.\n *\n * @export\n * @class DeployableWagmiConfigurationRequiredError\n * @typedef {DeployableWagmiConfigurationRequiredError}\n * @extends {Error}\n */\nexport class DeployableWagmiConfigurationRequiredError extends Error {\n  /**\n   * Creates an instance of DeployableWagmiConfigurationRequiredError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Expected a valid Wagmi configuration to be available either on Deployable, or as argument to deploy.',\n    );\n  }\n}\n\n/**\n * This error is thrown when deploying a contract with no valid initialization payload.\n *\n * @export\n * @class DeployableMissingPayloadError\n * @typedef {DeployableMissingPayloadError}\n * @extends {Error}\n */\nexport class DeployableMissingPayloadError extends Error {\n  /**\n   * Creates an instance of DeployableMissingPayloadError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Expected a valid payload to be available either on Deployable or as argument to deploy.',\n    );\n  }\n}\n\n/**\n * This error is thrown when we receive a transaction receipt for a contract deployment without a contract address on it.\n *\n * @export\n * @class NoContractAddressUponReceiptError\n * @typedef {NoContractAddressUponReceiptError}\n * @extends {Error}\n */\nexport class NoContractAddressUponReceiptError extends Error {\n  /**\n   * The raw receipt we receive from [waitForTransactionReceipt](https://v1.viem.sh/docs/actions/public/waitForTransactionReceipt.html#waitfortransactionreceipt)\n   *\n   * @public\n   * @readonly\n   * @type {WaitForTransactionReceiptReturnType}\n   */\n  public readonly receipt: WaitForTransactionReceiptReturnType;\n  /**\n   * Creates an instance of NoContractAddressUponReceiptError.\n   *\n   * @constructor\n   * @param {WaitForTransactionReceiptReturnType} receipt\n   */\n  constructor(receipt: WaitForTransactionReceiptReturnType) {\n    super(`Expected a contract address to exist on receipt.`, {\n      cause: receipt,\n    });\n    this.receipt = receipt;\n  }\n}\n\n/**\n * This error is thrown when a target address was provided that doesn't match any supported interface for the given registry type.\n * For example, if you try to do `incentiveFromAddress()` with the address of a deployed `SimpleBudget`\n *\n * @export\n * @class InvalidComponentInterfaceError\n * @typedef {InvalidComponentInterfaceError}\n * @extends {Error}\n */\nexport class InvalidComponentInterfaceError extends Error {\n  /**\n   * Expected interface hashes.\n   *\n   * @public\n   * @readonly\n   * @type {Hex[]}\n   */\n  public readonly expected: Hex[] = [];\n  /**\n   * The actual interface hash.\n   *\n   * @public\n   * @readonly\n   * @type {Hex}\n   */\n  public readonly received: Hex = zeroHash;\n\n  /**\n   * Creates an instance of InvalidComponentInterfaceError.\n   *\n   * @constructor\n   * @param {Hex[]} expected\n   * @param {Hex} received\n   */\n  constructor(expected: Hex[], received: Hex) {\n    super(`Address provided does not match any expected protocol interface`, {\n      cause: { expected, received },\n    });\n    this.expected = expected;\n    this.received = received;\n  }\n}\n\n/**\n * This error is thrown when a param is not transparently stored onchain\n *\n * @export\n * @class UnparseableAbiParamError\n * @typedef {UnparseableAbiParamError}\n * @extends {Error}\n */\nexport class UnparseableAbiParamError extends Error {\n  /**\n   * the param index that is unparseable\n   *\n   * @type {number}\n   */\n  input_param_idx: number;\n  /**\n   * The given event that contains the unparseable param\n   *\n   * @type {AbiEvent}\n   */\n  event: AbiEvent;\n  /**\n   * Creates an instance of UnknownTransferPayloadSupplied.\n   *\n   * @constructor\n   * @param {number} input_param_idx\n   * @param {AbiEvent} event\n   */\n  constructor(input_param_idx: number, event: AbiEvent) {\n    super(\n      `Parameter is not transparently stored onchain. Parameter ${input_param_idx} in event ${event.name} cannot be used in an action`,\n      { cause: event },\n    );\n    this.event = event;\n    this.input_param_idx = input_param_idx;\n  }\n}\n\n/**\n * This error is thrown when attempting a Budget transfer and arguments aren't of the type `FungibleTransferPayload` or `ERC1155TransferPayload`\n *\n * @see {@link FungibleTransferPayload}\n * @see {@link ERC1155TransferPayload}\n * @export\n * @class UnknownTransferPayloadSupplied\n * @typedef {UnknownTransferPayloadSupplied}\n * @extends {Error}\n */\nexport class UnknownTransferPayloadSupplied extends Error {\n  /**\n   * The given payload that does not conform to the correct payload shape.\n   *\n   * @type {unknown}\n   */\n  received: unknown;\n  /**\n   * Creates an instance of UnknownTransferPayloadSupplied.\n   *\n   * @constructor\n   * @param {unknown} received\n   */\n  constructor(received: unknown) {\n    super(\n      `Did not provide a valid FungibleTransferPayload or ERC1155 transfer payload.`,\n      { cause: received },\n    );\n    this.received = received;\n  }\n}\n\n/**\n * This error is thrown during Boost creation when the budget doesn't authorize the Boost Core address.\n *\n * @export\n * @class BudgetMustAuthorizeBoostCore\n * @typedef {BudgetMustAuthorizeBoostCore}\n * @extends {Error}\n */\nexport class BudgetMustAuthorizeBoostCore extends Error {\n  /**\n   * Creates an instance of BudgetMustAuthorizeBoostCore.\n   *\n   * @constructor\n   * @param {string} boostCoreAddress\n   */\n  constructor(boostCoreAddress: string) {\n    super(\n      `Budget needs to explicitly authorize ${boostCoreAddress}. You can retrieve this value from BoostCore.address`,\n    );\n  }\n}\n\n/**\n * Because this contract is a base implementation, it should not be initialized through the constructor. Instead, it should be cloned and initialized using the {@link BoostRegistry}\n *\n * @export\n * @class MustInitializeBudgetError\n * @typedef {MustInitializeBudgetError}\n * @extends {Error}\n */\nexport class MustInitializeBudgetError extends Error {\n  /**\n   * Creates an instance of MustInitializeBudgetError.\n   */\n  constructor() {\n    super(`Budgets must be preinitialized before being used with a new Boost`);\n  }\n}\n\n/**\n * The error is thrown when trying to reuse an existing deployed Incentive that isn't a base implementation.\n * The protocol doesn't allow this.\n *\n * @export\n * @class IncentiveNotCloneableError\n * @typedef {IncentiveNotCloneableError}\n * @extends {Error}\n */\nexport class IncentiveNotCloneableError extends Error {\n  /**\n   * Creates an instance of IncentiveNotCloneableError.\n   *\n   * @constructor\n   * @param {Incentive} incentive\n   */\n  constructor(incentive: Incentive) {\n    super(`Incentive not cloneable: ${incentive.constructor.name}`);\n  }\n}\n\n/**\n * Thrown when encoding an EventAction payload and no action steps are provided\n *\n * @export\n * @class NoEventActionStepsProvidedError\n * @typedef {NoEventActionStepsProvidedError}\n * @extends {Error}\n */\nexport class NoEventActionStepsProvidedError extends Error {\n  /**\n   * Creates an instance of NoEventActionStepsProvidedError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super('Must supply at least one action step');\n  }\n}\n\n/**\n * Thrown when encoding an EventAction payload and > 4 steps are provided\n *\n * @export\n * @class TooManyEventActionStepsProvidedError\n * @typedef {TooManyEventActionStepsProvidedError}\n * @extends {Error}\n */\nexport class TooManyEventActionStepsProvidedError extends Error {\n  /**\n   * Creates an instance of TooManyEventActionStepsProvidedError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Cannot supply more than 4 action steps with current protocol version',\n    );\n  }\n}\n\n/**\n * The error is thrown when trying to reuse an existing deployed Incentive that isn't a base implementation.\n *\n * @export\n * @class ValidationAbiMissingError\n * @typedef {ValidationAbiMissingError}\n * @extends {Error}\n */\nexport class ValidationAbiMissingError extends Error {\n  /**\n   * Creates an instance of ValidationAbiMissingError.\n   *\n   * @constructor\n   * @param {Hex} signature\n   */\n  constructor(signature: Hex) {\n    super(`No known ABI for given signature: ${signature}`);\n  }\n}\n\n/**\n * Thrown when missing logs for validating action steps.\n *\n * @export\n * @class ValidationLogsMissingError\n * @typedef {ValidationLogsMissingError}\n * @extends {Error}\n */\nexport class ValidationLogsMissingError extends Error {\n  /**\n   * Creates an instance of ValidationLogsMissingError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super('Logs are required for validation');\n  }\n}\n\n/**\n * Function action validation context to help debug other validation errors\n *\n * @interface FunctionActionValidationMeta\n * @typedef {FunctionActionValidationMeta}\n */\ninterface FunctionActionValidationMeta {\n  decodedArgs: readonly (string | bigint)[];\n  /**\n   * The value pulled off the log being validated against\n   *\n   * @type {*}\n   * biome-ignore lint/suspicious/noExplicitAny: this can be a few different types based on what the log emits\n   */\n  fieldValue: any;\n  /**\n   * The criteria being used to compare during validation\n   *\n   * @type {Criteria}\n   */\n  criteria: Criteria;\n}\n/**\n * Event action validation context to help debug other validation errors\n *\n * @interface EventActionValidationMeta\n * @typedef {EventActionValidationMeta}\n */\ninterface EventActionValidationMeta {\n  /**\n   * The viem log being validated against\n   *\n   * @type {Log}\n   */\n  log?: EventLogs[0];\n  /**\n   * The value pulled off the log being validated against\n   *\n   * @type {*}\n   * biome-ignore lint/suspicious/noExplicitAny: this can be a few different types based on what the log emits\n   */\n  fieldValue: any;\n  /**\n   * The criteria being used to compare during validation\n   *\n   * @type {Criteria}\n   */\n  criteria: Criteria;\n}\n\n/**\n * The base error thrown during event action validation extended by more specific validation errors.\n * Instantiated with relevent context data for more in depth debugging.\n *\n * @export\n * @class FieldActionValidationError\n * @typedef {FieldActionValidationError}\n * @extends {Error}\n */\nexport class FieldActionValidationError extends Error {\n  /**\n   * The function input arguments being validated against\n   *\n   * @type {decodedArgs}\n   */\n  decodedArgs?: readonly (string | bigint)[];\n  /**\n   * The viem log being validated against\n   *\n   * @type {Log}\n   */\n  log?: EventLogs[0];\n  /**\n   * The value pulled off the log being validated against\n   *\n   * @type {*}\n   * biome-ignore lint/suspicious/noExplicitAny: this can be a few different types based on what the log emits\n   */\n  fieldValue: any;\n  /**\n   * The criteria being used to compare during validation\n   *\n   * @type {Criteria}\n   */\n  criteria: Criteria;\n  /**\n   * Creates an instance of FieldActionValidationError.\n   *\n   * @constructor\n   * @param {string} message\n   * @param {EventActionValidationMeta} param0\n   * @param {*} param0.fieldValue\n   * @param {Criteria} param0.criteria\n   * @param {Log} param0.log\n   */\n  constructor(\n    message: string,\n    {\n      fieldValue,\n      criteria,\n      ...args\n    }: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super(message);\n    this.fieldValue = fieldValue;\n    this.criteria = criteria;\n\n    switch (true) {\n      case 'log' in args:\n        this.log = args.log;\n        break;\n      case 'decodedArgs' in args:\n        this.decodedArgs = args.decodedArgs;\n    }\n  }\n}\n\n/**\n * Thrown when abi-decoded args on log is undefined\n *\n * @export\n * @class FieldValueUndefinedError\n * @typedef {FieldValueUndefinedError}\n * @extends {FieldActionValidationError}\n */\nexport class DecodedArgsMalformedError extends FieldActionValidationError {\n  /**\n   * Creates an instance of DecodedArgsUndefinedError.\n   *\n   * @constructor\n   * @param {DecodedArgsMalformedError} metadata\n   */\n  constructor(\n    metadata: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super(\n      'Decoded Args are malformed; Check which params are indexed',\n      metadata,\n    );\n  }\n}\n\n/**\n * Thrown when field value on log is undefined\n *\n * @export\n * @class FieldValueUndefinedError\n * @typedef {FieldValueUndefinedError}\n * @extends {FieldActionValidationError}\n */\nexport class FieldValueUndefinedError extends FieldActionValidationError {\n  /**\n   * Creates an instance of FieldValueUndefinedError.\n   *\n   * @constructor\n   * @param {EventActionValidationMeta} metadata\n   */\n  constructor(\n    metadata: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super('Field value is undefined', metadata);\n  }\n}\n\n/**\n * Thrown when a filter type is using a numerical operator but field type is not numerical\n *\n * @export\n * @class InvalidNumericalCriteriaError\n * @typedef {InvalidNumericalCriteriaError}\n * @extends {FieldActionValidationError}\n */\nexport class InvalidNumericalCriteriaError extends FieldActionValidationError {\n  /**\n   * Creates an instance of InvalidNumericalCriteria.\n   *\n   * @constructor\n   * @param {EventActionValidationMeta} metadata\n   */\n  constructor(\n    metadata: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super(\n      'Numerical comparisons cannot be used with non-numerical criteria',\n      metadata,\n    );\n  }\n}\n\n/**\n * Thrown when decoding function data fails.\n *\n * @export\n * @class FunctionDataDecodeError\n * @typedef {FunctionDataDecodeError}\n * @extends {Error}\n */\nexport class FunctionDataDecodeError extends Error {\n  public abi: AbiFunction[];\n  public originalError: Error;\n\n  /**\n   * Creates an instance of FunctionDataDecodeError.\n   *\n   * @constructor\n   * @param {AbiFunction[]} abi - The ABI of the function.\n   * @param {Error} originalError - The original error that was thrown.\n   */\n  constructor(abi: AbiFunction[], originalError: Error) {\n    super(`Failed to decode function data: ${originalError.message}`);\n    this.name = 'FunctionDataDecodeError';\n    this.abi = abi;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Thrown when an the log's field value is being compared a field type that isn't bytes or string during event action validation\n *\n * @export\n * @class FieldValueNotComparableError\n * @typedef {FieldValueNotComparableError}\n * @extends {FieldActionValidationError}\n */\nexport class FieldValueNotComparableError extends FieldActionValidationError {\n  /**\n   * Creates an instance of FieldValueNotComparableError.\n   *\n   * @constructor\n   * @param {EventActionValidationMeta} metadata\n   */\n  constructor(\n    metadata: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super('Filter can only be used with bytes or string field type', metadata);\n  }\n}\n\n/**\n * Thrown when an invalid filter type enum was provided event action validation.\n *\n * @export\n * @class UnrecognizedFilterTypeError\n * @typedef {UnrecognizedFilterTypeError}\n * @extends {FieldActionValidationError}\n */\nexport class UnrecognizedFilterTypeError extends FieldActionValidationError {\n  /**\n   * Creates an instance of UnrecognizedFilterTypeError.\n   *\n   * @constructor\n   * @param {EventActionValidationMeta} metadata\n   */\n  constructor(\n    metadata: EventActionValidationMeta | FunctionActionValidationMeta,\n  ) {\n    super('Invalid FilterType provided', metadata);\n  }\n}\n\n/**\n * Thrown when no chain ID is provided in the Wagmi configuration.\n *\n * @export\n * @class NoConnectedChainIdError\n * @typedef {NoConnectedChainIdError}\n * @extends {Error}\n */\nexport class NoConnectedChainIdError extends Error {\n  /**\n   * Creates an instance of NoConnectedChainIdError.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(\n      'Provided Wagmi configuration does not define `chainId` property with which to target protocol contracts',\n    );\n    this.name = 'NoConnectedChainIdError';\n  }\n}\n\n/**\n * Thrown when an invalid chain ID is provided that doesn't match any deployed protocol.\n *\n * @export\n * @class InvalidProtocolChainIdError\n * @typedef {InvalidProtocolChainIdError}\n * @extends {Error}\n */\nexport class InvalidProtocolChainIdError extends Error {\n  /**\n   * Creates an instance of InvalidProtocolChainIdError.\n   *\n   * @constructor\n   * @param {number} chainId - The chain ID provided in the configuration.\n   * @param {number[]} validChainIds - A list of valid chain IDs where the protocol is deployed.\n   */\n  constructor(chainId: number, validChainIds: number[]) {\n    super(\n      `Provided Wagmi configuration supplied a \"chainId\" where protocol is not deployed, provided: ${chainId}, but valid chains are: ${validChainIds}`,\n    );\n    this.name = 'InvalidProtocolChainIdError';\n  }\n}\n\n/**\n * Thrown when the incentive criteria cannot be fetched from the contract.\n *\n * @export\n * @class IncentiveCriteriaNotFoundError\n * @typedef {IncentiveCriteriaNotFoundError}\n * @extends {Error}\n */\nexport class IncentiveCriteriaNotFoundError extends Error {\n  /**\n   * Creates an instance of IncentiveCriteriaNotFoundError.\n   *\n   * @constructor\n   * @param {Error} [e] - Optional error object for further context.\n   * @param {string} [message='Unable to fetch Incentive Criteria from contract'] - Custom error message.\n   */\n  constructor(\n    e?: Error,\n    message = 'Unable to fetch Incentive Criteria from contract',\n  ) {\n    super(message + (e ? `: ${e.message}` : ''));\n    this.name = 'IncentiveCriteriaNotFoundError';\n  }\n}\n\n/**\n * Thrown when no matching logs are found for a given event signature.\n *\n * @export\n * @class NoMatchingLogsError\n * @typedef {NoMatchingLogsError}\n * @extends {Error}\n */\nexport class NoMatchingLogsError extends Error {\n  /**\n   * Creates an instance of NoMatchingLogsError.\n   *\n   * @constructor\n   * @param {string} signature - The event signature for which logs are being searched.\n   * @param {string} [message] - Optional custom error message.\n   */\n  constructor(\n    signature: string,\n    message = `No logs found for event signature ${signature}`,\n  ) {\n    super(message);\n    this.name = 'NoMatchingLogsError';\n  }\n}\n\n/**\n * Thrown when an invalid criteria type is provided.\n *\n * @export\n * @class InvalidCriteriaTypeError\n * @typedef {InvalidCriteriaTypeError}\n * @extends {Error}\n */\nexport class InvalidCriteriaTypeError extends Error {\n  /**\n   * Creates an instance of InvalidCriteriaTypeError.\n   *\n   * @constructor\n   * @param {string} [criteriaType='unknown'] - The invalid criteria type that was provided.\n   * @param {string} [message] - Optional custom error message.\n   */\n  constructor(\n    criteriaType = 'unknown',\n    message = `Invalid criteria type ${criteriaType}`,\n  ) {\n    super(message);\n    this.name = 'InvalidCriteriaTypeError';\n  }\n}\n\n/**\n * Thrown when decoding function arguments fails.\n *\n * @export\n * @class DecodedArgsError\n * @typedef {DecodedArgsError}\n * @extends {Error}\n */\nexport class DecodedArgsError extends Error {\n  /**\n   * Creates an instance of DecodedArgsError.\n   *\n   * @constructor\n   * @param {string} [message='Issue decoding args'] - Custom error message.\n   */\n  constructor(message = 'Issue decoding args') {\n    super(message);\n    this.name = 'DecodedArgsError';\n  }\n}\n"],"names":["BoostCoreNoIdentifierEmitted","ContractAddressRequiredError","DeployableAlreadyDeployedError","address","DeployableBuildParametersUnspecifiedError","DeployableUnknownOwnerProvidedError","DeployableWagmiConfigurationRequiredError","DeployableMissingPayloadError","NoContractAddressUponReceiptError","receipt","InvalidComponentInterfaceError","expected","received","zeroHash","UnparseableAbiParamError","input_param_idx","event","UnknownTransferPayloadSupplied","BudgetMustAuthorizeBoostCore","boostCoreAddress","MustInitializeBudgetError","IncentiveNotCloneableError","incentive","NoEventActionStepsProvidedError","TooManyEventActionStepsProvidedError","ValidationAbiMissingError","signature","ValidationLogsMissingError","FieldActionValidationError","message","fieldValue","criteria","args","DecodedArgsMalformedError","metadata","FieldValueUndefinedError","InvalidNumericalCriteriaError","FunctionDataDecodeError","abi","originalError","FieldValueNotComparableError","UnrecognizedFilterTypeError","NoConnectedChainIdError","InvalidProtocolChainIdError","chainId","validChainIds","IncentiveCriteriaNotFoundError","e","NoMatchingLogsError","InvalidCriteriaTypeError","criteriaType","DecodedArgsError"],"mappings":"wGA6BO,MAAMA,UAAqC,KAAM,CAMtD,aAAc,CACZ,MAAM,iEAAiE,CACzE,CACF,CAiBO,MAAMC,UAAqC,KAAM,CAMtD,aAAc,CACZ,MAAM,gEAAgE,CACxE,CACF,CAUO,MAAMC,UAAuC,KAAM,CAaxD,YAAYC,EAAiB,CAC3B,MACE,uEAAA,EAEF,KAAK,QAAUA,CACjB,CACF,CAUO,MAAMC,UAAkD,KAAM,CAMnE,aAAc,CACZ,MACE,2EAAA,CAEJ,CACF,CAUO,MAAMC,UAA4C,KAAM,CAM7D,aAAc,CACZ,MACE,8FAAA,CAEJ,CACF,CAUO,MAAMC,UAAkD,KAAM,CAMnE,aAAc,CACZ,MACE,sGAAA,CAEJ,CACF,CAUO,MAAMC,UAAsC,KAAM,CAMvD,aAAc,CACZ,MACE,yFAAA,CAEJ,CACF,CAUO,MAAMC,UAA0C,KAAM,CAe3D,YAAYC,EAA8C,CACxD,MAAM,mDAAoD,CACxD,MAAOA,CAAA,CACR,EACD,KAAK,QAAUA,CACjB,CACF,CAWO,MAAMC,UAAuC,KAAM,CAyBxD,YAAYC,EAAiBC,EAAe,CAC1C,MAAM,kEAAmE,CACvE,MAAO,CAAE,SAAAD,EAAU,SAAAC,CAAS,CAAA,CAC7B,EApBH,KAAgB,SAAkB,GAQlC,KAAgB,SAAgBC,WAa9B,KAAK,SAAWF,EAChB,KAAK,SAAWC,CAClB,CACF,CAUO,MAAME,UAAiC,KAAM,CAoBlD,YAAYC,EAAyBC,EAAiB,CACpD,MACE,4DAA4DD,CAAe,aAAaC,EAAM,IAAI,+BAClG,CAAE,MAAOA,CAAM,CAAA,EAEjB,KAAK,MAAQA,EACb,KAAK,gBAAkBD,CACzB,CACF,CAYO,MAAME,UAAuC,KAAM,CAaxD,YAAYL,EAAmB,CAC7B,MACE,+EACA,CAAE,MAAOA,CAAS,CAAA,EAEpB,KAAK,SAAWA,CAClB,CACF,CAUO,MAAMM,UAAqC,KAAM,CAOtD,YAAYC,EAA0B,CACpC,MACE,wCAAwCA,CAAgB,sDAAA,CAE5D,CACF,CAUO,MAAMC,UAAkC,KAAM,CAInD,aAAc,CACZ,MAAM,mEAAmE,CAC3E,CACF,CAWO,MAAMC,UAAmC,KAAM,CAOpD,YAAYC,EAAsB,CAChC,MAAM,4BAA4BA,EAAU,YAAY,IAAI,EAAE,CAChE,CACF,CAUO,MAAMC,UAAwC,KAAM,CAMzD,aAAc,CACZ,MAAM,sCAAsC,CAC9C,CACF,CAUO,MAAMC,UAA6C,KAAM,CAM9D,aAAc,CACZ,MACE,sEAAA,CAEJ,CACF,CAUO,MAAMC,UAAkC,KAAM,CAOnD,YAAYC,EAAgB,CACpB,MAAA,qCAAqCA,CAAS,EAAE,CACxD,CACF,CAUO,MAAMC,UAAmC,KAAM,CAMpD,aAAc,CACZ,MAAM,kCAAkC,CAC1C,CACF,CA6DO,MAAMC,UAAmC,KAAM,CAoCpD,YACEC,EACA,CACE,WAAAC,EACA,SAAAC,EACA,GAAGC,CAAA,EAEL,CAKA,OAJA,MAAMH,CAAO,EACb,KAAK,WAAaC,EAClB,KAAK,SAAWC,EAER,GAAM,CACZ,IAAK,QAASC,EACZ,KAAK,IAAMA,EAAK,IAChB,MACF,IAAK,gBAAiBA,EACpB,KAAK,YAAcA,EAAK,WAC5B,CACF,CACF,CAUO,MAAMC,UAAkCL,CAA2B,CAOxE,YACEM,EACA,CACA,MACE,6DACAA,CAAA,CAEJ,CACF,CAUO,MAAMC,UAAiCP,CAA2B,CAOvE,YACEM,EACA,CACA,MAAM,2BAA4BA,CAAQ,CAC5C,CACF,CAUO,MAAME,UAAsCR,CAA2B,CAO5E,YACEM,EACA,CACA,MACE,mEACAA,CAAA,CAEJ,CACF,CAUO,MAAMG,UAAgC,KAAM,CAWjD,YAAYC,EAAoBC,EAAsB,CAC9C,MAAA,mCAAmCA,EAAc,OAAO,EAAE,EAChE,KAAK,KAAO,0BACZ,KAAK,IAAMD,EACX,KAAK,cAAgBC,CACvB,CACF,CAUO,MAAMC,UAAqCZ,CAA2B,CAO3E,YACEM,EACA,CACA,MAAM,0DAA2DA,CAAQ,CAC3E,CACF,CAUO,MAAMO,UAAoCb,CAA2B,CAO1E,YACEM,EACA,CACA,MAAM,8BAA+BA,CAAQ,CAC/C,CACF,CAUO,MAAMQ,UAAgC,KAAM,CAMjD,aAAc,CACZ,MACE,yGAAA,EAEF,KAAK,KAAO,yBACd,CACF,CAUO,MAAMC,UAAoC,KAAM,CAQrD,YAAYC,EAAiBC,EAAyB,CACpD,MACE,+FAA+FD,CAAO,2BAA2BC,CAAa,EAAA,EAEhJ,KAAK,KAAO,6BACd,CACF,CAUO,MAAMC,UAAuC,KAAM,CAQxD,YACEC,EACAlB,EAAU,mDACV,CACA,MAAMA,GAAWkB,EAAI,KAAKA,EAAE,OAAO,GAAK,GAAG,EAC3C,KAAK,KAAO,gCACd,CACF,CAUO,MAAMC,UAA4B,KAAM,CAQ7C,YACEtB,EACAG,EAAU,qCAAqCH,CAAS,GACxD,CACA,MAAMG,CAAO,EACb,KAAK,KAAO,qBACd,CACF,CAUO,MAAMoB,UAAiC,KAAM,CAQlD,YACEC,EAAe,UACfrB,EAAU,yBAAyBqB,CAAY,GAC/C,CACA,MAAMrB,CAAO,EACb,KAAK,KAAO,0BACd,CACF,CAUO,MAAMsB,UAAyB,KAAM,CAO1C,YAAYtB,EAAU,sBAAuB,CAC3C,MAAMA,CAAO,EACb,KAAK,KAAO,kBACd,CACF"}